{"version":3,"file":"BrowserStackTunnel.js","sourceRoot":"","sources":["../../src/BrowserStackTunnel.ts"],"names":[],"mappings":"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","sourcesContent":["import { chmodSync } from 'fs';\nimport { join } from 'path';\nimport Task from '@dojo/core/async/Task';\nimport request from '@dojo/core/request';\nimport { NodeRequestOptions } from '@dojo/core/request/providers/node';\nimport Tunnel, {\n\tTunnelProperties,\n\tDownloadOptions,\n\tChildExecutor,\n\tNormalizedEnvironment\n} from './Tunnel';\nimport { parse as parseUrl, Url } from 'url';\nimport { mixin } from '@dojo/core/lang';\nimport { JobState } from './interfaces';\nimport { on } from './util';\n\n/**\n * A BrowserStack tunnel.\n *\n * The accessKey and username properties will be initialized using\n * BROWSERSTACK_ACCESS_KEY and BROWSERSTACK_USERNAME.\n */\nexport default class BrowserStackTunnel extends Tunnel {\n\t/**\n\t * Whether or not to start the tunnel with only WebDriver support. Setting\n\t * this value to `false` is not supported.\n\t */\n\tautomateOnly: boolean;\n\n\t/**\n\t * If true, any other tunnels running on the account will be killed when\n\t * the tunnel is started.\n\t */\n\tkillOtherTunnels: boolean;\n\n\t/**\n\t * A list of server URLs that should be proxied by the tunnel. Only the\n\t * hostname, port, and protocol are used.\n\t */\n\tservers: (Url | string)[];\n\n\t/**\n\t * Skip verification that the proxied servers are online and responding at\n\t * the time the tunnel starts.\n\t */\n\tskipServerValidation: boolean;\n\n\t/** If true, route all traffic via the local machine. */\n\tforceLocal: boolean;\n\n\tconstructor(options?: BrowserStackOptions) {\n\t\tsuper(\n\t\t\tmixin(\n\t\t\t\t{\n\t\t\t\t\taccessKey: process.env.BROWSERSTACK_ACCESS_KEY,\n\t\t\t\t\tautomateOnly: true,\n\t\t\t\t\tdirectory: join(__dirname, 'browserstack'),\n\t\t\t\t\tenvironmentUrl:\n\t\t\t\t\t\t'https://www.browserstack.com/automate/browsers.json',\n\t\t\t\t\tforceLocal: false,\n\t\t\t\t\thostname: 'hub.browserstack.com',\n\t\t\t\t\tkillOtherTunnels: false,\n\t\t\t\t\tport: '443',\n\t\t\t\t\tprotocol: 'https',\n\t\t\t\t\tservers: [],\n\t\t\t\t\tskipServerValidation: true,\n\t\t\t\t\tusername: process.env.BROWSERSTACK_USERNAME\n\t\t\t\t},\n\t\t\t\toptions || {}\n\t\t\t)\n\t\t);\n\t}\n\n\tget auth() {\n\t\treturn `${this.username || ''}:${this.accessKey || ''}`;\n\t}\n\n\tget executable() {\n\t\treturn join(\n\t\t\tthis.directory,\n\t\t\t`BrowserStackLocal${this.platform === 'win32' ? '.exe' : ''}`\n\t\t);\n\t}\n\n\tget extraCapabilities(): Object {\n\t\tconst capabilities: any = {\n\t\t\t'browserstack.local': 'true'\n\t\t};\n\n\t\tif (this.tunnelId) {\n\t\t\tcapabilities['browserstack.localIdentifier'] = this.tunnelId;\n\t\t}\n\n\t\treturn capabilities;\n\t}\n\n\tget url() {\n\t\tconst platform = this.platform;\n\t\tconst architecture = this.architecture;\n\t\tlet url =\n\t\t\t'https://www.browserstack.com/browserstack-local/BrowserStackLocal-';\n\n\t\tif (platform === 'darwin' && architecture === 'x64') {\n\t\t\turl += platform + '-' + architecture;\n\t\t} else if (platform === 'win32') {\n\t\t\turl += platform;\n\t\t} else if (\n\t\t\tplatform === 'linux' &&\n\t\t\t(architecture === 'ia32' || architecture === 'x64')\n\t\t) {\n\t\t\turl += platform + '-' + architecture;\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\tplatform + ' on ' + architecture + ' is not supported'\n\t\t\t);\n\t\t}\n\n\t\turl += '.zip';\n\t\treturn url;\n\t}\n\n\tprotected _postDownloadFile(\n\t\tdata: Buffer,\n\t\toptions?: DownloadOptions\n\t): Promise<void> {\n\t\treturn super._postDownloadFile(data, options).then(() => {\n\t\t\tconst executable = this.executable;\n\t\t\tchmodSync(executable, parseInt('0755', 8));\n\t\t});\n\t}\n\n\tprotected _makeArgs(..._values: string[]): string[] {\n\t\tif (!this.username || !this.accessKey) {\n\t\t\tthrow new Error(\n\t\t\t\t'BrowserStackTunnel requires a username and access key'\n\t\t\t);\n\t\t}\n\n\t\tconst args = [\n\t\t\tthis.accessKey,\n\t\t\tthis.servers\n\t\t\t\t.map(function(server) {\n\t\t\t\t\tconst url = parseUrl(String(server));\n\t\t\t\t\treturn [\n\t\t\t\t\t\turl.hostname,\n\t\t\t\t\t\turl.port,\n\t\t\t\t\t\turl.protocol === 'https:' ? 1 : 0\n\t\t\t\t\t].join(',');\n\t\t\t\t})\n\t\t\t\t.join(',')\n\t\t];\n\n\t\tthis.automateOnly && args.push('-onlyAutomate');\n\t\tthis.forceLocal && args.push('-forcelocal');\n\t\tthis.killOtherTunnels && args.push('-force');\n\t\tthis.skipServerValidation && args.push('-skipCheck');\n\t\tthis.tunnelId && args.push('-localIdentifier', this.tunnelId);\n\t\tthis.verbose && args.push('-v');\n\n\t\tif (this.proxy) {\n\t\t\tconst proxy = parseUrl(this.proxy);\n\n\t\t\tproxy.hostname && args.push('-proxyHost', proxy.hostname);\n\t\t\tproxy.port && args.push('-proxyPort', proxy.port);\n\n\t\t\tif (proxy.auth) {\n\t\t\t\tconst auth = proxy.auth.split(':');\n\t\t\t\targs.push('-proxyUser', auth[0], '-proxyPass', auth[1]);\n\t\t\t}\n\t\t\t/*else {\n\t\t\t\tproxy.username && args.push('-proxyUser', proxy.username);\n\t\t\t\tproxy.password && args.push('-proxyPass', proxy.password);\n\t\t\t}*/\n\t\t}\n\n\t\treturn args;\n\t}\n\n\tsendJobState(jobId: string, data: JobState): Task<void> {\n\t\tconst payload = JSON.stringify({\n\t\t\tstatus: data.status || data.success ? 'completed' : 'error'\n\t\t});\n\n\t\tconst url = `https://www.browserstack.com/automate/sessions/${jobId}.json`;\n\t\treturn request\n\t\t\t.put(url, <NodeRequestOptions>{\n\t\t\t\tbody: payload,\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Length': String(\n\t\t\t\t\t\tBuffer.byteLength(payload, 'utf8')\n\t\t\t\t\t),\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t\tpassword: this.accessKey,\n\t\t\t\tuser: this.username,\n\t\t\t\tproxy: this.proxy\n\t\t\t})\n\t\t\t.then<void>(response => {\n\t\t\t\tif (response.status < 200 || response.status >= 300) {\n\t\t\t\t\treturn response.text().then(text => {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\ttext ||\n\t\t\t\t\t\t\t\t`Server reported ${response.status} with no other data.`\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprotected _start(executor: ChildExecutor) {\n\t\treturn this._makeChild((child, resolve, reject) => {\n\t\t\tlet handle = on(child.stdout, 'data', (data: any) => {\n\t\t\t\tdata = String(data);\n\t\t\t\tconst error = /\\s*\\*\\*\\* Error: (.*)$/m.exec(data);\n\t\t\t\tif (error) {\n\t\t\t\t\thandle.destroy();\n\t\t\t\t\treject(new Error(`The tunnel reported: ${error[1]}`));\n\t\t\t\t} else if (\n\t\t\t\t\tdata.indexOf(\n\t\t\t\t\t\t'You can now access your local server(s) in our remote browser'\n\t\t\t\t\t) > -1\n\t\t\t\t) {\n\t\t\t\t\thandle.destroy();\n\t\t\t\t\tresolve();\n\t\t\t\t} else {\n\t\t\t\t\tconst line = data.replace(/^\\s+/, '').replace(/\\s+$/, '');\n\t\t\t\t\tif (\n\t\t\t\t\t\t/^BrowserStackLocal v/.test(line) ||\n\t\t\t\t\t\t/^Connecting to BrowserStack/.test(line) ||\n\t\t\t\t\t\t/^Connected/.test(line)\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.emit({\n\t\t\t\t\t\t\ttype: 'status',\n\t\t\t\t\t\t\ttarget: this,\n\t\t\t\t\t\t\tstatus: line\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\texecutor(child, resolve, reject);\n\t\t});\n\t}\n\n\tprotected _stop(): Promise<number> {\n\t\treturn new Promise(resolve => {\n\t\t\tconst childProcess = this._process;\n\t\t\tif (!childProcess) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet exited = false;\n\n\t\t\tchildProcess.once('exit', function(code) {\n\t\t\t\texited = true;\n\t\t\t\tresolve(code);\n\t\t\t});\n\t\t\tchildProcess.kill('SIGINT');\n\n\t\t\t// As of at least version 5.1, BrowserStackLocal spawns a secondary\n\t\t\t// process. This is the one that needs to receive the CTRL-C, but\n\t\t\t// Node doesn't provide an easy way to get the PID of the secondary\n\t\t\t// process, so we'll just wait a few seconds, then kill the process\n\t\t\t// if it hasn't ended cleanly.\n\t\t\tsetTimeout(function() {\n\t\t\t\tif (!exited) {\n\t\t\t\t\tchildProcess.kill('SIGTERM');\n\t\t\t\t}\n\t\t\t}, 5000);\n\t\t});\n\t}\n\n\t/**\n\t * Attempt to normalize a BrowserStack described environment with the\n\t * standard Selenium capabilities\n\t *\n\t * BrowserStack returns a list of environments that looks like:\n\t *\n\t * {\n\t *     \"browser\": \"opera\",\n\t *     \"os_version\": \"Lion\",\n\t *     \"browser_version\":\"12.15\",\n\t *     \"device\": null,\n\t *     \"os\": \"OS X\"\n\t * }\n\t *\n\t * @param environment a BrowserStack environment descriptor\n\t * @returns a normalized descriptor\n\t */\n\tprotected _normalizeEnvironment(environment: any): NormalizedEnvironment {\n\t\tconst platformMap: any = {\n\t\t\tWindows: {\n\t\t\t\t'10': 'WINDOWS',\n\t\t\t\t'8.1': 'WIN8',\n\t\t\t\t'8': 'WIN8',\n\t\t\t\t'7': 'WINDOWS',\n\t\t\t\tXP: 'XP'\n\t\t\t},\n\n\t\t\t'OS X': 'MAC'\n\t\t};\n\n\t\tconst browserMap: any = {\n\t\t\tie: 'internet explorer'\n\t\t};\n\n\t\t// Create the BS platform name for a given os + version\n\t\tlet platform = platformMap[environment.os] || environment.os;\n\t\tif (typeof platform === 'object') {\n\t\t\tplatform = platform[environment.os_version];\n\t\t}\n\n\t\tconst browserName =\n\t\t\tbrowserMap[environment.browser] || environment.browser;\n\t\tconst version = environment.browser_version;\n\n\t\treturn {\n\t\t\tplatform,\n\t\t\tplatformName: environment.os,\n\t\t\tplatformVersion: environment.os_version,\n\n\t\t\tbrowserName,\n\t\t\tbrowserVersion: version,\n\t\t\tversion: environment.browser_version,\n\n\t\t\tdescriptor: environment,\n\n\t\t\tintern: {\n\t\t\t\tplatform,\n\t\t\t\tbrowserName,\n\t\t\t\tversion\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport interface BrowserStackProperties extends TunnelProperties {\n\tautomateOnly: boolean;\n\tkillOtherTunnels: boolean;\n\tservers: (Url | string)[];\n\tskipServerValidation: boolean;\n\tforceLocal: boolean;\n\tenvironmentUrl: string;\n}\n\nexport type BrowserStackOptions = Partial<BrowserStackProperties>;\n"]}