{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHandle } from '@dojo/core/lang';\nimport { Handle } from '@dojo/core/interfaces';\nimport { mkdirSync, statSync, writeFile as fsWriteFile } from 'fs';\nimport { dirname } from 'path';\nimport { execSync } from 'child_process';\n\n/**\n * Attaches an event to a Node.js EventEmitter and returns a handle for removing\n * the listener later.\n *\n * @param emitter A Node.js EventEmitter object.\n * @param event The name of the event to listen for.\n * @param listener The event listener that will be invoked when the event\n * occurs.\n * @returns A remove handle.\n */\nexport function on(\n\temitter: NodeJS.EventEmitter,\n\tevent: string | symbol,\n\tlistener: (...args: any[]) => void\n): Handle {\n\temitter.on(event, listener);\n\treturn createHandle(() => emitter.removeListener(event, listener));\n}\n\n/**\n * Returns true if a file or directory exists\n *\n * @param filename\n * @returns true if filename exists, false otherwise\n */\nexport function fileExists(filename: string): boolean {\n\ttry {\n\t\tstatSync(filename);\n\t\treturn true;\n\t} catch (error) {\n\t\treturn false;\n\t}\n}\n\n/**\n * Kill a process and its immediate children\n *\n * This function will attempt to kill all processes that it should, and will\n * report an error at the end if any process could not be killed.\n */\nexport function kill(pid: number) {\n\tlet error: Error | undefined;\n\n\tgetChildProcesses(pid).forEach(childPid => {\n\t\ttry {\n\t\t\tkillProcess(childPid);\n\t\t} catch (err) {\n\t\t\terror = err;\n\t\t}\n\t});\n\n\ttry {\n\t\tkillProcess(pid);\n\t} catch (err) {\n\t\terror = err;\n\t}\n\n\tif (error) {\n\t\tthrow new Error(\n\t\t\t`Failed to kill ${pid} or one of its children: ${error.message}`\n\t\t);\n\t}\n}\n\nfunction killProcess(pid: number) {\n\ttry {\n\t\tprocess.kill(pid);\n\t} catch (error) {\n\t\t// Ignore the error if the process couldn't be found since that means\n\t\t// it's already dead\n\t\tif (error.code !== 'ESRCH') {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\n/**\n * Writes data to a file.\n *\n * The file's parent directories will be created if they do not already exist.\n *\n * @param data\n * @param filename\n * @returns A Promise that resolves when the file has been written\n */\nexport function writeFile(data: any, filename: string) {\n\treturn new Promise<void>(function(resolve, reject) {\n\t\tfunction mkdirp(dir: string) {\n\t\t\tif (!dir) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tmkdirSync(dir);\n\t\t\t} catch (error) {\n\t\t\t\t// A parent directory didn't exist, create it\n\t\t\t\tif (error.code === 'ENOENT') {\n\t\t\t\t\tmkdirp(dirname(dir));\n\t\t\t\t\tmkdirp(dir);\n\t\t\t\t} else {\n\t\t\t\t\tif (!statSync(dir).isDirectory()) {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmkdirp(dirname(filename));\n\t\tfsWriteFile(filename, data, function(error) {\n\t\t\tif (error) {\n\t\t\t\treject(error);\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Get the children of a process\n */\nfunction getChildProcesses(pid: number) {\n\tconst command =\n\t\tprocess.platform === 'win32'\n\t\t\t? 'wmic PROCESS GET ParentProcessId,ProcessId'\n\t\t\t: 'ps -A -o ppid,pid';\n\n\treturn execSync(command, { encoding: 'utf8' })\n\t\t.trim()\n\t\t.split('\\n')\n\t\t.slice(1)\n\t\t.map(line => line.trim())\n\t\t.map(line => line.split(/\\s+/).map(word => word.trim()))\n\t\t.map(words => ({ parent: Number(words[0]), child: Number(words[1]) }))\n\t\t.filter(entry => entry.parent === pid)\n\t\t.map(entry => entry.child);\n}\n"]}