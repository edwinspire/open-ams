{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/util.ts"],"names":[],"mappings":";;AAAA,wCAA+C;AAE/C,yBAAmE;AACnE,6BAA+B;AAY/B,YACC,OAA4B,EAC5B,KAAsB,EACtB,QAAkB;IAElB,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC5B,MAAM,CAAC,mBAAY,CAAC,cAAM,OAAA,OAAO,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAvC,CAAuC,CAAC,CAAC;AACpE,CAAC;AAPD,gBAOC;AAQD,oBAA2B,QAAgB;IAC1C,IAAI,CAAC;QACJ,aAAQ,CAAC,QAAQ,CAAC,CAAC;QACnB,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAChB,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;AACF,CAAC;AAPD,gCAOC;AAWD,mBAA0B,IAAS,EAAE,QAAgB;IACpD,MAAM,CAAC,IAAI,OAAO,CAAO,UAAS,OAAO,EAAE,MAAM;QAChD,gBAAgB,GAAW;YAC1B,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC;YACR,CAAC;YAED,IAAI,CAAC;gBACJ,cAAS,CAAC,GAAG,CAAC,CAAC;YAChB,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAEhB,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;oBAC7B,MAAM,CAAC,cAAO,CAAC,GAAG,CAAC,CAAC,CAAC;oBACrB,MAAM,CAAC,GAAG,CAAC,CAAC;gBACb,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,EAAE,CAAC,CAAC,CAAC,aAAQ,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;wBAClC,MAAM,KAAK,CAAC;oBACb,CAAC;gBACF,CAAC;YACF,CAAC;QACF,CAAC;QAED,MAAM,CAAC,cAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1B,cAAW,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAS,KAAK;YACzC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC,KAAK,CAAC,CAAC;YACf,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,OAAO,EAAE,CAAC;YACX,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACJ,CAAC;AA/BD,8BA+BC","sourcesContent":["import { createHandle } from '@dojo/core/lang';\nimport { Handle } from '@dojo/core/interfaces';\nimport { mkdirSync, statSync, writeFile as fsWriteFile } from 'fs';\nimport { dirname } from 'path';\n\n/**\n * Attaches an event to a Node.js EventEmitter and returns a handle for removing\n * the listener later.\n *\n * @param emitter A Node.js EventEmitter object.\n * @param event The name of the event to listen for.\n * @param listener The event listener that will be invoked when the event\n * occurs.\n * @returns A remove handle.\n */\nexport function on(\n\temitter: NodeJS.EventEmitter,\n\tevent: string | symbol,\n\tlistener: Function\n): Handle {\n\temitter.on(event, listener);\n\treturn createHandle(() => emitter.removeListener(event, listener));\n}\n\n/**\n * Returns true if a file or directory exists\n *\n * @param filename\n * @returns true if filename exists, false otherwise\n */\nexport function fileExists(filename: string): boolean {\n\ttry {\n\t\tstatSync(filename);\n\t\treturn true;\n\t} catch (error) {\n\t\treturn false;\n\t}\n}\n\n/**\n * Writes data to a file.\n *\n * The file's parent directories will be created if they do not already exist.\n *\n * @param data\n * @param filename\n * @returns A Promise that resolves when the file has been written\n */\nexport function writeFile(data: any, filename: string) {\n\treturn new Promise<void>(function(resolve, reject) {\n\t\tfunction mkdirp(dir: string) {\n\t\t\tif (!dir) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tmkdirSync(dir);\n\t\t\t} catch (error) {\n\t\t\t\t// A parent directory didn't exist, create it\n\t\t\t\tif (error.code === 'ENOENT') {\n\t\t\t\t\tmkdirp(dirname(dir));\n\t\t\t\t\tmkdirp(dir);\n\t\t\t\t} else {\n\t\t\t\t\tif (!statSync(dir).isDirectory()) {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmkdirp(dirname(filename));\n\t\tfsWriteFile(filename, data, function(error) {\n\t\t\tif (error) {\n\t\t\t\treject(error);\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\n"]}