{"version":3,"file":"digdugEnvironments.js","sourceRoot":"","sources":["../../../src/bin/digdugEnvironments.ts"],"names":[],"mappings":";;;AAEA,uBAAyB;AACzB,2BAA6B;AAI7B,IAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AAE3C,IAAM,OAAO,GAAG,EAAE;KAChB,WAAW,CAAC,UAAU,CAAC;KACvB,MAAM,CAAC,UAAS,IAAI;IACpB,MAAM,CAAC,CACN,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC;QAChC,IAAI,KAAK,eAAe;QACxB,IAAI,KAAK,WAAW;QACpB,IAAI,KAAK,mBAAmB,CAC5B,CAAC;AACH,CAAC,CAAC;KACD,GAAG,CAAC,UAAS,IAAI;IACjB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC;AAEJ,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;IAC/B,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;IAC1C,OAAO,CAAC,GAAG,EAAE,CAAC;IACd,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;IAClC,OAAO,CAAC,OAAO,CAAC,UAAS,MAAM;QAC9B,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IACH,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC;AAED,IAAM,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAEnC,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,8BAA8B,CAAC,CAAC;IACzD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC;AAED,IAAM,UAAU,GAAkB,OAAO,CAAC,KAAK,GAAG,UAAU,CAAC,CAAC,OAAO,CAAC;AACtE,IAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;AAChC,MAAM;KACJ,eAAe,EAAE;KACjB,IAAI,CAAC,UAAS,YAAY;IAC1B,YAAY,CAAC,OAAO,CAAC,UAAS,WAAW;QACxC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC;KACD,KAAK,CAAC,UAAS,KAAK;IACpB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport Tunnel from '../Tunnel';\n\nconst digdugPath = path.dirname(__dirname);\n\nconst tunnels = fs\n\t.readdirSync(digdugPath)\n\t.filter(function(name) {\n\t\treturn (\n\t\t\t/[A-Z]\\w+Tunnel\\.js$/.test(name) &&\n\t\t\tname !== 'NullTunnel.js' &&\n\t\t\tname !== 'Tunnel.js' &&\n\t\t\tname !== 'SeleniumTunnel.js'\n\t\t);\n\t})\n\t.map(function(name) {\n\t\treturn name.slice(0, name.length - 3);\n\t});\n\nif (process.argv.length !== 3) {\n\tconsole.log('usage: environments TUNNEL');\n\tconsole.log();\n\tconsole.log('Available tunnels:');\n\ttunnels.forEach(function(tunnel) {\n\t\tconsole.log('  ' + tunnel);\n\t});\n\tprocess.exit(1);\n}\n\nconst tunnelName = process.argv[2];\n\nif (tunnels.indexOf(tunnelName) === -1) {\n\tconsole.log(tunnelName + ' is not a valid tunnel class');\n\tprocess.exit(1);\n}\n\nconst TunnelCtor: typeof Tunnel = require('../' + tunnelName).default;\nconst tunnel = new TunnelCtor();\ntunnel\n\t.getEnvironments()\n\t.then(function(environments) {\n\t\tenvironments.forEach(function(environment) {\n\t\t\tconsole.log(JSON.stringify(environment.intern));\n\t\t});\n\t})\n\t.catch(function(error) {\n\t\tconsole.error(error);\n\t});\n"]}