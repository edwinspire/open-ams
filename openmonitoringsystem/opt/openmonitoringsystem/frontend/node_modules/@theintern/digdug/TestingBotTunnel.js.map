{"version":3,"file":"TestingBotTunnel.js","sourceRoot":"","sources":["../../src/TestingBotTunnel.ts"],"names":[],"mappings":"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","sourcesContent":["import Tunnel, {\n\tTunnelProperties,\n\tChildExecutor,\n\tNormalizedEnvironment\n} from './Tunnel';\nimport { existsSync, watchFile, unlinkSync, unwatchFile } from 'fs';\nimport UrlSearchParams from '@dojo/core/UrlSearchParams';\nimport { tmpdir } from 'os';\nimport { join } from 'path';\nimport request from '@dojo/core/request';\nimport { NodeRequestOptions } from '@dojo/core/request/providers/node';\nimport { parse } from 'url';\nimport { fileExists, on } from './util';\nimport { mixin } from '@dojo/core/lang';\nimport { JobState } from './interfaces';\nimport Task from '@dojo/core/async/Task';\n\n/**\n * A TestingBot tunnel.\n *\n * The username and accessKey properties will be initialized using\n * TESTINGBOT_API_KEY and TESTINGBOT_API_SECRET.\n */\nexport default class TestingBotTunnel extends Tunnel\n\timplements TunnelProperties {\n\t/**\n\t * A list of regular expressions corresponding to domains whose connections\n\t * should fail immediately if the VM attempts to make a connection to them.\n\t */\n\tfastFailDomains: string[];\n\n\t/** A filename where additional logs from the tunnel should be output. */\n\tlogFile: string;\n\n\t/** Whether or not to use rabbIT compression for the tunnel connection. */\n\tuseCompression: boolean;\n\n\t/** Whether or not to use the default local Jetty proxy for the tunnel. */\n\tuseJettyProxy: boolean;\n\n\t/** Whether or not to use the default remote Squid proxy for the VM. */\n\tuseSquidProxy: boolean;\n\n\t/**\n\t * Whether or not to re-encrypt data encrypted by self-signed certificates.\n\t */\n\tuseSsl: boolean;\n\n\tconstructor(options?: TestingBotOptions) {\n\t\tsuper(\n\t\t\tmixin(\n\t\t\t\t{\n\t\t\t\t\tusername: process.env.TESTINGBOT_KEY,\n\t\t\t\t\taccessKey: process.env.TESTINGBOT_SECRET,\n\t\t\t\t\tdirectory: join(__dirname, 'testingbot'),\n\t\t\t\t\tenvironmentUrl: 'https://api.testingbot.com/v1/browsers',\n\t\t\t\t\texecutable: 'java',\n\t\t\t\t\tfastFailDomains: [],\n\t\t\t\t\tlogFile: null,\n\t\t\t\t\tport: 4445,\n\t\t\t\t\turl:\n\t\t\t\t\t\t'https://testingbot.com/downloads/testingbot-tunnel.zip',\n\t\t\t\t\tuseCompression: false,\n\t\t\t\t\tuseJettyProxy: true,\n\t\t\t\t\tuseSquidProxy: true,\n\t\t\t\t\tuseSsl: false\n\t\t\t\t},\n\t\t\t\toptions || {}\n\t\t\t)\n\t\t);\n\t}\n\n\tget auth() {\n\t\treturn `${this.username || ''}:${this.accessKey || ''}`;\n\t}\n\n\tget isDownloaded() {\n\t\treturn fileExists(\n\t\t\tjoin(this.directory, 'testingbot-tunnel/testingbot-tunnel.jar')\n\t\t);\n\t}\n\n\tprotected _makeArgs(readyFile: string): string[] {\n\t\tif (!this.username || !this.accessKey) {\n\t\t\tthrow new Error(\n\t\t\t\t'TestingBotTunnel requires a username and access key'\n\t\t\t);\n\t\t}\n\n\t\tconst args = [\n\t\t\t'-jar',\n\t\t\tjoin(this.directory, 'testingbot-tunnel', 'testingbot-tunnel.jar'),\n\t\t\tthis.username,\n\t\t\tthis.accessKey,\n\t\t\t'-P',\n\t\t\tthis.port,\n\t\t\t'-f',\n\t\t\treadyFile\n\t\t];\n\n\t\tthis.fastFailDomains.length &&\n\t\t\targs.push('-F', this.fastFailDomains.join(','));\n\t\tthis.logFile && args.push('-l', this.logFile);\n\t\tthis.useJettyProxy || args.push('-x');\n\t\tthis.useSquidProxy || args.push('-q');\n\t\tthis.useCompression && args.push('-b');\n\t\tthis.useSsl && args.push('-s');\n\t\tthis.verbose && args.push('-d');\n\n\t\tif (this.proxy) {\n\t\t\tconst proxy = parse(this.proxy);\n\n\t\t\tproxy.hostname && args.unshift('-Dhttp.proxyHost=', proxy.hostname);\n\t\t\tproxy.port && args.unshift('-Dhttp.proxyPort=', proxy.port);\n\t\t}\n\n\t\treturn args;\n\t}\n\n\tsendJobState(jobId: string, data: JobState): Task<void> {\n\t\tconst params = new UrlSearchParams();\n\n\t\tdata.success != null &&\n\t\t\tparams.set('test[success]', String(data.success ? 1 : 0));\n\t\tdata.status && params.set('test[status_message]', data.status);\n\t\tdata.name && params.set('test[name]', data.name);\n\t\tdata.extra && params.set('test[extra]', JSON.stringify(data.extra));\n\t\tdata.tags &&\n\t\t\tdata.tags.length &&\n\t\t\tparams.set('groups', data.tags.join(','));\n\n\t\tconst url = `https://api.testingbot.com/v1/tests/${jobId}`;\n\t\tconst payload = params.toString();\n\t\treturn request\n\t\t\t.put(url, <NodeRequestOptions>{\n\t\t\t\tbody: payload,\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Length': String(\n\t\t\t\t\t\tBuffer.byteLength(payload, 'utf8')\n\t\t\t\t\t),\n\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded'\n\t\t\t\t},\n\t\t\t\tpassword: this.accessKey,\n\t\t\t\tuser: this.username,\n\t\t\t\tproxy: this.proxy\n\t\t\t})\n\t\t\t.then(function(response) {\n\t\t\t\treturn response.text().then(text => {\n\t\t\t\t\tif (text) {\n\t\t\t\t\t\tconst data = JSON.parse(text);\n\n\t\t\t\t\t\tif (data.error) {\n\t\t\t\t\t\t\tthrow new Error(data.error);\n\t\t\t\t\t\t} else if (!data.success) {\n\t\t\t\t\t\t\tthrow new Error('Job data failed to save.');\n\t\t\t\t\t\t} else if (response.status !== 200) {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`Server reported ${response.status} with: ${text}`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Server reported ${response.status} with no other data.`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprotected _start(executor: ChildExecutor) {\n\t\tconst readyFile = join(tmpdir(), 'testingbot-' + Date.now());\n\n\t\treturn this._makeChild((child, resolve, reject) => {\n\t\t\tfunction _reject(message: string) {\n\t\t\t\tconst pidFile = 'testingbot-tunnel.pid';\n\t\t\t\tif (existsSync(pidFile)) {\n\t\t\t\t\t// Remove the pidfile to ensure the running tunnel app shuts\n\t\t\t\t\t// down\n\t\t\t\t\tunlinkSync(pidFile);\n\t\t\t\t}\n\t\t\t\treject(message);\n\t\t\t}\n\n\t\t\t// Polling API is used because we are only watching for one file, so\n\t\t\t// efficiency is not a big deal, and the `fs.watch` API has extra\n\t\t\t// restrictions which are best avoided\n\t\t\twatchFile(\n\t\t\t\treadyFile,\n\t\t\t\t{ persistent: false, interval: 1007 },\n\t\t\t\tfunction(current, previous) {\n\t\t\t\t\tif (Number(current.mtime) === Number(previous.mtime)) {\n\t\t\t\t\t\t// readyFile hasn't been modified, so ignore the event\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tunwatchFile(readyFile);\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tlet lastMessage: string;\n\t\t\tthis._handle = on(child.stderr, 'data', (data: string) => {\n\t\t\t\tdata = String(data);\n\t\t\t\tdata.split('\\n').forEach(message => {\n\t\t\t\t\tif (message.indexOf('INFO: ') === 0) {\n\t\t\t\t\t\tmessage = message.slice('INFO: '.length);\n\t\t\t\t\t\t// the tunnel produces a lot of repeating messages\n\t\t\t\t\t\t// during setup when the status is pending; deduplicate\n\t\t\t\t\t\t// them for sanity\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tmessage !== lastMessage &&\n\t\t\t\t\t\t\tmessage.indexOf('>> [') === -1 &&\n\t\t\t\t\t\t\tmessage.indexOf('<< [') === -1\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.emit({\n\t\t\t\t\t\t\t\ttype: 'status',\n\t\t\t\t\t\t\t\ttarget: this,\n\t\t\t\t\t\t\t\tstatus: message\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlastMessage = message;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (message.indexOf('SEVERE: ') === 0) {\n\t\t\t\t\t\t_reject(message);\n\t\t\t\t\t} else if (message.indexOf('An error ocurred:') === 0) {\n\t\t\t\t\t\t_reject(message);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\texecutor(child, resolve, reject);\n\t\t}, readyFile);\n\t}\n\n\t/**\n\t * Attempt to normalize a TestingBot described environment with the standard\n\t * Selenium capabilities\n\t *\n\t * TestingBot returns a list of environments that looks like:\n\t *\n\t * {\n\t *     \"selenium_name\": \"Chrome36\",\n\t *     \"name\": \"googlechrome\",\n\t *     \"platform\": \"CAPITAN\",\n\t *     \"version\":\"36\"\n\t * }\n\t *\n\t * @param environment a TestingBot environment descriptor\n\t * @returns a normalized descriptor\n\t */\n\tprotected _normalizeEnvironment(environment: any): NormalizedEnvironment {\n\t\tconst browserMap: any = {\n\t\t\tgooglechrome: 'chrome',\n\t\t\tiexplore: 'internet explorer'\n\t\t};\n\n\t\tconst platform = environment.platform;\n\t\tconst browserName = browserMap[environment.name] || environment.name;\n\t\tconst version = environment.version;\n\n\t\treturn {\n\t\t\tplatform,\n\t\t\tbrowserName,\n\t\t\tversion,\n\t\t\tdescriptor: environment,\n\n\t\t\tintern: {\n\t\t\t\tplatform,\n\t\t\t\tbrowserName,\n\t\t\t\tversion\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport interface TestingBotProperties extends TunnelProperties {\n\tfastFailDomains: string[];\n\tlogFile: string;\n\tuseCompression: boolean;\n\tuseJettyProxy: boolean;\n\tuseSquidProxy: boolean;\n\tuseSsl: boolean;\n}\n\nexport type TestingBotOptions = Partial<TestingBotProperties>;\n"]}