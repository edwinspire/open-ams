{"version":3,"file":"Command.js","sourceRoot":"","sources":["../../src/Command.ts"],"names":[],"mappings":"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","sourcesContent":["import { sleep, trimStack } from './lib/util';\nimport Element from './Element';\nimport Task from '@dojo/core/async/Task';\nimport Session from './Session';\nimport Locator, { Strategy } from './lib/Locator';\nimport { LogEntry, Geolocation, WebDriverCookie } from './interfaces';\n\n/**\n * The Command class is a chainable, subclassable object type that can be used\n * to execute commands serially against a remote WebDriver environment. The\n * standard Command class includes methods from the [[Session]] and [[Element]]\n * classes, so you can perform all standard session and element operations that\n * come with Leadfoot without being forced to author long promise chains.\n *\n * In order to use the Command class, you first need to pass it a [[Session]]\n * instance for it to use:\n *\n * ```js\n * const command = new Command(session);\n * ```\n *\n * Once you have created the Command, you can then start chaining methods, and\n * they will execute in order one after another:\n *\n * ```js\n * command.get('http://example.com')\n *     .findByTagName('h1')\n *     .getVisibleText()\n *     .then(function (text) {\n *         assert.strictEqual(text, 'Example Domain');\n *     });\n * ```\n *\n * Because these operations are asynchronous, you need to use a `then` callback\n * in order to retrieve the value from the last method. Command objects are\n * PromiseLikes, which means that they can be used with any Promises/A+ or\n * ES6-conformant Promises implementation, though there are some specific\n * differences in the arguments and context that are provided to callbacks; see\n * [[Command.Command.then]] for more details.\n *\n * Because Commands are promise-like, they may also be used with `async/await`:\n *\n * ```js\n * const page = await command.get('http://example.com');\n * const h1 = await page.findByTagName('h1');\n * const text = await h1.getVisibleText();\n * assert.strictEqual(text, 'Example Domain');\n * ```\n *\n * ---\n *\n * Each call on a Command generates a new Command object, which means that\n * certain operations can be parallelised:\n *\n * ```js\n * command = command.get('http://example.com');\n * Promise.all([\n *     command.getPageTitle(),\n *     command.findByTagName('h1').getVisibleText()\n * ]).then(results => {\n *     assert.strictEqual(results[0], results[1]);\n * });\n * ```\n *\n * In this example, the commands on line 3 and 4 both depend upon the `get`\n * call completing successfully but are otherwise independent of each other and\n * so execute here in parallel. This is different from commands in Intern 1\n * which were always chained onto the last called method within a given test.\n *\n * ---\n *\n * Command objects actually encapsulate two different types of interaction:\n * *session* interactions, which operate against the entire browser session,\n * and *element* interactions, which operate against specific elements taken\n * from the currently loaded page. Things like navigating the browser, moving\n * the mouse cursor, and executing scripts are session interactions; things\n * like getting text displayed on the page, typing into form fields, and\n * getting element attributes are element interactions.\n *\n * Session interactions can be performed at any time, from any Command. On the\n * other hand, to perform element interactions, you first need to retrieve one\n * or more elements to interact with. This can be done using any of the `find`\n * or `findAll` methods, by the `getActiveElement` method, or by returning\n * elements from `execute` or `executeAsync` calls. The retrieved elements are\n * stored internally as the *element context* of all chained Commands. When an\n * element method is called on a chained Command with a single element context,\n * the result will be returned as-is:\n *\n * ```js\n * command = command.get('http://example.com')\n *     // finds one element -> single element context\n *     .findByTagName('h1')\n *     .getVisibleText()\n *     .then(text => {\n *         // `text` is the text from the element context\n *         assert.strictEqual(text, 'Example Domain');\n *     });\n * ```\n *\n * When an element method is called on a chained Command with a multiple\n * element context, the result will be returned as an array:\n *\n * ```js\n * command = command.get('http://example.com')\n *     // finds multiple elements -> multiple element context\n *     .findAllByTagName('p')\n *     .getVisibleText()\n *     .then(texts => {\n *         // `texts` is an array of text from each of the `p` elements\n *         assert.deepEqual(texts, [\n *             'This domain is established to be used for […]',\n *             'More information...'\n *         ]);\n *     });\n * ```\n *\n * The `find` and `findAll` methods are special and change their behaviour\n * based on the current element filtering state of a given command. If a\n * command has been filtered by element, the `find` and `findAll` commands will\n * only find elements *within* the currently filtered set of elements.\n * Otherwise, they will find elements throughout the page.\n *\n * Some method names, like `click`, are identical for both Session and Element\n * APIs; in this case, the element APIs are suffixed with the word `Element` in\n * order to identify them uniquely.\n *\n * ---\n *\n * Commands can be subclassed in order to add additional functionality without\n * making direct modifications to the default Command prototype that might\n * break other parts of the system:\n *\n * ```ts\n * class CustomCommand extends Command {\n *     login(username: string, password: string) {\n *         return new this.constructor(this, function () {\n *             return this.parent\n *                 .findById('username')\n *                 .click()\n *                 .type(username)\n *                 .end()\n *\n *                 .findById('password')\n *                 .click()\n *                 .type(password)\n *                 .end()\n *\n *                 .findById('login')\n *                 .click()\n *                 .end();\n *         });\n *     }\n * }\n * ```\n *\n * >  ⚠️Note that returning `this`, or a command chain starting from `this`,\n * from a callback or command initialiser will deadlock the Command, as it\n * waits for itself to settle before settling.\n */\nexport default class Command<T, P = any> extends Locator<\n\tCommand<Element>,\n\tCommand<Element[]>,\n\tCommand<void>\n> implements PromiseLike<T> {\n\t/**\n\t * Augments `target` with a conversion of the `originalFn` method that\n\t * enables its use with a Command object. This can be used to easily add\n\t * new methods from any custom object that implements the Session API to\n\t * any target object that implements the Command API.\n\t *\n\t * Functions that are copied may have the following extra properties in\n\t * order to change the way that Command works with these functions:\n\t *\n\t * * `createsContext` (boolean): If this property is specified, the return\n\t *   value from the function will be used as the new context for the\n\t *   returned Command.\n\t * * `usesElement` (boolean): If this property is specified, element(s)\n\t *   from the current context will be used as the first argument to the\n\t *   function, if the explicitly specified first argument is not already an\n\t *   element.\n\t *\n\t * @param {module:leadfoot/Command} target\n\t * @param {string} key\n\t * @param {Function} originalFn\n\t */\n\tstatic addSessionMethod<U>(\n\t\ttarget: Command<U>,\n\t\tkey: string,\n\t\toriginalFn: Function\n\t) {\n\t\t// Checking for private/non-functions here deduplicates this logic;\n\t\t// otherwise it would need to exist in both the Command constructor\n\t\t// (for copying functions from sessions) as well as the Command factory\n\t\t// below\n\t\tif (\n\t\t\tkey.charAt(0) !== '_' &&\n\t\t\t!(<any>target)[key] &&\n\t\t\ttypeof originalFn === 'function'\n\t\t) {\n\t\t\t(<any>target)[key] = function(\n\t\t\t\tthis: Command<U>,\n\t\t\t\t...args: any[]\n\t\t\t): Command<U> {\n\t\t\t\treturn new (this.constructor as typeof Command)<U>(\n\t\t\t\t\tthis,\n\t\t\t\t\tfunction(this: Command<U>, setContext: SetContextMethod) {\n\t\t\t\t\t\tconst parentContext = this._context;\n\t\t\t\t\t\tconst session = this._session;\n\t\t\t\t\t\tlet promise: Task<any>;\n\t\t\t\t\t\t// The function may have come from a session object\n\t\t\t\t\t\t// prototype but have been overridden on the actual session\n\t\t\t\t\t\t// instance; in such a case, the overridden function should\n\t\t\t\t\t\t// be used instead of the one from the original source\n\t\t\t\t\t\t// object. The original source object may still be used,\n\t\t\t\t\t\t// however, if the function is being added like a mixin and\n\t\t\t\t\t\t// does not exist on the actual session object for this\n\t\t\t\t\t\t// session\n\t\t\t\t\t\tconst fn = (<any>session)[key] || originalFn;\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tfn.usesElement &&\n\t\t\t\t\t\t\tparentContext.length &&\n\t\t\t\t\t\t\t(!args[0] || !args[0].elementId)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// Defer converting arguments into an array until it is\n\t\t\t\t\t\t\t// necessary to avoid overhead\n\t\t\t\t\t\t\targs = Array.prototype.slice.call(args, 0);\n\n\t\t\t\t\t\t\tif (parentContext.isSingle) {\n\t\t\t\t\t\t\t\tpromise = fn.apply(\n\t\t\t\t\t\t\t\t\tsession,\n\t\t\t\t\t\t\t\t\t[parentContext[0]].concat(args)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpromise = Task.all(\n\t\t\t\t\t\t\t\t\tparentContext.map(function(\n\t\t\t\t\t\t\t\t\t\telement: Element\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\treturn fn.apply(\n\t\t\t\t\t\t\t\t\t\t\tsession,\n\t\t\t\t\t\t\t\t\t\t\t[element].concat(args)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpromise = fn.apply(session, args);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (fn.createsContext) {\n\t\t\t\t\t\t\tpromise = promise.then(function(newContext) {\n\t\t\t\t\t\t\t\tsetContext(newContext);\n\t\t\t\t\t\t\t\treturn newContext;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn <Task<U>>promise;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Augments `target` with a method that will call `key` on all context\n\t * elements stored within `target`. This can be used to easily add new\n\t * methods from any custom object that implements the Element API to any\n\t * target object that implements the Command API.\n\t *\n\t * Functions that are copied may have the following extra properties in\n\t * order to change the way that Command works with these functions:\n\t *\n\t * * `createsContext` (boolean): If this property is specified, the return\n\t *   value from the function will be used as the new context for the\n\t *   returned Command.\n\t *\n\t * @param {module:leadfoot/Command} target\n\t * @param {string} key\n\t */\n\tstatic addElementMethod<T>(target: Command<T>, key: string) {\n\t\tconst anyTarget = <any>target;\n\t\tif (key.charAt(0) !== '_') {\n\t\t\t// some methods, like `click`, exist on both Session and Element;\n\t\t\t// deduplicate these methods by appending the element ones with\n\t\t\t// 'Element'\n\t\t\tconst targetKey = key + (anyTarget[key] ? 'Element' : '');\n\t\t\tanyTarget[targetKey] = function(\n\t\t\t\tthis: Command<T>,\n\t\t\t\t...args: any[]\n\t\t\t): Command<T> {\n\t\t\t\treturn new (this.constructor as typeof Command)(this, function(\n\t\t\t\t\tsetContext: SetContextMethod\n\t\t\t\t) {\n\t\t\t\t\tconst parentContext = this._context;\n\t\t\t\t\tlet promise: Task<any>;\n\t\t\t\t\tlet fn =\n\t\t\t\t\t\t(<any>parentContext)[0] && (<any>parentContext)[0][key];\n\n\t\t\t\t\tif (parentContext.isSingle) {\n\t\t\t\t\t\tpromise = fn.apply(parentContext[0], args);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpromise = Task.all(\n\t\t\t\t\t\t\tparentContext.map(function(element: any) {\n\t\t\t\t\t\t\t\treturn element[key].apply(element, args);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (fn && fn.createsContext) {\n\t\t\t\t\t\tpromise = promise.then(function(newContext) {\n\t\t\t\t\t\t\tsetContext(newContext);\n\t\t\t\t\t\t\treturn newContext;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn <Task<T>>promise;\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate _parent: Command<P>;\n\tprivate _session: Session;\n\tprivate _context: Context;\n\tprivate _task: Task<any>;\n\n\t/**\n\t * @param parent The parent command that this command is chained to, or a\n\t * [[Sesssion]] object if this is the first command in a command chain.\n\t *\n\t * @param initialiser A function that will be executed when all parent\n\t * commands have completed execution. This function can create a new\n\t * context for this command by calling the passed `setContext` function any\n\t * time prior to resolving the Promise that it returns. If no context is\n\t * explicitly provided, the context from the parent command will be used.\n\t *\n\t * @param errback A function that will be executed if any parent commands\n\t * failed to complete successfully. This function can create a new context\n\t * for the current command by calling the passed `setContext` function any\n\t * time prior to resolving the Promise that it returns. If no context is\n\t * explicitly provided, the context from the parent command will be used.\n\t */\n\t// TODO: Need to show that parent is mixed into this Command\n\tconstructor(\n\t\tparentOrSession: Session | Command<P> | null,\n\t\tinitialiser?: (\n\t\t\tthis: Command<T>,\n\t\t\tsetContext: SetContextMethod,\n\t\t\tvalue: T\n\t\t) => T | Task<T>,\n\t\terrback?: (\n\t\t\tthis: Command<T>,\n\t\t\tsetContext: SetContextMethod,\n\t\t\terror: Error\n\t\t) => T | Task<T>\n\t) {\n\t\tsuper();\n\n\t\tconst self = this;\n\t\tlet session: Session;\n\t\tconst trace: any = {};\n\n\t\tfunction setContext(contextValue: Element | Element[]) {\n\t\t\tlet context: Context;\n\t\t\tif (!Array.isArray(contextValue)) {\n\t\t\t\tcontext = <Context>[contextValue];\n\t\t\t\tcontext.isSingle = true;\n\t\t\t} else {\n\t\t\t\tcontext = contextValue;\n\t\t\t}\n\n\t\t\tconst parent = <Command<P>>parentOrSession;\n\n\t\t\t// If the context being set has depth, then it is coming from\n\t\t\t// `Command#end`, or someone smart knows what they are doing; do\n\t\t\t// not change the depth\n\t\t\tif (!('depth' in context)) {\n\t\t\t\tcontext.depth = parent ? parent.context.depth! + 1 : 0;\n\t\t\t}\n\n\t\t\tself._context = context;\n\t\t}\n\n\t\tfunction fixStack(error: Error) {\n\t\t\terror.stack = error.stack + trimStack(trace.stack);\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (parentOrSession instanceof Command) {\n\t\t\tthis._parent = parentOrSession;\n\t\t\tsession = this._session = parentOrSession.session;\n\t\t} else if (parentOrSession instanceof Session) {\n\t\t\tsession = this._session = parentOrSession;\n\t\t\tparentOrSession = null;\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t'A parent Command or Session must be provided to a new Command'\n\t\t\t);\n\t\t}\n\n\t\t// Add any custom functions from the session to this command object so\n\t\t// they can be accessed automatically using the fluid interfaces\n\t\t// TODO: Test\n\t\tfor (let key in session) {\n\t\t\tif ((<any>session)[key] !== (<any>Session.prototype)[key]) {\n\t\t\t\tCommand.addSessionMethod(this, key, (<any>session)[key]);\n\t\t\t}\n\t\t}\n\n\t\tError.captureStackTrace(trace, Command);\n\n\t\t// parentCommand will be null if parentOrSession was a session\n\t\tlet parentCommand = <Command<P>>parentOrSession;\n\t\tthis._task = (parentCommand\n\t\t\t? parentCommand.promise\n\t\t\t: Task.resolve(undefined)\n\t\t)\n\t\t\t.then(\n\t\t\t\tfunction(returnValue) {\n\t\t\t\t\tself._context = parentCommand\n\t\t\t\t\t\t? parentCommand.context\n\t\t\t\t\t\t: TOP_CONTEXT;\n\t\t\t\t\treturn returnValue;\n\t\t\t\t},\n\t\t\t\tfunction(error) {\n\t\t\t\t\tself._context = parentCommand\n\t\t\t\t\t\t? parentCommand.context\n\t\t\t\t\t\t: TOP_CONTEXT;\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t)\n\t\t\t.then(\n\t\t\t\tinitialiser &&\n\t\t\t\t\tfunction(returnValue) {\n\t\t\t\t\t\treturn Task.resolve(returnValue)\n\t\t\t\t\t\t\t.then(initialiser.bind(self, setContext))\n\t\t\t\t\t\t\t.catch(fixStack);\n\t\t\t\t\t},\n\t\t\t\terrback &&\n\t\t\t\t\tfunction(error) {\n\t\t\t\t\t\treturn Task.reject(error)\n\t\t\t\t\t\t\t.catch(errback.bind(self, setContext))\n\t\t\t\t\t\t\t.catch(fixStack);\n\t\t\t\t\t}\n\t\t\t);\n\t}\n\n\t/**\n\t * The parent Command of the Command, if one exists.\n\t */\n\tget parent() {\n\t\treturn this._parent;\n\t}\n\n\t/**\n\t * The parent Session of the Command.\n\t */\n\tget session() {\n\t\treturn this._session;\n\t}\n\n\t/**\n\t * The filtered elements that will be used if an element-specific method is\n\t * invoked. Note that this property is not valid until the parent Command\n\t * has been settled. The context array also has two additional properties:\n\t *\n\t * * `isSingle` (boolean): If true, the context will always contain a\n\t *   single element. This is used to differentiate between methods that\n\t *   should still return scalar values (`find`) and methods that should\n\t *   return arrays of values even if there is only one element in the\n\t *   context (`findAll`).\n\t * * `depth` (number): The depth of the context within the command chain.\n\t *   This is used to prevent traversal into higher filtering levels by\n\t *   [[Command.Command.end]].\n\t */\n\tget context() {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The underlying Promise for the Command.\n\t *\n\t * @readonly\n\t */\n\tget promise() {\n\t\treturn this._task;\n\t}\n\n\t/**\n\t * Pauses execution of the next command in the chain for `ms` milliseconds.\n\t *\n\t * @param ms Time to delay, in milliseconds.\n\t */\n\tsleep(ms: number): Command<void> {\n\t\treturn new (this.constructor as typeof Command)<void>(this, function() {\n\t\t\treturn sleep(ms);\n\t\t});\n\t}\n\n\t/**\n\t * Ends the most recent filtering operation in the current Command chain\n\t * and returns the set of matched elements to the previous state. This is\n\t * equivalent to the `jQuery#end` method.\n\t *\n\t * ```js\n\t * command\n\t *     .findById('parent') // sets filter to #parent\n\t *     .findByClassName('child') // sets filter to all .child inside #parent\n\t *     .getVisibleText()\n\t *     .then(function (visibleTexts) {\n\t *         // all the visible texts from the children\n\t *     })\n\t *     .end() // resets filter to #parent\n\t *     .end(); // resets filter to nothing (the whole document)\n\t *  ```\n\t *\n\t * @param numCommandsToPop The number of element contexts to pop. Defaults\n\t * to 1.\n\t */\n\tend(numCommandsToPop: number = 1): Command<void> {\n\t\treturn new (this.constructor as typeof Command)<void>(this, function(\n\t\t\tsetContext: Function\n\t\t) {\n\t\t\tlet command: Command<any> | undefined = this;\n\t\t\tlet depth: number | undefined = this.context.depth;\n\n\t\t\twhile (depth && numCommandsToPop && (command = command.parent)) {\n\t\t\t\tif (\n\t\t\t\t\tcommand.context.depth != null &&\n\t\t\t\t\tcommand.context.depth < depth\n\t\t\t\t) {\n\t\t\t\t\t--numCommandsToPop;\n\t\t\t\t\tdepth = command.context.depth;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsetContext(command!.context);\n\t\t});\n\t}\n\n\t/**\n\t * Adds a callback to be invoked once the previously chained operation has\n\t * completed.\n\t *\n\t * This method is compatible with the `Promise#then` API, with two\n\t * important differences:\n\t *\n\t * 1. The context (`this`) of the callback is set to the Command object,\n\t *    rather than being `undefined`. This allows promise helpers to be\n\t *    created that can retrieve the appropriate session and element\n\t *    contexts for execution.\n\t * 2. A second non-standard `setContext` argument is passed to the\n\t *    callback. This `setContext` function can be called at any time before\n\t *    the callback fulfills its return value and expects either a single\n\t *    [[Element]] or an array of Elements to be provided as its only\n\t *    argument. The provided element(s) will be used as the context for\n\t *    subsequent element method invocations (`click`, etc.). If the\n\t *    `setContext` method is not called, the element context from the\n\t *    parent will be passed through unmodified.\n\t */\n\tthen<U = T, R = never>(\n\t\tcallback?:\n\t\t\t| ((\n\t\t\t\t\tthis: Command<T>,\n\t\t\t\t\tvalue: T,\n\t\t\t\t\tsetContext: SetContextMethod\n\t\t\t\t) => U | PromiseLike<U>)\n\t\t\t| null\n\t\t\t| undefined,\n\t\terrback?:\n\t\t\t| ((this: Command<T>, error: any) => R | PromiseLike<R>)\n\t\t\t| null\n\t\t\t| undefined\n\t): Command<U | R> {\n\t\tfunction runCallback(\n\t\t\tcommand: Command<U>,\n\t\t\tcallback:\n\t\t\t\t| ((\n\t\t\t\t\t\tthis: Command<T>,\n\t\t\t\t\t\tvalue: T,\n\t\t\t\t\t\tsetContext: SetContextMethod\n\t\t\t\t\t) => U | PromiseLike<U>)\n\t\t\t\t| ((this: Command<T>, error: any) => R | PromiseLike<R>),\n\t\t\tvalue: U,\n\t\t\tsetContext: SetContextMethod\n\t\t) {\n\t\t\tconst returnValue = callback.call(command, value, setContext);\n\n\t\t\t// If someone returns `this` (or a chain starting from `this`) from\n\t\t\t// the callback, it will cause a deadlock where the child command\n\t\t\t// is waiting for the child command to resolve\n\t\t\tif (returnValue instanceof Command) {\n\t\t\t\t// maybeCommand can be a Session or a Command, both of which\n\t\t\t\t// inherit from Locator\n\t\t\t\tlet maybeCommand:\n\t\t\t\t\t| Command<any>\n\t\t\t\t\t| Session\n\t\t\t\t\t| undefined = returnValue;\n\t\t\t\tdo {\n\t\t\t\t\tif (maybeCommand === command) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Deadlock: do not use `return this` from a Command callback'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} while ((maybeCommand = getParent(maybeCommand)));\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\n\t\treturn new (this.constructor as typeof Command)<U>(\n\t\t\tthis,\n\t\t\tcallback\n\t\t\t\t? function(setContext: SetContextMethod, value: U) {\n\t\t\t\t\t\treturn runCallback(this, callback, value, setContext);\n\t\t\t\t\t}\n\t\t\t\t: undefined,\n\t\t\terrback\n\t\t\t\t? function(setContext: SetContextMethod, value: any) {\n\t\t\t\t\t\treturn runCallback(this, errback, value, setContext);\n\t\t\t\t\t}\n\t\t\t\t: undefined\n\t\t);\n\t}\n\n\t/**\n\t * Adds a callback to be invoked when any of the previously chained\n\t * operations have failed.\n\t */\n\tcatch<R = never>(\n\t\terrback: (this: Command<T>, reason: any) => R | PromiseLike<R>\n\t) {\n\t\treturn this.then(null, errback);\n\t}\n\n\t/**\n\t * Adds a callback to be invoked once the previously chained operations\n\t * have resolved.\n\t */\n\tfinally(callback: () => void) {\n\t\tthis._task = this._task.finally(callback);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Cancels all outstanding chained operations of the Command. Calling this\n\t * method will cause this command and all subsequent chained commands to\n\t * fail with a CancelError.\n\t */\n\tcancel() {\n\t\tthis._task.cancel();\n\t\treturn this;\n\t}\n\n\tfind(strategy: Strategy, value: string) {\n\t\treturn this._callFindElementMethod('find', strategy, value);\n\t}\n\n\tfindAll(strategy: Strategy, value: string) {\n\t\treturn this._callFindElementMethod('findAll', strategy, value);\n\t}\n\n\tfindDisplayed(strategy: Strategy, value: string) {\n\t\treturn this._callFindElementMethod('findDisplayed', strategy, value);\n\t}\n\n\t/**\n\t * a function that, when called, creates a new Command that retrieves\n\t * elements from the parent context and uses them as the context for the\n\t * newly created Command.\n\t */\n\tprivate _callFindElementMethod(\n\t\tmethod: 'find' | 'findDisplayed',\n\t\tstrategy: Strategy,\n\t\tvalue: string\n\t): Command<Element>;\n\tprivate _callFindElementMethod(\n\t\tmethod: 'findAll',\n\t\tstrategy: Strategy,\n\t\tvalue: string\n\t): Command<Element[]>;\n\tprivate _callFindElementMethod(\n\t\tmethod: 'find' | 'findAll' | 'findDisplayed',\n\t\tstrategy: Strategy,\n\t\tvalue: string\n\t): Command<Element | Element[]> {\n\t\treturn new (this.constructor as typeof Command)(this, function(\n\t\t\tsetContext: SetContextMethod\n\t\t) {\n\t\t\tconst parentContext = this._context;\n\t\t\tlet task: Task<Element | Element[]>;\n\n\t\t\tif (parentContext.length && parentContext.isSingle) {\n\t\t\t\ttask = parentContext[0][method](strategy, value);\n\t\t\t} else if (parentContext.length) {\n\t\t\t\ttask = Task.all(\n\t\t\t\t\tparentContext.map(element =>\n\t\t\t\t\t\telement[method](strategy, value)\n\t\t\t\t\t)\n\t\t\t\t\t// findAll against an array context will result in arrays\n\t\t\t\t\t// of arrays; flatten into a single array of elments. It\n\t\t\t\t\t// would also be possible to resort in document order but\n\t\t\t\t\t// other parallel operations could not be sorted so we just\n\t\t\t\t\t// don't do it anywhere and say not to rely on a particular\n\t\t\t\t\t// order for results\n\t\t\t\t).then(elements => Array.prototype.concat.apply([], elements));\n\t\t\t} else {\n\t\t\t\ttask = this.session[method](strategy, value);\n\t\t\t}\n\n\t\t\treturn task.then(newContext => {\n\t\t\t\tsetContext(newContext);\n\t\t\t\treturn newContext;\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _callElementMethod<U>(\n\t\tmethod: keyof Element,\n\t\t...args: any[]\n\t): Command<U> {\n\t\treturn new (this.constructor as typeof Command)<U>(this, function(\n\t\t\tsetContext: SetContextMethod\n\t\t) {\n\t\t\tconst parentContext = this._context;\n\t\t\tlet task: Task<U>;\n\t\t\tlet fn = parentContext[0] && parentContext[0][method];\n\n\t\t\tif (parentContext.isSingle) {\n\t\t\t\ttask = fn.apply(parentContext[0], args);\n\t\t\t} else {\n\t\t\t\ttask = Task.all(\n\t\t\t\t\tparentContext.map(element =>\n\t\t\t\t\t\t(<Function>element[method])(...args)\n\t\t\t\t\t)\n\t\t\t\t).then(values => Array.prototype.concat.apply([], values));\n\t\t\t}\n\n\t\t\tif (fn && fn.createsContext) {\n\t\t\t\ttask = task.then(function(newContext) {\n\t\t\t\t\tsetContext(<any>newContext);\n\t\t\t\t\treturn newContext;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn task;\n\t\t});\n\t}\n\n\tprivate _callSessionMethod<U>(\n\t\tmethod: keyof Session,\n\t\t...args: any[]\n\t): Command<U> {\n\t\treturn new (this.constructor as typeof Command)<U>(this, function(\n\t\t\tsetContext: SetContextMethod\n\t\t) {\n\t\t\tconst parentContext = this._context;\n\t\t\tconst session = this._session;\n\t\t\tlet task: Task<U>;\n\n\t\t\t// The function may have come from a session object prototype but\n\t\t\t// have been overridden on the actual session instance; in such a\n\t\t\t// case, the overridden function should be used instead of the one\n\t\t\t// from the original source object. The original source object may\n\t\t\t// still be used, however, if the function is being added like a\n\t\t\t// mixin and does not exist on the actual session object for this\n\t\t\t// session\n\t\t\tconst sessionMethod = (...args: any[]) => {\n\t\t\t\treturn (<Function>session[method])(...args);\n\t\t\t};\n\n\t\t\tif (\n\t\t\t\t(<any>session[method]).usesElement &&\n\t\t\t\tparentContext.length &&\n\t\t\t\t(!args[0] || !args[0].elementId)\n\t\t\t) {\n\t\t\t\tif (parentContext.isSingle) {\n\t\t\t\t\ttask = sessionMethod(...[parentContext[0], ...args]);\n\t\t\t\t} else {\n\t\t\t\t\ttask = Task.all(\n\t\t\t\t\t\tparentContext.map(element =>\n\t\t\t\t\t\t\tsessionMethod(...[element, ...args])\n\t\t\t\t\t\t)\n\t\t\t\t\t).then(values => Array.prototype.concat.apply([], values));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttask = sessionMethod(...args);\n\t\t\t}\n\n\t\t\tif ((<any>session[method]).createsContext) {\n\t\t\t\ttask = task.then(newContext => {\n\t\t\t\t\tsetContext(<any>newContext);\n\t\t\t\t\treturn newContext;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn task;\n\t\t});\n\t}\n\n\t// Session methods\n\n\t/**\n\t * Gets the current value of a timeout for the session.\n\t *\n\t * @param type The type of timeout to retrieve. One of 'script',\n\t * 'implicit', or 'page load'.\n\t * @returns The timeout, in milliseconds.\n\t */\n\tgetTimeout(type: string) {\n\t\treturn this._callSessionMethod<number>('getTimeout', type);\n\t}\n\n\t/**\n\t * Sets the value of a timeout for the session.\n\t *\n\t * @param type The type of timeout to set. One of 'script', 'implicit', or\n\t * 'page load'.\n\t *\n\t * @param ms The length of time to use for the timeout, in milliseconds. A\n\t * value of 0 will cause operations to time out immediately.\n\t */\n\tsetTimeout(type: string, ms: number) {\n\t\treturn this._callSessionMethod<void>('setTimeout', type, ms);\n\t}\n\n\t/**\n\t * Gets the identifier for the window that is currently focused.\n\t *\n\t * @returns A window handle identifier that can be used with other window\n\t * handling functions.\n\t */\n\tgetCurrentWindowHandle() {\n\t\treturn this._callSessionMethod<string>('getCurrentWindowHandle');\n\t}\n\n\t/**\n\t * Gets a list of identifiers for all currently open windows.\n\t */\n\tgetAllWindowHandles() {\n\t\treturn this._callSessionMethod<string[]>('getAllWindowHandles');\n\t}\n\n\t/**\n\t * Gets the URL that is loaded in the focused window/frame.\n\t */\n\tgetCurrentUrl() {\n\t\treturn this._callSessionMethod<string>('getCurrentUrl');\n\t}\n\n\t/**\n\t * Navigates the focused window/frame to a new URL.\n\t */\n\tget(url: string) {\n\t\treturn this._callSessionMethod<void>('get', url);\n\t}\n\n\t/**\n\t * Navigates the focused window/frame forward one page using the browser’s\n\t * navigation history.\n\t */\n\tgoForward() {\n\t\treturn this._callSessionMethod<void>('goForward');\n\t}\n\n\t/**\n\t * Navigates the focused window/frame back one page using the browser’s\n\t * navigation history.\n\t */\n\tgoBack() {\n\t\treturn this._callSessionMethod<void>('goBack');\n\t}\n\n\t/**\n\t * Reloads the current browser window/frame.\n\t */\n\trefresh() {\n\t\treturn this._callSessionMethod<void>('refresh');\n\t}\n\n\t/**\n\t * Executes JavaScript code within the focused window/frame. The code\n\t * should return a value synchronously.\n\t *\n\t * See [[Command.Command.executeAsync]] to execute code that returns values\n\t * asynchronously.\n\t *\n\t * @param script The code to execute. This function will always be\n\t * converted to a string, sent to the remote environment, and reassembled\n\t * as a new anonymous function on the remote end. This means that you\n\t * cannot access any variables through closure. If your code needs to get\n\t * data from variables on the local end, they should be passed using\n\t * `args`.\n\t *\n\t * @param args An array of arguments that will be passed to the executed\n\t * code. Only values that can be serialised to JSON, plus [[Element]]\n\t * objects, can be specified as arguments.\n\t *\n\t * @returns The value returned by the remote code. Only values that can be\n\t * serialised to JSON, plus DOM elements, can be returned.\n\t */\n\texecute<T = any>(script: Function | string, args?: any[]) {\n\t\treturn this._callSessionMethod<T>('execute', script, args);\n\t}\n\n\t/**\n\t * Executes JavaScript code within the focused window/frame. The code must\n\t * invoke the provided callback in order to signal that it has completed\n\t * execution.\n\t *\n\t * See [[Command.Command.execute]] to execute code that returns values\n\t * synchronously.\n\t *\n\t * See [[Command.Command.setExecuteAsyncTimeout]] to set the time until an\n\t * asynchronous script is considered timed out.\n\t *\n\t * @param script The code to execute. This function will always be\n\t * converted to a string, sent to the remote environment, and reassembled\n\t * as a new anonymous function on the remote end. This means that you\n\t * cannot access any variables through closure. If your code needs to get\n\t * data from variables on the local end, they should be passed using\n\t * `args`.\n\t *\n\t * @param args An array of arguments that will be passed to the executed\n\t * code. Only values that can be serialised to JSON, plus [[Element]]\n\t * objects, can be specified as arguments. In addition to these arguments,\n\t * a callback function will always be passed as the final argument to the\n\t * function specified in `script`. This callback function must be invoked\n\t * in order to signal that execution has completed. The return value of the\n\t * execution, if any, should be passed to this callback function.\n\t *\n\t * @returns The value returned by the remote code. Only values that can be\n\t * serialised to JSON, plus DOM elements, can be returned.\n\t */\n\texecuteAsync<T = any>(script: Function | string, args?: any[]) {\n\t\treturn this._callSessionMethod<T>('executeAsync', script, args);\n\t}\n\n\t/**\n\t * Gets a screenshot of the focused window and returns it in PNG format.\n\t */\n\ttakeScreenshot() {\n\t\treturn this._callSessionMethod<Buffer>('takeScreenshot');\n\t}\n\n\t/**\n\t * Gets a list of input method editor engines available to the remote\n\t * environment. As of April 2014, no known remote environments support IME\n\t * functions.\n\t */\n\tgetAvailableImeEngines() {\n\t\treturn this._callSessionMethod<string[]>('getAvailableImeEngines');\n\t}\n\n\t/**\n\t * Gets the currently active input method editor for the remote environment.\n\t * As of April 2014, no known remote environments support IME functions.\n\t */\n\tgetActiveImeEngine() {\n\t\treturn this._callSessionMethod<string>('getActiveImeEngine');\n\t}\n\n\t/**\n\t * Returns whether or not an input method editor is currently active in the\n\t * remote environment. As of April 2014, no known remote environments\n\t * support IME functions.\n\t */\n\tisImeActivated() {\n\t\treturn this._callSessionMethod<boolean>('isImeActivated');\n\t}\n\n\t/**\n\t * Deactivates any active input method editor in the remote environment.\n\t * As of April 2014, no known remote environments support IME functions.\n\t */\n\tdeactivateIme() {\n\t\treturn this._callSessionMethod<void>('deactivateIme');\n\t}\n\n\t/**\n\t * Activates an input method editor in the remote environment.\n\t * As of April 2014, no known remote environments support IME functions.\n\t *\n\t * @param engine The type of IME to activate.\n\t */\n\tactivateIme(engine: string) {\n\t\treturn this._callSessionMethod<void>('activateIme', engine);\n\t}\n\n\t/**\n\t * Switches the currently focused frame to a new frame.\n\t *\n\t * @param id The frame to switch to. In most environments, a number or\n\t * string value corresponds to a key in the `window.frames` object of the\n\t * currently active frame. If `null`, the topmost (default) frame will be\n\t * used. If an Element is provided, it must correspond to a `<frame>` or\n\t * `<iframe>` element.\n\t */\n\tswitchToFrame(id: string | number | Element) {\n\t\treturn this._callSessionMethod<void>('switchToFrame', id);\n\t}\n\n\t/**\n\t * Switches the currently focused window to a new window.\n\t *\n\t * In environments using the JsonWireProtocol, this value corresponds to\n\t * the `window.name` property of a window.\n\t *\n\t * @param handle The handle of the window to switch to. In mobile\n\t * environments and environments based on the W3C WebDriver standard, this\n\t * should be a handle as returned by\n\t * [[Command.Command.getAllWindowHandles]].\n\t */\n\tswitchToWindow(handle: string) {\n\t\treturn this._callSessionMethod<void>('switchToWindow', handle);\n\t}\n\n\t/**\n\t * Switches the currently focused frame to the parent of the currently\n\t * focused frame.\n\t */\n\tswitchToParentFrame() {\n\t\treturn this._callSessionMethod<void>('switchToParentFrame');\n\t}\n\n\t/**\n\t * Closes the currently focused window. In most environments, after the\n\t * window has been closed, it is necessary to explicitly switch to whatever\n\t * window is now focused.\n\t */\n\tcloseCurrentWindow() {\n\t\treturn this._callSessionMethod<void>('closeCurrentWindow');\n\t}\n\n\t/**\n\t * Sets the dimensions of a window.\n\t *\n\t * @param windowHandle The name of the window to resize. See\n\t * [[Command.Command.switchToWindow]] to learn about valid window names.\n\t * Omit this argument to resize the currently focused window.\n\t *\n\t * @param width The new width of the window, in CSS pixels.\n\t *\n\t * @param height The new height of the window, in CSS pixels.\n\t */\n\tsetWindowSize(width: number, height: number): Command<void>;\n\tsetWindowSize(\n\t\twindowHandle: string,\n\t\twidth: number,\n\t\theight: number\n\t): Command<void>;\n\tsetWindowSize(...args: any[]) {\n\t\treturn this._callSessionMethod<void>('setWindowSize', ...args);\n\t}\n\n\t/**\n\t * Gets the dimensions of a window.\n\t *\n\t * @param windowHandle The name of the window to query. See\n\t * [[Command.Command.switchToWindow]] to learn about valid window names.\n\t * Omit this argument to query the currently focused window.\n\t *\n\t * @returns An object describing the width and height of the window, in CSS\n\t * pixels.\n\t */\n\tgetWindowSize(_windowHandle?: string) {\n\t\treturn this._callSessionMethod<{ width: number; height: number }>(\n\t\t\t'getWindowSize'\n\t\t);\n\t}\n\n\t/**\n\t * Sets the position of a window.\n\t *\n\t * Note that this method is not part of the W3C WebDriver standard.\n\t *\n\t * @param windowHandle The name of the window to move. See\n\t * [[Command.Command.switchToWindow]] to learn about valid window names.\n\t * Omit this argument to move the currently focused window.\n\t *\n\t * @param x The screen x-coordinate to move to, in CSS pixels, relative to\n\t * the left edge of the primary monitor.\n\t *\n\t * @param y The screen y-coordinate to move to, in CSS pixels, relative to\n\t * the top edge of the primary monitor.\n\t */\n\tsetWindowPosition(x: number, y: number): Command<void>;\n\tsetWindowPosition(\n\t\twindowHandle: string,\n\t\tx: number,\n\t\ty: number\n\t): Command<void>;\n\tsetWindowPosition(...args: any[]) {\n\t\treturn this._callSessionMethod<void>('setWindowPosition', ...args);\n\t}\n\n\t/**\n\t * Gets the position of a window.\n\t *\n\t * Note that this method is not part of the W3C WebDriver standard.\n\t *\n\t * @param windowHandle The name of the window to query. See\n\t * [[Command.Command.switchToWindow]] to learn about valid window names.\n\t * Omit this argument to query the currently focused window.\n\t *\n\t * @returns An object describing the position of the window, in CSS pixels,\n\t * relative to the top-left corner of the primary monitor. If a secondary\n\t * monitor exists above or to the left of the primary monitor, these values\n\t * will be negative.\n\t */\n\tgetWindowPosition(windowHandle?: string) {\n\t\treturn this._callSessionMethod<{ x: number; y: number }>(\n\t\t\t'getWindowPosition',\n\t\t\twindowHandle\n\t\t);\n\t}\n\n\t/**\n\t * Maximises a window according to the platform’s window system behaviour.\n\t *\n\t * @param windowHandle The name of the window to resize. See\n\t * [[Command.Command.switchToWindow] to learn about valid window names.\n\t * Omit this argument to resize the currently focused window.\n\t */\n\tmaximizeWindow(windowHandle?: string) {\n\t\treturn this._callSessionMethod<void>('maximizeWindow', windowHandle);\n\t}\n\n\t/**\n\t * Gets all cookies set on the current page.\n\t */\n\tgetCookies() {\n\t\treturn this._callSessionMethod<WebDriverCookie[]>('getCookies');\n\t}\n\n\t/**\n\t * Sets a cookie on the current page.\n\t */\n\tsetCookie(cookie: WebDriverCookie) {\n\t\treturn this._callSessionMethod<void>('setCookie', cookie);\n\t}\n\n\t/**\n\t * Clears all cookies for the current page.\n\t */\n\tclearCookies() {\n\t\treturn this._callSessionMethod<void>('clearCookies');\n\t}\n\n\t/**\n\t * Deletes a cookie on the current page.\n\t *\n\t * @param name The name of the cookie to delete.\n\t */\n\tdeleteCookie(name: string) {\n\t\treturn this._callSessionMethod<void>('deleteCookie', name);\n\t}\n\n\t/**\n\t * Gets the HTML loaded in the focused window/frame. This markup is\n\t * serialised by the remote environment so may not exactly match the HTML\n\t * provided by the Web server.\n\t */\n\tgetPageSource() {\n\t\treturn this._callSessionMethod<string>('getPageSource');\n\t}\n\n\t/**\n\t * Gets the title of the top-level browsing context of the current window\n\t * or tab.\n\t */\n\tgetPageTitle() {\n\t\treturn this._callSessionMethod<string>('getPageTitle');\n\t}\n\n\t/**\n\t * Gets the currently focused element from the focused window/frame.\n\t */\n\tgetActiveElement() {\n\t\treturn this._callSessionMethod<Element>('getActiveElement');\n\t}\n\n\t/**\n\t * Types into the focused window/frame/element.\n\t *\n\t * @param keys The text to type in the remote environment. It is possible\n\t * to type keys that do not have normal character representations (modifier\n\t * keys, function keys, etc.) as well as keys that have two different\n\t * representations on a typical US-ASCII keyboard (numpad keys); use the\n\t * values from [[keys]] to type these special characters. Any modifier keys\n\t * that are activated by this call will persist until they are deactivated.\n\t * To deactivate a modifier key, type the same modifier key a second time,\n\t * or send `\\uE000` ('NULL') to deactivate all currently active modifier\n\t * keys.\n\t */\n\tpressKeys(keys: string | string[]) {\n\t\treturn this._callSessionMethod<void>('pressKeys', keys);\n\t}\n\n\t/**\n\t * Gets the current screen orientation.\n\t */\n\tgetOrientation() {\n\t\treturn this._callSessionMethod<'portrait' | 'landscape'>(\n\t\t\t'getOrientation'\n\t\t);\n\t}\n\n\t/**\n\t * Sets the screen orientation.\n\t *\n\t * @param orientation Either 'portrait' or 'landscape'.\n\t */\n\tsetOrientation(orientation: 'portrait' | 'landscape') {\n\t\treturn this._callSessionMethod<void>('setOrientation', orientation);\n\t}\n\n\t/**\n\t * Gets the text displayed in the currently active alert pop-up.\n\t */\n\tgetAlertText() {\n\t\treturn this._callSessionMethod<string>('getAlertText');\n\t}\n\n\t/**\n\t * Types into the currently active prompt pop-up.\n\t *\n\t * @param text The text to type into the pop-up’s input box.\n\t */\n\ttypeInPrompt(text: string | string[]) {\n\t\treturn this._callSessionMethod<void>('typeInPrompt', text);\n\t}\n\n\t/**\n\t * Accepts an alert, prompt, or confirmation pop-up. Equivalent to clicking\n\t * the 'OK' button.\n\t */\n\tacceptAlert() {\n\t\treturn this._callSessionMethod<void>('acceptAlert');\n\t}\n\n\t/**\n\t * Dismisses an alert, prompt, or confirmation pop-up. Equivalent to\n\t * clicking the 'OK' button of an alert pop-up or the 'Cancel' button of a\n\t * prompt or confirmation pop-up.\n\t */\n\tdismissAlert() {\n\t\treturn this._callSessionMethod<void>('dismissAlert');\n\t}\n\n\t/**\n\t * Moves the remote environment’s mouse cursor to the specified element or\n\t * relative position. If the element is outside of the viewport, the remote\n\t * driver will attempt to scroll it into view automatically.\n\t *\n\t * @param element The element to move the mouse to. If x-offset and\n\t * y-offset are not specified, the mouse will be moved to the centre of the\n\t * element.\n\t *\n\t * @param xOffset The x-offset of the cursor, maybe in CSS pixels, relative\n\t * to the left edge of the specified element’s bounding client rectangle.\n\t * If no element is specified, the offset is relative to the previous\n\t * position of the mouse, or to the left edge of the page’s root element if\n\t * the mouse was never moved before.\n\t *\n\t * @param yOffset The y-offset of the cursor, maybe in CSS pixels, relative\n\t * to the top edge of the specified element’s bounding client rectangle. If\n\t * no element is specified, the offset is relative to the previous position\n\t * of the mouse, or to the top edge of the page’s root element if the mouse\n\t * was never moved before.\n\t */\n\tmoveMouseTo(\n\t\telement?: Element,\n\t\txOffset?: number,\n\t\tyOffset?: number\n\t): Command<void>;\n\tmoveMouseTo(xOffset?: number, yOffset?: number): Command<void>;\n\tmoveMouseTo(...args: any[]) {\n\t\treturn this._callSessionMethod<void>('moveMouseTo', ...args);\n\t}\n\n\t/**\n\t * Clicks a mouse button at the point where the mouse cursor is currently\n\t * positioned. This method may fail to execute with an error if the mouse\n\t * has not been moved anywhere since the page was loaded.\n\t *\n\t * @param button The button to click. 0 corresponds to the primary mouse\n\t * button, 1 to the middle mouse button, 2 to the secondary mouse button.\n\t * Numbers above 2 correspond to any additional buttons a mouse might\n\t * provide.\n\t */\n\tclickMouseButton(button?: number) {\n\t\treturn this._callSessionMethod<void>('clickMouseButton', button);\n\t}\n\n\t/**\n\t * Depresses a mouse button without releasing it.\n\t *\n\t * @param button The button to press. See [[Command.Command.click]] for\n\t * available options.\n\t */\n\tpressMouseButton(button?: number) {\n\t\treturn this._callSessionMethod<void>('pressMouseButton', button);\n\t}\n\n\t/**\n\t * Releases a previously depressed mouse button.\n\t *\n\t * @param button The button to press. See [[Command.Command.click]] for\n\t * available options.\n\t */\n\treleaseMouseButton(button?: number) {\n\t\treturn this._callSessionMethod<void>('releaseMouseButton', button);\n\t}\n\n\t/**\n\t * Double-clicks the primary mouse button.\n\t */\n\tdoubleClick() {\n\t\treturn this._callSessionMethod<void>('doubleClick');\n\t}\n\n\t/**\n\t * Taps an element on a touch screen device. If the element is outside of\n\t * the viewport, the remote driver will attempt to scroll it into view\n\t * automatically.\n\t *\n\t * @param element The element to tap.\n\t */\n\ttap(element: Element) {\n\t\treturn this._callSessionMethod<void>('tap', element);\n\t}\n\n\t/**\n\t * Depresses a new finger at the given point on a touch screen device\n\t * without releasing it.\n\t *\n\t * @param x The screen x-coordinate to press, maybe in device pixels.\n\t * @param y The screen y-coordinate to press, maybe in device pixels.\n\t */\n\tpressFinger(x: number, y: number) {\n\t\treturn this._callSessionMethod<void>('pressFinger', x, y);\n\t}\n\n\t/**\n\t * Releases whatever finger exists at the given point on a touch screen\n\t * device.\n\t *\n\t * @param x The screen x-coordinate where a finger is pressed, maybe in\n\t * device pixels.\n\t * @param y The screen y-coordinate where a finger is pressed, maybe in\n\t * device pixels.\n\t */\n\treleaseFinger(x: number, y: number) {\n\t\treturn this._callSessionMethod<void>('releaseFinger', x, y);\n\t}\n\n\t/**\n\t * Moves the last depressed finger to a new point on the touch screen.\n\t *\n\t * @param x The screen x-coordinate to move to, maybe in device pixels.\n\t * @param y The screen y-coordinate to move to, maybe in device pixels.\n\t */\n\tmoveFinger(x: number, y: number) {\n\t\treturn this._callSessionMethod<void>('moveFinger', x, y);\n\t}\n\n\t/**\n\t * Scrolls the currently focused window on a touch screen device.\n\t *\n\t * @param element An element to scroll to. The window will be scrolled so\n\t * the element is as close to the top-left corner of the window as\n\t * possible.\n\t *\n\t * @param xOffset An optional x-offset, relative to the left edge of the\n\t * element, in CSS pixels. If no element is specified, the offset is\n\t * relative to the previous scroll position of the window.\n\t *\n\t * @param yOffset An optional y-offset, relative to the top edge of the\n\t * element, in CSS pixels. If no element is specified, the offset is\n\t * relative to the previous scroll position of the window.\n\t */\n\ttouchScroll(xOffset: number, yOffset: number): Command<void>;\n\ttouchScroll(\n\t\telement?: Element,\n\t\txOffset?: number,\n\t\tyOffset?: number\n\t): Command<void>;\n\ttouchScroll(...args: any[]) {\n\t\treturn this._callSessionMethod<void>('touchScroll', ...args);\n\t}\n\n\t/**\n\t * Performs a double-tap gesture on an element.\n\t *\n\t * @method\n\t * @param element The element to double-tap.\n\t */\n\tdoubleTap(element?: Element) {\n\t\treturn this._callSessionMethod<void>('doubleTap', element);\n\t}\n\n\t/**\n\t * Performs a long-tap gesture on an element.\n\t *\n\t * @method\n\t * @param element The element to long-tap.\n\t */\n\tlongTap(element?: Element) {\n\t\treturn this._callSessionMethod<void>('longTap', element);\n\t}\n\n\t/**\n\t * Flicks a finger. Note that this method is currently badly specified and\n\t * highly dysfunctional and is only provided for the sake of completeness.\n\t *\n\t * @param element The element where the flick should start.\n\t * @param xOffset The x-offset in pixels to flick by.\n\t * @param yOffset The x-offset in pixels to flick by.\n\t * @param speed The speed of the flick, in pixels per *second*. Most human\n\t * flicks are 100–200ms, so this value will be higher than expected.\n\t */\n\tflickFinger(\n\t\telement: Element,\n\t\txOffset: number,\n\t\tyOffset: number,\n\t\tspeed?: number\n\t): Command<void>;\n\tflickFinger(\n\t\txOffset: number,\n\t\tyOffset: number,\n\t\tspeed?: number\n\t): Command<void>;\n\tflickFinger(...args: any[]) {\n\t\treturn this._callSessionMethod<void>('flickFinger', ...args);\n\t}\n\n\t/**\n\t * Gets the current geographical location of the remote environment.\n\t *\n\t * @returns a [[interfaces.Geolocation]] value with latitude and longitude\n\t * specified using standard WGS84 decimal latitude/longitude. Altitude is\n\t * specified as meters above the WGS84 ellipsoid. Not all environments\n\t * support altitude.\n\t */\n\tgetGeolocation() {\n\t\treturn this._callSessionMethod<Geolocation>('getGeolocation');\n\t}\n\n\t/**\n\t * Sets the geographical location of the remote environment.\n\t *\n\t * @param location Latitude and longitude are specified using standard\n\t * WGS84 decimal latitude/longitude. Altitude is specified as meters above\n\t * the WGS84 ellipsoid. Not all environments support altitude.\n\t */\n\tsetGeolocation(location: Geolocation) {\n\t\treturn this._callSessionMethod<void>('setGeolocation', location);\n\t}\n\n\t/**\n\t * Gets all logs from the remote environment of the given type. The logs in\n\t * the remote environment are cleared once they have been retrieved.\n\t *\n\t * @param type The type of log entries to retrieve. Available log types\n\t * differ between remote environments. Use\n\t * [[Command.Command.getAvailableLogTypes]] to learn what log types are\n\t * currently available. Not all environments support all possible log\n\t * types.\n\t *\n\t * @returns An array of log entry objects. Timestamps in log entries are\n\t * Unix timestamps, in seconds.\n\t */\n\tgetLogsFor(type: string) {\n\t\treturn this._callSessionMethod<LogEntry[]>('getLogsFor', type);\n\t}\n\n\t/**\n\t * Gets the types of logs that are currently available for retrieval from\n\t * the remote environment.\n\t */\n\tgetAvailableLogTypes() {\n\t\treturn this._callSessionMethod<string[]>('getAvailableLogTypes');\n\t}\n\n\t/**\n\t * Gets the current state of the HTML5 application cache for the current\n\t * page.\n\t *\n\t * @returns The cache status. One of 0 (uncached), 1 (cached/idle), 2\n\t * (checking), 3 (downloading), 4 (update ready), 5 (obsolete).\n\t */\n\tgetApplicationCacheStatus() {\n\t\treturn this._callSessionMethod<number>('getApplicationCacheStatus');\n\t}\n\n\t/**\n\t * Terminates the session. No more commands will be accepted by the remote\n\t * after this point.\n\t */\n\tquit() {\n\t\treturn this._callSessionMethod<void>('quit');\n\t}\n\n\t/**\n\t * Waits for all elements findable in the currently active window/frame\n\t * using the given strategy and value to be destroyed.\n\t *\n\t * @param using The element retrieval strategy to use. See\n\t * [[Command.Command.find]] for options.\n\t *\n\t * @param value The strategy-specific value to search for. See\n\t * [[Command.Command.find]] for details.\n\t */\n\twaitForDeleted(using: Strategy, value: string) {\n\t\treturn this._callSessionMethod<void>('waitForDeleted', using, value);\n\t}\n\n\t/**\n\t * Gets the timeout for [[Command.Command.executeAsync]] calls.\n\t */\n\tgetExecuteAsyncTimeout() {\n\t\treturn this._callSessionMethod<number>('getExecuteAsyncTimeout');\n\t}\n\n\t/**\n\t * Sets the timeout for [[Command.Command.executeAsync]] calls.\n\t *\n\t * @param ms The length of the timeout, in milliseconds.\n\t */\n\tsetExecuteAsyncTimeout(ms: number) {\n\t\treturn this._callSessionMethod<void>('setExecuteAsyncTimeout', ms);\n\t}\n\n\t/**\n\t * Gets the timeout for [[Command.Command.find]] calls.\n\t */\n\tgetFindTimeout() {\n\t\treturn this._callSessionMethod<number>('getFindTimeout');\n\t}\n\n\t/**\n\t * Sets the timeout for [[Command.Command.find]] calls.\n\t *\n\t * @param ms The length of the timeout, in milliseconds.\n\t */\n\tsetFindTimeout(ms: number) {\n\t\treturn this._callSessionMethod<void>('setFindTimeout', ms);\n\t}\n\n\t/**\n\t * Gets the timeout for [[Command.Command.get]] calls.\n\t */\n\tgetPageLoadTimeout() {\n\t\treturn this._callSessionMethod<number>('getPageLoadTimeout');\n\t}\n\n\t/**\n\t * Sets the timeout for [[Command.Command.get]] calls.\n\t *\n\t * @param ms The length of the timeout, in milliseconds.\n\t */\n\tsetPageLoadTimeout(ms: number) {\n\t\treturn this._callSessionMethod<void>('setPageLoadTimeout', ms);\n\t}\n\n\t// Element methods\n\n\t/**\n\t * Clicks the element. This method works on both mouse and touch platforms.\n\t */\n\tclick() {\n\t\treturn this._callElementMethod<void>('click');\n\t}\n\n\t/**\n\t * Submits the element, if it is a form, or the form belonging to the\n\t * element, if it is a form element.\n\t */\n\tsubmit() {\n\t\treturn this._callElementMethod<void>('submit');\n\t}\n\n\t/**\n\t * Gets the visible text within the element. `<br>` elements are converted\n\t * to line breaks in the returned text, and whitespace is normalised per\n\t * the usual XML/HTML whitespace normalisation rules.\n\t */\n\tgetVisibleText() {\n\t\treturn this._callElementMethod<string>('getVisibleText');\n\t}\n\n\t/**\n\t * Types into the element. This method works the same as the\n\t * [[Command.Command.pressKeys]] method except that any modifier keys are\n\t * automatically released at the end of the command. This method should be\n\t * used instead of [[Command.Command.pressKeys]] to type filenames into\n\t * file upload fields.\n\t *\n\t * Since 1.5, if the WebDriver server supports remote file uploads, and you\n\t * type a path to a file on your local computer, that file will be\n\t * transparently uploaded to the remote server and the remote filename will\n\t * be typed instead. If you do not want to upload local files, use\n\t * [[Command.Command.pressKeys]] instead.\n\t *\n\t * @param value The text to type in the remote environment. See\n\t * [[Command.Command.pressKeys]] for more information.\n\t */\n\ttype(value: string | string[]) {\n\t\treturn this._callElementMethod<void>('type', value);\n\t}\n\n\t/**\n\t * Gets the tag name of the element. For HTML documents, the value is\n\t * always lowercase.\n\t */\n\tgetTagName() {\n\t\treturn this._callElementMethod<string>('getTagName');\n\t}\n\n\t/**\n\t * Clears the value of a form element.\n\t */\n\tclearValue() {\n\t\treturn this._callElementMethod<void>('clearValue');\n\t}\n\n\t/**\n\t * Returns whether or not a form element is currently selected (for\n\t * drop-down options and radio buttons), or whether or not the element is\n\t * currently checked (for checkboxes).\n\t */\n\tisSelected() {\n\t\treturn this._callElementMethod<boolean>('isSelected');\n\t}\n\n\t/**\n\t * Returns whether or not a form element can be interacted with.\n\t */\n\tisEnabled() {\n\t\treturn this._callElementMethod<boolean>('isEnabled');\n\t}\n\n\t/**\n\t * Gets a property or attribute of the element according to the WebDriver\n\t * specification algorithm. Use of this method is not recommended; instead,\n\t * use [[Command.Command.getAttribute]] to retrieve DOM attributes and\n\t * [[Command.Command.getProperty]] to retrieve DOM properties.\n\t *\n\t * This method uses the following algorithm on the server to determine what\n\t * value to return:\n\t *\n\t * 1. If `name` is 'style', returns the `style.cssText` property of the\n\t *    element.\n\t * 2. If the attribute exists and is a boolean attribute, returns 'true' if\n\t *    the attribute is true, or null otherwise.\n\t * 3. If the element is an `<option>` element and `name` is 'value',\n\t *    returns the `value` attribute if it exists, otherwise returns the\n\t *    visible text content of the option.\n\t * 4. If the element is a checkbox or radio button and `name` is\n\t *    'selected', returns 'true' if the element is checked, or null\n\t *    otherwise.\n\t * 5. If the returned value is expected to be a URL (e.g. element is `<a>`\n\t *    and attribute is `href`), returns the fully resolved URL from the\n\t *    `href`/`src` property of the element, not the attribute.\n\t * 6. If `name` is 'class', returns the `className` property of the\n\t *    element.\n\t * 7. If `name` is 'readonly', returns 'true' if the `readOnly` property is\n\t *    true, or null otherwise.\n\t * 8. If `name` corresponds to a property of the element, and the property\n\t *    is not an Object, return the property value coerced to a string.\n\t * 9. If `name` corresponds to an attribute of the element, return the\n\t *    attribute value.\n\t *\n\t * @param name The property or attribute name.\n\t * @returns The value of the attribute as a string, or `null` if no such\n\t * property or attribute exists.\n\t */\n\tgetSpecAttribute(name: string) {\n\t\treturn this._callElementMethod<string>('getSpecAttribute', name);\n\t}\n\n\t/**\n\t * Gets an attribute of the element.\n\t *\n\t * See [[Element.Element.getProperty]] to retrieve an element property.\n\t *\n\t * @param name The name of the attribute.\n\t * @returns The value of the attribute, or `null` if no such attribute\n\t * exists.\n\t */\n\tgetAttribute<T = any>(name: string) {\n\t\treturn this._callElementMethod<T>('getAttribute', name);\n\t}\n\n\t/**\n\t * Gets a property of the element.\n\t *\n\t * See [[Element.Element.getAttribute]] to retrieve an element attribute.\n\t *\n\t * @param name The name of the property.\n\t * @returns The value of the property.\n\t */\n\tgetProperty<T = any>(name: string) {\n\t\treturn this._callElementMethod<T>('getProperty', name);\n\t}\n\n\t/**\n\t * Determines if this element is equal to another element.\n\t */\n\tequals(other: Element) {\n\t\treturn this._callElementMethod<boolean>('equals', other);\n\t}\n\n\t/**\n\t * Returns whether or not the element would be visible to an actual user.\n\t * This means that the following types of elements are considered to be not\n\t * displayed:\n\t *\n\t * 1. Elements with `display: none`\n\t * 2. Elements with `visibility: hidden`\n\t * 3. Elements positioned outside of the viewport that cannot be scrolled\n\t *    into view\n\t * 4. Elements with `opacity: 0`\n\t * 5. Elements with no `offsetWidth` or `offsetHeight`\n\t */\n\tisDisplayed() {\n\t\treturn this._callElementMethod<boolean>('isDisplayed');\n\t}\n\n\t/**\n\t * Gets the position of the element relative to the top-left corner of the\n\t * document, taking into account scrolling and CSS transformations (if they\n\t * are supported).\n\t */\n\tgetPosition() {\n\t\treturn this._callElementMethod<{ x: number; y: number }>('getPosition');\n\t}\n\n\t/**\n\t * Gets the size of the element, taking into account CSS transformations\n\t * (if they are supported).\n\t */\n\tgetSize() {\n\t\treturn this._callElementMethod<{ width: number; height: number }>(\n\t\t\t'getSize'\n\t\t);\n\t}\n\n\t/**\n\t * Gets a CSS computed property value for the element.\n\t *\n\t * @param propertyName The CSS property to retrieve. This argument must be\n\t * hyphenated, *not* camel-case.\n\t */\n\tgetComputedStyle(propertyName: string) {\n\t\treturn this._callElementMethod<string>(\n\t\t\t'getComputedStyle',\n\t\t\tpropertyName\n\t\t);\n\t}\n}\n\n/**\n * The method passed to Command `then` callbacks that can be used to manually\n * set the Command chain context\n */\nexport interface SetContextMethod {\n\t(context: Element | Element[]): void;\n}\n\n/**\n * The current Context of a Command\n */\nexport interface Context extends Array<any> {\n\tisSingle?: boolean;\n\tdepth?: number;\n}\n\nconst TOP_CONTEXT: Context = [];\nTOP_CONTEXT.isSingle = true;\nTOP_CONTEXT.depth = 0;\n\nlet chaiAsPromised: any = null;\ntry {\n\tchaiAsPromised = require('chai-as-promised');\n} catch (error) {}\n\n// TODO: Add unit test\nif (chaiAsPromised) {\n\t(<any>chaiAsPromised).transferPromiseness = function(\n\t\tassertion: any,\n\t\tpromise: any\n\t) {\n\t\tassertion.then = promise.then.bind(promise);\n\t\tfor (let method in promise) {\n\t\t\tif (typeof promise[method] === 'function') {\n\t\t\t\tassertion[method] = promise[method].bind(promise);\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Return the 'parent' of a value, which is assumed to be a Command or Session\nfunction getParent(value: any): Command<any> | Session | undefined {\n\treturn value && value.parent;\n}\n"]}