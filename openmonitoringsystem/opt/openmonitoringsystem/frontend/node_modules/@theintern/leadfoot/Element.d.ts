import Locator, { Strategy } from './lib/Locator';
import Task from '@dojo/core/async/Task';
import Session from './Session';
export default class Element extends Locator<Task<Element>, Task<Element[]>, Task<void>> {
    private _elementId;
    private _session;
    constructor(elementId: any, session: Session);
    readonly elementId: string;
    readonly session: Session;
    private _get<T>(path, requestData?, pathParts?);
    private _post<T>(path, requestData?, pathParts?);
    toJSON(): {
        ELEMENT: string;
    };
    private _normalizeWhitespace(text);
    private _uploadFile(filename);
    find(using: Strategy, value: string): Task<Element>;
    findAll(using: Strategy, value: string): Task<Element[]>;
    click(): Task<void>;
    submit(): Task<void>;
    getVisibleText(): Task<string>;
    type(value: string | string[]): Task<void>;
    getTagName(): Task<string>;
    clearValue(): Task<void>;
    isSelected(): Task<boolean>;
    isEnabled(): Task<boolean>;
    getSpecAttribute(name: string): Task<string | null>;
    getAttribute(name: string): Task<string | null>;
    getProperty<T = any>(name: string): Task<T>;
    equals(other: Element): Task<boolean>;
    isDisplayed(): Task<boolean>;
    getPosition(): Task<{
        x: number;
        y: number;
    }>;
    getSize(): Task<{
        width: number;
        height: number;
    }>;
    getComputedStyle(propertyName: string): Task<string>;
    findDisplayed(using: Strategy, value: string): Task<Element>;
    waitForDeleted(strategy: Strategy, value: string): Task<void>;
}
export declare type ElementOrElementId = {
    ELEMENT: string;
} | Element | string;
