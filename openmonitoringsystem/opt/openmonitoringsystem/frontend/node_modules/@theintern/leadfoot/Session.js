"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Element_1 = require("./Element");
var findDisplayed_1 = require("./lib/findDisplayed");
var lang_1 = require("@dojo/core/lang");
var Task_1 = require("@dojo/core/async/Task");
var statusCodes_1 = require("./lib/statusCodes");
var Locator_1 = require("./lib/Locator");
var util_1 = require("./lib/util");
var waitForDeleted_1 = require("./lib/waitForDeleted");
var Session = (function (_super) {
    tslib_1.__extends(Session, _super);
    function Session(sessionId, server, capabilities) {
        var _this = _super.call(this) || this;
        _this._closedWindows = null;
        _this._timeouts = {};
        _this._movedToElement = false;
        _this._lastMousePosition = null;
        _this._lastAltitude = null;
        _this._sessionId = sessionId;
        _this._server = server;
        _this._capabilities = capabilities;
        _this._closedWindows = {};
        _this._timeouts = {
            script: Task_1.default.resolve(0),
            implicit: Task_1.default.resolve(0),
            'page load': Task_1.default.resolve(Infinity)
        };
        return _this;
    }
    Object.defineProperty(Session.prototype, "capabilities", {
        get: function () {
            return this._capabilities;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Session.prototype, "sessionId", {
        get: function () {
            return this._sessionId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Session.prototype, "server", {
        get: function () {
            return this._server;
        },
        enumerable: true,
        configurable: true
    });
    Session.prototype._delegateToServer = function (method, path, requestData, pathParts) {
        var _this = this;
        path = 'session/' + this._sessionId + (path ? '/' + path : '');
        if (method === 'post' &&
            !requestData &&
            this.capabilities.brokenEmptyPost) {
            requestData = {};
        }
        var cancelled = false;
        return new Task_1.default(function (resolve) {
            var thisRequest;
            var clearNextRequest = function () {
                if (_this._nextRequest === thisRequest) {
                    _this._nextRequest = undefined;
                }
            };
            var runRequest = function () {
                if (cancelled) {
                    clearNextRequest();
                    return;
                }
                var response = _this._server[method](path, requestData, pathParts)
                    .then(function (response) { return response.value; });
                var safePromise = response.catch(function (_error) { });
                safePromise.then(clearNextRequest);
                resolve(response);
                return safePromise;
            };
            if (_this._nextRequest) {
                thisRequest = _this._nextRequest = _this._nextRequest.finally(runRequest);
            }
            else {
                thisRequest = _this._nextRequest = runRequest();
            }
        }, function () { return (cancelled = true); });
    };
    Session.prototype.serverGet = function (path, requestData, pathParts) {
        return this._delegateToServer('get', path, requestData, pathParts);
    };
    Session.prototype.serverPost = function (path, requestData, pathParts) {
        return this._delegateToServer('post', path, requestData, pathParts);
    };
    Session.prototype.serverDelete = function (path, requestData, pathParts) {
        return this._delegateToServer('delete', path, requestData, pathParts);
    };
    Session.prototype.getTimeout = function (type) {
        return this._timeouts[type];
    };
    Session.prototype.setTimeout = function (type, ms) {
        var _this = this;
        if (ms === Infinity) {
            ms = Math.pow(2, 23) - 1;
        }
        if (this.capabilities.brokenZeroTimeout && ms === 0) {
            ms = 1;
        }
        var data = this.capabilities.usesWebDriverTimeouts
            ? (_a = {}, _a[type] = ms, _a) : { type: type, ms: ms };
        var promise = this.serverPost('timeouts', data).catch(function (error) {
            if (error.name === 'UnknownCommand') {
                if (type === 'script') {
                    return _this.serverPost('timeouts/async_script', {
                        ms: ms
                    });
                }
                else if (type === 'implicit') {
                    return _this.serverPost('timeouts/implicit_wait', {
                        ms: ms
                    });
                }
            }
            throw error;
        });
        this._timeouts[type] = promise.then(function () { return ms; }).catch(function () { return 0; });
        return promise;
        var _a;
    };
    Session.prototype.getCurrentWindowHandle = function () {
        var _this = this;
        return this.serverGet('window_handle').then(function (handle) {
            if (_this.capabilities.brokenDeleteWindow &&
                _this._closedWindows[handle]) {
                var error = new Error();
                error.status = '23';
                error.name = statusCodes_1.default[error.status][0];
                error.message = statusCodes_1.default[error.status][1];
                throw error;
            }
            return handle;
        });
    };
    Session.prototype.getAllWindowHandles = function () {
        var _this = this;
        return this.serverGet('window_handles').then(function (handles) {
            if (_this.capabilities.brokenDeleteWindow) {
                return handles.filter(function (handle) {
                    return !_this._closedWindows[handle];
                });
            }
            return handles;
        });
    };
    Session.prototype.getCurrentUrl = function () {
        return this.serverGet('url');
    };
    Session.prototype.get = function (url) {
        this._movedToElement = false;
        if (this.capabilities.brokenMouseEvents) {
            this._lastMousePosition = { x: 0, y: 0 };
        }
        return this.serverPost('url', { url: url });
    };
    Session.prototype.goForward = function () {
        return this.serverPost('forward');
    };
    Session.prototype.goBack = function () {
        return this.serverPost('back');
    };
    Session.prototype.refresh = function () {
        if (this.capabilities.brokenRefresh) {
            return this.execute('location.reload();');
        }
        return this.serverPost('refresh');
    };
    Session.prototype.execute = function (script, args) {
        var _this = this;
        if (typeof args !== 'undefined' && !Array.isArray(args)) {
            throw new Error('Arguments passed to execute must be an array');
        }
        var result = this.serverPost('execute', {
            script: util_1.toExecuteString(script),
            args: args || []
        }).then(function (value) { return convertToElements(_this, value); }, fixExecuteError);
        if (this.capabilities.brokenExecuteUndefinedReturn) {
            result = result.then(function (value) { return (value == null ? null : value); });
        }
        return result;
    };
    Session.prototype.executeAsync = function (script, args) {
        if (typeof args !== 'undefined' && !Array.isArray(args)) {
            throw new Error('Arguments passed to executeAsync must be an array');
        }
        return this.serverPost('execute_async', {
            script: util_1.toExecuteString(script),
            args: args || []
        }).then(lang_1.partial(convertToElements, this), fixExecuteError);
    };
    Session.prototype.takeScreenshot = function () {
        return this.serverGet('screenshot').then(function (data) { return new Buffer(data, 'base64'); });
    };
    Session.prototype.getAvailableImeEngines = function () {
        return this.serverGet('ime/available_engines');
    };
    Session.prototype.getActiveImeEngine = function () {
        return this.serverGet('ime/active_engine');
    };
    Session.prototype.isImeActivated = function () {
        return this.serverGet('ime/activated');
    };
    Session.prototype.deactivateIme = function () {
        return this.serverPost('ime/deactivate');
    };
    Session.prototype.activateIme = function (engine) {
        return this.serverPost('ime/activate', { engine: engine });
    };
    Session.prototype.switchToFrame = function (id) {
        var _this = this;
        if (this.capabilities.usesWebDriverFrameId && typeof id === 'string') {
            return this.findById(id).then(function (element) {
                return _this.serverPost('frame', { id: element });
            });
        }
        return this.serverPost('frame', { id: id });
    };
    Session.prototype.switchToWindow = function (handle) {
        var data = { name: handle };
        if (this.capabilities.usesHandleParameter) {
            data = { handle: handle };
        }
        return this.serverPost('window', data);
    };
    Session.prototype.switchToParentFrame = function () {
        var _this = this;
        return this.serverPost('frame/parent').catch(function (error) {
            if (error.name === 'UnknownCommand' ||
                (_this.capabilities.browserName === 'selendroid' &&
                    error.message.indexOf('Error occured while communicating with selendroid server') > -1)) {
                if (_this.capabilities.scriptedParentFrameCrashesBrowser) {
                    throw error;
                }
                return _this.execute('return window.parent.frameElement;').then(function (parent) {
                    return _this.switchToFrame(parent || null);
                });
            }
            throw error;
        });
    };
    Session.prototype.closeCurrentWindow = function () {
        var _this = this;
        var self = this;
        function manualClose() {
            return self.getCurrentWindowHandle().then(function (handle) {
                return self.execute('window.close();').then(function () {
                    self._closedWindows[handle] = true;
                });
            });
        }
        if (this.capabilities.brokenDeleteWindow) {
            return manualClose();
        }
        return this.serverDelete('window').catch(function (error) {
            if (error.name === 'UnknownCommand') {
                _this.capabilities.brokenDeleteWindow = true;
                return manualClose();
            }
            throw error;
        });
    };
    Session.prototype.setWindowSize = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var windowHandle = args[0], width = args[1], height = args[2];
        if (typeof height === 'undefined') {
            height = width;
            width = windowHandle;
            windowHandle = null;
        }
        var data = { width: width, height: height };
        if (this.capabilities.usesWebDriverWindowCommands) {
            var setWindowSize_1 = function () {
                return _this.getWindowPosition().then(function (position) {
                    return _this.setWindowRect({
                        x: position.x,
                        y: position.y,
                        width: data.width,
                        height: data.height
                    });
                });
            };
            if (windowHandle == null) {
                return setWindowSize_1();
            }
            else {
                var error_1;
                return this.getCurrentWindowHandle().then(function (originalHandle) {
                    return _this.switchToWindow(windowHandle)
                        .then(function () { return setWindowSize_1(); })
                        .catch(function (_error) {
                        error_1 = _error;
                    })
                        .then(function () { return _this.switchToWindow(originalHandle); })
                        .then(function () {
                        if (error_1) {
                            throw error_1;
                        }
                    });
                });
            }
        }
        else {
            if (windowHandle == null) {
                windowHandle = 'current';
            }
            return this.serverPost('window/$0/size', { width: width, height: height }, [
                windowHandle
            ]);
        }
    };
    Session.prototype.getWindowSize = function (windowHandle) {
        var _this = this;
        if (this.capabilities.usesWebDriverWindowCommands) {
            var getWindowSize_1 = function () {
                return _this.getWindowRect().then(function (rect) { return ({
                    width: rect.width,
                    height: rect.height
                }); });
            };
            if (windowHandle == null) {
                return getWindowSize_1();
            }
            else {
                var error_2;
                var size_1;
                return this.getCurrentWindowHandle().then(function (originalHandle) {
                    return _this.switchToWindow(windowHandle)
                        .then(function () { return getWindowSize_1(); })
                        .then(function (_size) {
                        size_1 = _size;
                    }, function (_error) {
                        error_2 = _error;
                    })
                        .then(function () { return _this.switchToWindow(originalHandle); })
                        .then(function () {
                        if (error_2) {
                            throw error_2;
                        }
                        return size_1;
                    });
                });
            }
        }
        else {
            if (windowHandle == null) {
                windowHandle = 'current';
            }
            return this.serverGet('window/$0/size', null, [windowHandle]);
        }
    };
    Session.prototype.getWindowRect = function () {
        return this.serverGet('window/rect');
    };
    Session.prototype.setWindowRect = function (rect) {
        return this.serverPost('window/rect', rect);
    };
    Session.prototype.setWindowPosition = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var windowHandle = args[0], x = args[1], y = args[2];
        if (typeof y === 'undefined') {
            y = x;
            x = windowHandle;
            windowHandle = null;
        }
        if (this.capabilities.usesWebDriverWindowCommands) {
            return this.getWindowSize().then(function (size) {
                var data = { x: x, y: y, width: size.width, height: size.height };
                console.log('setting window rect to', data);
                if (windowHandle == null) {
                    return _this.setWindowRect(data);
                }
                else {
                    var error_3;
                    return _this.getCurrentWindowHandle().then(function (originalHandle) {
                        if (originalHandle === windowHandle) {
                            _this.setWindowRect(data);
                        }
                        else {
                            return _this.switchToWindow(windowHandle)
                                .then(function () { return _this.setWindowRect(data); })
                                .catch(function (_error) {
                                error_3 = _error;
                            })
                                .then(function () {
                                return _this.switchToWindow(originalHandle);
                            })
                                .then(function () {
                                if (error_3) {
                                    throw error_3;
                                }
                            });
                        }
                    });
                }
            });
        }
        else {
            if (windowHandle == null) {
                windowHandle = 'current';
            }
            return this.serverPost('window/$0/position', { x: x, y: y }, [
                windowHandle
            ]);
        }
    };
    Session.prototype.getWindowPosition = function (windowHandle) {
        var _this = this;
        if (this.capabilities.usesWebDriverWindowCommands) {
            var getWindowPosition_1 = function () {
                return _this.getWindowRect().then(function (_a) {
                    var x = _a.x, y = _a.y;
                    return { x: x, y: y };
                });
            };
            if (windowHandle == null) {
                return getWindowPosition_1();
            }
            else {
                var error_4;
                var position_1;
                return this.getCurrentWindowHandle().then(function (originalHandle) {
                    return _this.switchToWindow(windowHandle)
                        .then(function () { return getWindowPosition_1(); })
                        .then(function (_position) {
                        position_1 = _position;
                    }, function (_error) {
                        error_4 = _error;
                    })
                        .then(function () { return _this.switchToWindow(originalHandle); })
                        .then(function () {
                        if (error_4) {
                            throw error_4;
                        }
                        return position_1;
                    });
                });
            }
        }
        else {
            if (typeof windowHandle === 'undefined') {
                windowHandle = 'current';
            }
            return this.serverGet('window/$0/position', null, [windowHandle]).then(function (position) {
                return {
                    x: position.x,
                    y: position.y
                };
            });
        }
    };
    Session.prototype.maximizeWindow = function (windowHandle) {
        var _this = this;
        if (this.capabilities.usesWebDriverWindowCommands) {
            var maximizeWindow_1 = function () {
                return _this.serverPost('window/maximize');
            };
            if (windowHandle == null) {
                return maximizeWindow_1();
            }
            else {
                var error_5;
                return this.getCurrentWindowHandle().then(function (originalHandle) {
                    return _this.switchToWindow(windowHandle)
                        .then(function () { return maximizeWindow_1(); })
                        .catch(function (_error) {
                        error_5 = _error;
                    })
                        .then(function () { return _this.switchToWindow(originalHandle); })
                        .then(function () {
                        if (error_5) {
                            throw error_5;
                        }
                    });
                });
            }
        }
        else {
            if (typeof windowHandle === 'undefined') {
                windowHandle = 'current';
            }
            return this.serverPost('window/$0/maximize', null, [
                windowHandle
            ]);
        }
    };
    Session.prototype.getCookies = function () {
        return this.serverGet('cookie').then(function (cookies) {
            return cookies.map(function (badCookie) {
                var cookie = {};
                for (var key in badCookie) {
                    if (key === 'name' ||
                        key === 'value' ||
                        key === 'path' ||
                        key === 'domain' ||
                        key === 'secure' ||
                        key === 'httpOnly' ||
                        key === 'expiry') {
                        cookie[key] = badCookie[key];
                    }
                }
                if (typeof cookie.expiry === 'number') {
                    cookie.expiry = new Date(cookie.expiry * 1000);
                }
                return cookie;
            });
        });
    };
    Session.prototype.setCookie = function (cookie) {
        if (typeof cookie.expiry === 'string') {
            cookie.expiry = new Date(cookie.expiry);
        }
        if (cookie.expiry instanceof Date) {
            cookie.expiry = cookie.expiry.valueOf() / 1000;
        }
        var self = this;
        return this.serverPost('cookie', {
            cookie: cookie
        }).catch(function (error) {
            if (error.name === 'UnknownCommand') {
                if (/[^A-Za-z0-9!#$%&'*+.^_`|~-]/.test(cookie.name)) {
                    error = new Error();
                    error.status = '25';
                    error.name = statusCodes_1.default[error.status][0];
                    error.message = 'Invalid cookie name';
                    throw error;
                }
                if (/[^\u0021\u0023-\u002b\u002d-\u003a\u003c-\u005b\u005d-\u007e]/.test(cookie.value)) {
                    error = new Error();
                    error.status = '25';
                    error.name = statusCodes_1.default[error.status][0];
                    error.message = 'Invalid cookie value';
                    throw error;
                }
                var cookieToSet = [cookie.name + '=' + cookie.value];
                pushCookieProperties(cookieToSet, cookie);
                return self.execute(function (cookie) {
                    document.cookie = cookie;
                }, [cookieToSet.join(';')]);
            }
            throw error;
        });
    };
    Session.prototype.clearCookies = function () {
        var _this = this;
        if (this.capabilities.brokenDeleteCookie) {
            return this.getCookies().then(function (cookies) {
                return cookies.reduce(function (promise, cookie) {
                    var expiredCookie = [
                        cookie.name + "=",
                        'expires=Thu, 01 Jan 1970 00:00:00 GMT'
                    ];
                    pushCookieProperties(expiredCookie, cookie);
                    return promise.then(function () {
                        return _this.execute(function (expiredCookie) {
                            document.cookie = expiredCookie + "; domain=" + encodeURIComponent(document.domain) + "; path=/";
                        }, [expiredCookie.join(';')]);
                    });
                }, Task_1.default.resolve());
            });
        }
        return this.serverDelete('cookie');
    };
    Session.prototype.deleteCookie = function (name) {
        var _this = this;
        if (this.capabilities.brokenDeleteCookie) {
            return this.getCookies().then(function (cookies) {
                var cookie;
                if (cookies.some(function (value) {
                    if (value.name === name) {
                        cookie = value;
                        return true;
                    }
                    return false;
                })) {
                    var expiredCookie = [
                        cookie.name + "=",
                        'expires=Thu, 01 Jan 1970 00:00:00 GMT'
                    ];
                    pushCookieProperties(expiredCookie, cookie);
                    return _this.execute(function (expiredCookie) {
                        document.cookie = expiredCookie + "; domain=" + encodeURIComponent(document.domain) + "; path=/";
                    }, [expiredCookie.join(';')]);
                }
            });
        }
        return this.serverDelete('cookie/$0', null, [name]);
    };
    Session.prototype.getPageSource = function () {
        if (this.capabilities.brokenPageSource) {
            return this.execute(function () {
                return document.documentElement.outerHTML;
            });
        }
        else {
            return this.serverGet('source');
        }
    };
    Session.prototype.getPageTitle = function () {
        return this.serverGet('title');
    };
    Session.prototype.find = function (using, value) {
        var _this = this;
        if (this.capabilities.usesWebDriverLocators) {
            var locator = Locator_1.toW3cLocator(using, value);
            using = locator.using;
            value = locator.value;
        }
        if (this.capabilities.usesWebDriverLocators) {
            var locator = Locator_1.toW3cLocator(using, value);
            using = locator.using;
            value = locator.value;
        }
        if (using.indexOf('link text') !== -1 &&
            (this.capabilities.brokenWhitespaceNormalization ||
                this.capabilities.brokenLinkTextLocator)) {
            return this.execute(this._manualFindByLinkText, [using, value]).then(function (element) {
                if (!element) {
                    var error = new Error();
                    error.name = 'NoSuchElement';
                    throw error;
                }
                return new Element_1.default(element, _this);
            });
        }
        return this.serverPost('element', {
            using: using,
            value: value
        }).then(function (element) {
            return new Element_1.default(element, _this);
        });
    };
    Session.prototype.findAll = function (using, value) {
        var _this = this;
        if (this.capabilities.usesWebDriverLocators) {
            var locator = Locator_1.toW3cLocator(using, value);
            using = locator.using;
            value = locator.value;
        }
        if (this.capabilities.usesWebDriverLocators) {
            var locator = Locator_1.toW3cLocator(using, value);
            using = locator.using;
            value = locator.value;
        }
        if (using.indexOf('link text') !== -1 &&
            (this.capabilities.brokenWhitespaceNormalization ||
                this.capabilities.brokenLinkTextLocator)) {
            return this.execute(this._manualFindByLinkText, [using, value, true]).then(function (elements) {
                return elements.map(function (element) {
                    return new Element_1.default(element, _this);
                });
            });
        }
        return this.serverPost('elements', {
            using: using,
            value: value
        }).then(function (elements) {
            return elements.map(function (element) {
                return new Element_1.default(element, _this);
            });
        });
    };
    Session.prototype.getActiveElement = function () {
        var _this = this;
        var getDocumentActiveElement = function () {
            return _this.execute('return document.activeElement;');
        };
        if (this.capabilities.brokenActiveElement) {
            return getDocumentActiveElement();
        }
        else {
            var task = void 0;
            if (this.capabilities.usesWebDriverActiveElement) {
                task = this.serverGet('element/active');
            }
            else {
                task = this.serverPost('element/active');
            }
            return task.then(function (element) {
                if (element) {
                    return new Element_1.default(element, _this);
                }
                else {
                    return getDocumentActiveElement();
                }
            });
        }
    };
    Session.prototype.pressKeys = function (keys) {
        if (!Array.isArray(keys)) {
            keys = [keys];
        }
        if (this.capabilities.brokenSendKeys ||
            !this.capabilities.supportsKeysCommand) {
            return this.execute(simulateKeys, [keys]);
        }
        return this.serverPost('keys', {
            value: keys
        });
    };
    Session.prototype.getOrientation = function () {
        return this.serverGet('orientation').then(function (orientation) {
            return orientation.toLowerCase();
        });
    };
    Session.prototype.setOrientation = function (orientation) {
        orientation = orientation.toUpperCase();
        return this.serverPost('orientation', {
            orientation: orientation
        });
    };
    Session.prototype.getAlertText = function () {
        return this.serverGet('alert_text');
    };
    Session.prototype.typeInPrompt = function (text) {
        if (Array.isArray(text)) {
            text = text.join('');
        }
        return this.serverPost('alert_text', {
            text: text
        });
    };
    Session.prototype.acceptAlert = function () {
        return this.serverPost('accept_alert');
    };
    Session.prototype.dismissAlert = function () {
        return this.serverPost('dismiss_alert');
    };
    Session.prototype.moveMouseTo = function () {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var element = args[0], xOffset = args[1], yOffset = args[2];
        if (typeof yOffset === 'undefined' && typeof xOffset !== 'undefined') {
            yOffset = xOffset;
            xOffset = element;
            element = null;
        }
        if (this.capabilities.brokenMouseEvents) {
            return this.execute(simulateMouse, [
                {
                    action: 'mousemove',
                    position: this._lastMousePosition,
                    element: element,
                    xOffset: xOffset,
                    yOffset: yOffset
                }
            ]).then(function (newPosition) {
                _this._lastMousePosition = newPosition;
            });
        }
        if (element) {
            element = element.elementId;
        }
        else if (!this._movedToElement) {
            if (this.capabilities.brokenHtmlMouseMove) {
                return this.execute('return document.body;').then(function (element) {
                    return element
                        .getPosition()
                        .then(function (position) {
                        return _this.moveMouseTo(element, xOffset - position.x, yOffset - position.y);
                    });
                });
            }
            else {
                return this.execute('return document.documentElement;').then(function (element) {
                    return _this.moveMouseTo(element, xOffset, yOffset);
                });
            }
        }
        return this.serverPost('moveto', {
            element: element,
            xoffset: xOffset,
            yoffset: yOffset
        }).then(function () {
            _this._movedToElement = true;
        });
    };
    Session.prototype.clickMouseButton = function (button) {
        var _this = this;
        if (this.capabilities.brokenMouseEvents) {
            return this.execute(simulateMouse, [
                {
                    action: 'click',
                    button: button,
                    position: this._lastMousePosition
                }
            ]);
        }
        return this.serverPost('click', {
            button: button
        }).then(function () {
            if (_this.capabilities.touchEnabled) {
                return util_1.sleep(300);
            }
        });
    };
    Session.prototype.pressMouseButton = function (button) {
        if (this.capabilities.brokenMouseEvents) {
            return this.execute(simulateMouse, [
                {
                    action: 'mousedown',
                    button: button,
                    position: this._lastMousePosition
                }
            ]);
        }
        return this.serverPost('buttondown', {
            button: button
        });
    };
    Session.prototype.releaseMouseButton = function (button) {
        if (this.capabilities.brokenMouseEvents) {
            return this.execute(simulateMouse, [
                {
                    action: 'mouseup',
                    button: button,
                    position: this._lastMousePosition
                }
            ]);
        }
        return this.serverPost('buttonup', {
            button: button
        });
    };
    Session.prototype.doubleClick = function () {
        var _this = this;
        if (this.capabilities.brokenMouseEvents) {
            return this.execute(simulateMouse, [
                {
                    action: 'dblclick',
                    button: 0,
                    position: this._lastMousePosition
                }
            ]);
        }
        if (this.capabilities.brokenDoubleClick) {
            return this.pressMouseButton()
                .then(function () {
                return _this.releaseMouseButton();
            })
                .then(function () { return _this.serverPost('doubleclick'); });
        }
        return this.serverPost('doubleclick');
    };
    Session.prototype.tap = function (element) {
        return this.serverPost('touch/click', {
            element: element.elementId
        });
    };
    Session.prototype.pressFinger = function (x, y) {
        return this.serverPost('touch/down', { x: x, y: y });
    };
    Session.prototype.releaseFinger = function (x, y) {
        return this.serverPost('touch/up', { x: x, y: y });
    };
    Session.prototype.moveFinger = function (x, y) {
        return this.serverPost('touch/move', { x: x, y: y });
    };
    Session.prototype.touchScroll = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var element = args[0], xOffset = args[1], yOffset = args[2];
        if (typeof yOffset === 'undefined' && typeof xOffset !== 'undefined') {
            yOffset = xOffset;
            xOffset = element;
            element = undefined;
        }
        if (this.capabilities.brokenTouchScroll) {
            return this.execute(function (element, x, y) {
                var rect = { left: window.scrollX, top: window.scrollY };
                if (element) {
                    var bbox = element.getBoundingClientRect();
                    rect.left += bbox.left;
                    rect.top += bbox.top;
                }
                window.scrollTo(rect.left + x, rect.top + y);
            }, [element, xOffset, yOffset]);
        }
        if (element) {
            element = element.elementId;
        }
        return this.serverPost('touch/scroll', {
            element: element,
            xoffset: xOffset,
            yoffset: yOffset
        });
    };
    Session.prototype.doubleTap = function (element) {
        var elementId = element && element.elementId;
        return this.serverPost('touch/doubleclick', {
            element: elementId
        });
    };
    Session.prototype.longTap = function (element) {
        var elementId = element && element.elementId;
        return this.serverPost('touch/longclick', { element: elementId });
    };
    Session.prototype.flickFinger = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var element = args[0], xOffset = args[1], yOffset = args[2], speed = args[3];
        if (typeof speed === 'undefined' &&
            typeof yOffset === 'undefined' &&
            typeof xOffset !== 'undefined') {
            return this.serverPost('touch/flick', {
                xspeed: element,
                yspeed: xOffset
            });
        }
        return this.serverPost('touch/flick', {
            element: element.elementId,
            xoffset: xOffset,
            yoffset: yOffset,
            speed: speed
        });
    };
    Session.prototype.getGeolocation = function () {
        var _this = this;
        return this.serverGet('location').then(function (location) {
            if (location.altitude === 0 &&
                _this._lastAltitude !== location.altitude) {
                location.altitude = undefined;
            }
            return location;
        });
    };
    Session.prototype.setGeolocation = function (location) {
        if (location.altitude !== undefined) {
            this._lastAltitude = location.altitude;
        }
        return this.serverPost('location', { location: location });
    };
    Session.prototype.getLogsFor = function (type) {
        return this.serverPost('log', {
            type: type
        }).then(function (logs) {
            if (!logs) {
                return logs;
            }
            if (isStringArray(logs)) {
                return logs.map(function (log) {
                    var logData = /\[([^\]]+)\]\s*\[([^\]]+)\]\s*(.*)/.exec(log);
                    var entry;
                    if (logData) {
                        entry = {
                            timestamp: Date.parse(logData[1]) / 1000,
                            level: logData[2],
                            message: logData[3]
                        };
                    }
                    else {
                        entry = {
                            timestamp: NaN,
                            level: 'INFO',
                            message: log
                        };
                    }
                    return entry;
                });
            }
            else {
                return logs;
            }
        });
    };
    Session.prototype.getAvailableLogTypes = function () {
        if (this.capabilities.fixedLogTypes) {
            return Task_1.default.resolve(this.capabilities.fixedLogTypes);
        }
        return this.serverGet('log/types');
    };
    Session.prototype.getApplicationCacheStatus = function () {
        return this.serverGet('application_cache/status');
    };
    Session.prototype.quit = function () {
        return this._server.deleteSession(this._sessionId);
    };
    Session.prototype._manualFindByLinkText = function (using, value, multiple, element) {
        var check = using === 'link text'
            ? function (linkText, text) {
                return linkText === text;
            }
            : function (linkText, text) {
                return linkText.indexOf(text) !== -1;
            };
        var links = (element || document).getElementsByTagName('a');
        var linkText;
        var found = [];
        for (var i = 0; i < links.length; i++) {
            linkText = links[i].innerText
                .replace(/^\s+/, '')
                .replace(/\s+$/, '')
                .replace(/\s*\r\n\s*/g, '\n')
                .replace(/ +/g, ' ');
            if (check(linkText, value)) {
                if (!multiple) {
                    return links[i];
                }
                found.push(links[i]);
            }
        }
        if (multiple) {
            return found;
        }
    };
    Session.prototype.getLocalStorageKeys = function () {
        return this.serverGet('local_storage');
    };
    Session.prototype.setLocalStorageItem = function (key, value) {
        return this.serverPost('local_storage', { key: key, value: value });
    };
    Session.prototype.clearLocalStorage = function () {
        return this.serverDelete('local_storage');
    };
    Session.prototype.getLocalStorageItem = function (key) {
        return this.serverGet('local_storage/key/$0', null, [key]);
    };
    Session.prototype.deleteLocalStorageItem = function (key) {
        return this.serverDelete('local_storage/key/$0', null, [key]);
    };
    Session.prototype.getLocalStorageLength = function () {
        return this.serverGet('local_storage/size');
    };
    Session.prototype.getSessionStorageKeys = function () {
        return this.serverGet('session_storage');
    };
    Session.prototype.setSessionStorageItem = function (key, value) {
        return this.serverPost('session_storage', { key: key, value: value });
    };
    Session.prototype.clearSessionStorage = function () {
        return this.serverDelete('session_storage');
    };
    Session.prototype.getSessionStorageItem = function (key) {
        return this.serverGet('session_storage/key/$0', null, [key]);
    };
    Session.prototype.deleteSessionStorageItem = function (key) {
        return this.serverDelete('session_storage/key/$0', null, [key]);
    };
    Session.prototype.getSessionStorageLength = function () {
        return this.serverGet('session_storage/size');
    };
    Session.prototype.findDisplayed = function (using, value) {
        return findDisplayed_1.default(this, this, using, value);
    };
    Session.prototype.waitForDeleted = function (using, value) {
        return waitForDeleted_1.default(this, this, using, value);
    };
    Session.prototype.getExecuteAsyncTimeout = function () {
        return this.getTimeout('script');
    };
    Session.prototype.setExecuteAsyncTimeout = function (ms) {
        return this.setTimeout('script', ms);
    };
    Session.prototype.getFindTimeout = function () {
        return this.getTimeout('implicit');
    };
    Session.prototype.setFindTimeout = function (ms) {
        return this.setTimeout('implicit', ms);
    };
    Session.prototype.getPageLoadTimeout = function () {
        return this.getTimeout('page load');
    };
    Session.prototype.setPageLoadTimeout = function (ms) {
        return this.setTimeout('page load', ms);
    };
    tslib_1.__decorate([
        forCommand({ createsContext: true })
    ], Session.prototype, "getActiveElement", null);
    tslib_1.__decorate([
        forCommand({ usesElement: true })
    ], Session.prototype, "moveMouseTo", null);
    tslib_1.__decorate([
        forCommand({ usesElement: true })
    ], Session.prototype, "tap", null);
    tslib_1.__decorate([
        forCommand({ usesElement: true })
    ], Session.prototype, "touchScroll", null);
    tslib_1.__decorate([
        forCommand({ usesElement: true })
    ], Session.prototype, "doubleTap", null);
    tslib_1.__decorate([
        forCommand({ usesElement: true })
    ], Session.prototype, "longTap", null);
    tslib_1.__decorate([
        forCommand({ usesElement: true })
    ], Session.prototype, "flickFinger", null);
    return Session;
}(Locator_1.default));
exports.default = Session;
function forCommand(properties) {
    return function (target, property, descriptor) {
        var fn = target[property];
        descriptor.value = util_1.forCommand(fn, properties);
    };
}
function convertToElements(session, value) {
    function convert(value) {
        if (Array.isArray(value)) {
            value = value.map(convert);
        }
        else if (typeof value === 'object' && value !== null) {
            if (value.ELEMENT) {
                value = new Element_1.default(value, session);
            }
            else {
                for (var k in value) {
                    value[k] = convert(value[k]);
                }
            }
        }
        return value;
    }
    return convert(value);
}
function fixExecuteError(error) {
    if (error.name === 'UnknownError') {
        error.status = '17';
        error.name = statusCodes_1.default[error.status][0];
    }
    throw error;
}
function pushCookieProperties(target, source) {
    Object.keys(source).forEach(function (key) {
        var value = source[key];
        if (key === 'name' ||
            key === 'value' ||
            (key === 'domain' && value === 'http')) {
            return;
        }
        if (typeof value === 'boolean') {
            value && target.push(key);
        }
        else if (key === 'expiry') {
            if (typeof value === 'number') {
                value = new Date(value * 1000);
            }
            if (value instanceof Date) {
                value = value.toUTCString();
            }
            target.push('expires=' + encodeURIComponent(value));
        }
        else {
            target.push(key + '=' + encodeURIComponent(value));
        }
    });
}
function simulateKeys(keys) {
    var target = document.activeElement;
    function dispatch(kwArgs) {
        var event;
        if (typeof KeyboardEvent === 'function') {
            event = new KeyboardEvent(kwArgs.type, {
                bubbles: true,
                cancelable: kwArgs.cancelable || false,
                view: window,
                key: kwArgs.key || '',
                location: 3
            });
        }
        else {
            event = document.createEvent('KeyboardEvent');
            event.initKeyboardEvent(kwArgs.type, true, kwArgs.cancelable || false, window, kwArgs.key || '', 3, '', 0, '');
        }
        return target.dispatchEvent(event);
    }
    function dispatchInput() {
        var event;
        if (typeof Event === 'function') {
            event = new Event('input', { bubbles: true, cancelable: false });
        }
        else {
            event = document.createEvent('Event');
            event.initEvent('input', true, false);
        }
        return target.dispatchEvent(event);
    }
    keys = (_a = []).concat.apply(_a, keys.map(function (keys) { return keys.split(''); }));
    for (var i = 0, j = keys.length; i < j; ++i) {
        var key = keys[i];
        var performDefault = true;
        performDefault = dispatch({
            type: 'keydown',
            cancelable: true,
            key: key
        });
        performDefault =
            performDefault &&
                dispatch({ type: 'keypress', cancelable: true, key: key });
        if (performDefault) {
            if ('value' in target) {
                target.value =
                    target.value.slice(0, target.selectionStart) +
                        key +
                        target.value.slice(target.selectionEnd);
                dispatchInput();
            }
            else if (target.isContentEditable) {
                var node = document.createTextNode(key);
                var selection = window.getSelection();
                var range = selection.getRangeAt(0);
                range.deleteContents();
                range.insertNode(node);
                range.setStartAfter(node);
                range.setEndAfter(node);
                selection.removeAllRanges();
                selection.addRange(range);
            }
        }
        dispatch({ type: 'keyup', cancelable: true, key: key });
    }
    var _a;
}
function simulateMouse(kwArgs) {
    var position = kwArgs.position;
    function dispatch(kwArgs) {
        var event;
        if (typeof MouseEvent === 'function') {
            event = new MouseEvent(kwArgs.type, {
                bubbles: 'bubbles' in kwArgs ? kwArgs.bubbles : true,
                cancelable: kwArgs.cancelable || false,
                view: window,
                detail: kwArgs.detail || 0,
                screenX: window.screenX + position.x,
                screenY: window.screenY + position.y,
                clientX: position.x,
                clientY: position.y,
                ctrlKey: kwArgs.ctrlKey || false,
                shiftKey: kwArgs.shiftKey || false,
                altKey: kwArgs.altKey || false,
                metaKey: kwArgs.metaKey || false,
                button: kwArgs.button || 0,
                relatedTarget: kwArgs.relatedTarget
            });
        }
        else {
            event = document.createEvent('MouseEvents');
            event.initMouseEvent(kwArgs.type, kwArgs.bubbles || true, kwArgs.cancelable || false, window, kwArgs.detail || 0, window.screenX + position.x, window.screenY + position.y, position.x, position.y, kwArgs.ctrlKey || false, kwArgs.altKey || false, kwArgs.shiftKey || false, kwArgs.metaKey || false, kwArgs.button || 0, kwArgs.relatedTarget || null);
        }
        return kwArgs.target.dispatchEvent(event);
    }
    function click(target, button, detail) {
        if (!down(target, button)) {
            return false;
        }
        if (!up(target, button)) {
            return false;
        }
        return dispatch({
            button: button,
            cancelable: true,
            detail: detail,
            target: target,
            type: 'click'
        });
    }
    function down(target, button) {
        return dispatch({
            button: button,
            cancelable: true,
            target: target,
            type: 'mousedown'
        });
    }
    function up(target, button) {
        return dispatch({
            button: button,
            cancelable: true,
            target: target,
            type: 'mouseup'
        });
    }
    function move(currentElement, newElement, xOffset, yOffset) {
        if (newElement) {
            var bbox = newElement.getBoundingClientRect();
            if (xOffset == null) {
                xOffset = (bbox.right - bbox.left) * 0.5;
            }
            if (yOffset == null) {
                yOffset = (bbox.bottom - bbox.top) * 0.5;
            }
            position = { x: bbox.left + xOffset, y: bbox.top + yOffset };
        }
        else {
            position.x += xOffset || 0;
            position.y += yOffset || 0;
            newElement = document.elementFromPoint(position.x, position.y);
        }
        if (currentElement !== newElement) {
            dispatch({
                type: 'mouseout',
                target: currentElement,
                relatedTarget: newElement
            });
            dispatch({
                type: 'mouseleave',
                target: currentElement,
                relatedTarget: newElement,
                bubbles: false
            });
            dispatch({
                type: 'mouseenter',
                target: newElement,
                relatedTarget: currentElement,
                bubbles: false
            });
            dispatch({
                type: 'mouseover',
                target: newElement,
                relatedTarget: currentElement
            });
        }
        dispatch({ type: 'mousemove', target: newElement, bubbles: true });
        return position;
    }
    var target = document.elementFromPoint(position.x, position.y);
    if (kwArgs.action === 'mousemove') {
        return move(target, kwArgs.element, kwArgs.xOffset, kwArgs.yOffset);
    }
    else if (kwArgs.action === 'mousedown') {
        return down(target, kwArgs.button);
    }
    else if (kwArgs.action === 'mouseup') {
        return up(target, kwArgs.button);
    }
    else if (kwArgs.action === 'click') {
        return click(target, kwArgs.button, 0);
    }
    else if (kwArgs.action === 'dblclick') {
        if (!click(target, kwArgs.button, 0)) {
            return false;
        }
        if (!click(target, kwArgs.button, 1)) {
            return false;
        }
        return dispatch({
            type: 'dblclick',
            target: target,
            button: kwArgs.button,
            detail: 2,
            cancelable: true
        });
    }
}
function isStringArray(value) {
    return Array.isArray(value) && typeof value[0] === 'string';
}
//# sourceMappingURL=Session.js.map