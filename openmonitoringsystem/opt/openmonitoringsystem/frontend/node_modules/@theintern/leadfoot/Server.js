"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var keys_1 = require("./keys");
var Task_1 = require("@dojo/core/async/Task");
var request_1 = require("@dojo/core/request");
var Session_1 = require("./Session");
var statusCodes_1 = require("./lib/statusCodes");
var url_1 = require("url");
var util_1 = require("./lib/util");
var lang_1 = require("@dojo/core/lang");
var Server = (function () {
    function Server(url, options) {
        this.sessionConstructor = Session_1.default;
        this.fixSessionCapabilities = true;
        if (typeof url === 'object') {
            url = Object.create(url);
            if (url.username || url.password || url.accessKey) {
                url.auth =
                    encodeURIComponent(url.username || '') +
                        ':' +
                        encodeURIComponent(url.password || url.accessKey || '');
            }
        }
        this.url = url_1.format(url).replace(/\/*$/, '/');
        this.requestOptions = options || {};
    }
    Server.prototype._sendRequest = function (method, path, requestData, pathParts) {
        var url = this.url +
            path.replace(/\$(\d)/, function (_, index) {
                return encodeURIComponent(pathParts[index]);
            });
        var defaultRequestHeaders = {
            Accept: 'application/json,text/plain;q=0.9'
        };
        var kwArgs = lang_1.create(this.requestOptions, {
            followRedirects: false,
            handleAs: 'text',
            headers: tslib_1.__assign({}, defaultRequestHeaders),
            method: method
        });
        if (requestData) {
            kwArgs.body = JSON.stringify(requestData);
            kwArgs.headers['Content-Type'] = 'application/json;charset=UTF-8';
            kwArgs.headers['Content-Length'] = String(Buffer.byteLength(kwArgs.body, 'utf8'));
        }
        else {
            kwArgs.headers['Content-Length'] = '0';
        }
        var trace = {};
        Error.captureStackTrace(trace, this._sendRequest);
        return new Task_1.default(function (resolve, reject) {
            request_1.default(url, kwArgs)
                .then(resolve, reject)
                .finally(function () {
                var error = new Error('Canceled');
                error.name = 'CancelError';
                reject(error);
            });
        })
            .then(function handleResponse(response) {
            if (response.status >= 300 &&
                response.status < 400 &&
                response.headers.get('Location')) {
                var redirectUrl = response.headers.get('Location');
                if (!/^\w+:/.test(redirectUrl)) {
                    redirectUrl = url_1.resolve(url, redirectUrl);
                }
                return request_1.default(redirectUrl, {
                    method: 'GET',
                    headers: defaultRequestHeaders
                }).then(handleResponse);
            }
            return response.text().then(function (data) {
                return { response: response, data: data };
            });
        })
            .then(function (responseData) {
            var response = responseData.response;
            var responseType = response.headers.get('Content-Type');
            var data;
            if (responseType &&
                responseType.indexOf('application/json') === 0 &&
                responseData.data) {
                data = JSON.parse(responseData.data);
            }
            if (response.status === 204) {
                data = {
                    status: 0,
                    sessionId: null,
                    value: null
                };
            }
            else if (response.status >= 400 ||
                (data && data.status > 0)) {
                var error = new Error();
                if (!data) {
                    data = {
                        status: response.status === 404 ||
                            response.status === 501
                            ? 9
                            : 13,
                        value: {
                            message: responseData.data
                        }
                    };
                }
                else if (!data.value && 'message' in data) {
                    data = {
                        status: response.status === 404 ||
                            response.status === 501 ||
                            data.message.indexOf('cannot find command') > -1
                            ? 9
                            : 13,
                        value: data
                    };
                }
                if (response.status === 501 && data.status === 13) {
                    data.status = 9;
                }
                if (response.status === 500 &&
                    data.value &&
                    data.value.message === 'Invalid Command') {
                    data.status = 9;
                }
                if (data.status === 13 &&
                    data.value &&
                    data.value.class &&
                    (data.value.class.indexOf('UnsupportedOperationException') > -1 ||
                        data.value.class.indexOf('UnsupportedCommandException') > -1)) {
                    data.status = 9;
                }
                if (response.status === 500 &&
                    data.value &&
                    data.value.message &&
                    (data.value.message.indexOf('Command not found') > -1 ||
                        data.value.message.indexOf('Unknown command') > -1)) {
                    data.status = 9;
                }
                if (response.status === 405 &&
                    data.value &&
                    data.value.message &&
                    data.value.message.indexOf('Invalid Command Method') >
                        -1) {
                    data.status = 9;
                }
                var statusCode = statusCodes_1.default[data.status];
                if (statusCode) {
                    var name_1 = statusCode[0], message = statusCode[1];
                    if (name_1 && message) {
                        error.name = name_1;
                        error.message = message;
                    }
                }
                if (data.value && data.value.message) {
                    error.message = data.value.message;
                }
                if (data.value && data.value.screen) {
                    data.value.screen = new Buffer(data.value.screen, 'base64');
                }
                error.status = data.status;
                error.detail = data.value;
                error.request = {
                    url: url,
                    method: method,
                    data: requestData
                };
                error.response = response;
                var sanitizedUrl = (function () {
                    var parsedUrl = url_1.parse(url);
                    if (parsedUrl.auth) {
                        parsedUrl.auth = '(redacted)';
                    }
                    return url_1.format(parsedUrl);
                })();
                error.message =
                    '[' +
                        method +
                        ' ' +
                        sanitizedUrl +
                        (requestData
                            ? ' / ' + JSON.stringify(requestData)
                            : '') +
                        '] ' +
                        error.message;
                error.stack = error.message + util_1.trimStack(trace.stack);
                throw error;
            }
            return data;
        })
            .catch(function (error) {
            error.stack = error.message + util_1.trimStack(trace.stack);
            throw error;
        });
    };
    Server.prototype.get = function (path, requestData, pathParts) {
        return this._sendRequest('GET', path, requestData, pathParts);
    };
    Server.prototype.post = function (path, requestData, pathParts) {
        return this._sendRequest('POST', path, requestData, pathParts);
    };
    Server.prototype.delete = function (path, requestData, pathParts) {
        return this._sendRequest('DELETE', path, requestData, pathParts);
    };
    Server.prototype.getStatus = function () {
        return this.get('status').then(returnValue);
    };
    Server.prototype.createSession = function (desiredCapabilities, requiredCapabilities) {
        var _this = this;
        var fixSessionCapabilities = this.fixSessionCapabilities;
        if (desiredCapabilities.fixSessionCapabilities != null) {
            fixSessionCapabilities = desiredCapabilities.fixSessionCapabilities;
            desiredCapabilities = tslib_1.__assign({}, desiredCapabilities);
            desiredCapabilities.fixSessionCapabilities = undefined;
        }
        return this.post('session', {
            desiredCapabilities: desiredCapabilities,
            requiredCapabilities: requiredCapabilities
        }).then(function (response) {
            if (response.value && response.value.sessionId) {
                response = response.value;
            }
            var session = new _this.sessionConstructor(response.sessionId, _this, response.value);
            if (fixSessionCapabilities) {
                return _this._fillCapabilities(session, fixSessionCapabilities !== 'no-detect')
                    .catch(function (error) {
                    return session.quit().finally(function () {
                        throw error;
                    });
                })
                    .then(function () { return session; });
            }
            else {
                return session;
            }
        });
    };
    Server.prototype._fillCapabilities = function (session, detectCapabilities) {
        if (detectCapabilities === void 0) { detectCapabilities = true; }
        lang_1.mixin(session.capabilities, this._getKnownCapabilities(session));
        return (detectCapabilities
            ? this._detectCapabilities(session)
            : Task_1.default.resolve(session)).then(function () {
            Object.defineProperty(session.capabilities, '_filled', {
                value: true,
                configurable: true
            });
            return session;
        });
    };
    Server.prototype._getKnownCapabilities = function (session) {
        var capabilities = session.capabilities;
        var updates = {};
        if (capabilities.platform && !capabilities.platformName) {
            capabilities.platformName = capabilities.platform;
        }
        if (capabilities.version && !capabilities.browserVersion) {
            capabilities.browserVersion = capabilities.version;
        }
        if (isSafari(capabilities) && isMac(capabilities)) {
            lang_1.mixin(updates, {
                nativeEvents: false,
                rotatable: false,
                locationContextEnabled: false,
                webStorageEnabled: false,
                applicationCacheEnabled: false,
                supportsNavigationDataUris: true,
                supportsCssTransforms: true,
                supportsExecuteAsync: true,
                mouseEnabled: true,
                touchEnabled: false,
                dynamicViewport: true,
                shortcutKey: keys_1.default.COMMAND,
                returnsFromClickImmediately: false,
                brokenDeleteCookie: false,
                brokenExecuteElementReturn: false,
                brokenExecuteUndefinedReturn: false,
                brokenElementDisplayedOpacity: false,
                brokenElementDisplayedOffscreen: false,
                brokenSubmitElement: true,
                brokenWindowSwitch: true,
                brokenDoubleClick: false,
                brokenCssTransformedSize: true,
                fixedLogTypes: false,
                brokenHtmlTagName: false,
                brokenNullGetSpecAttribute: false
            });
            if (isValidVersion(capabilities, 0, 100)) {
                lang_1.mixin(updates, {
                    remoteFiles: false,
                    brokenActiveElement: true,
                    brokenExecuteForNonHttpUrl: true,
                    brokenMouseEvents: true,
                    brokenNavigation: true,
                    brokenOptionSelect: false,
                    brokenSendKeys: true,
                    brokenWindowPosition: true,
                    brokenWindowSize: true,
                    brokenCookies: true
                });
                if (isValidVersion(capabilities, 10, 11)) {
                    lang_1.mixin(updates, {
                        supportsExecuteAsync: false
                    });
                }
            }
            if (isValidVersion(capabilities, 1000)) {
                lang_1.mixin(updates, {
                    brokenLinkTextLocator: true,
                    brokenOptionSelect: true,
                    brokenWhitespaceNormalization: true,
                    fixedLogTypes: [],
                    usesWebDriverActiveElement: true
                });
            }
            return updates;
        }
        if (isFirefox(capabilities, 53, Infinity)) {
            updates.usesWebDriverWindowCommands = true;
        }
        if (isMsEdge(capabilities)) {
            updates.returnsFromClickImmediately = true;
            updates.brokenDeleteCookie = true;
            updates.brokenClick = true;
            updates.remoteFiles = false;
        }
        if (isMsEdge(capabilities, 25.10586)) {
            updates.brokenWindowClose = true;
        }
        if (isMsEdge(capabilities, 38.14366)) {
            updates.brokenFileSendKeys = true;
        }
        if (isMsEdge(capabilities, 37.14316) &&
            !('handlesAlerts' in capabilities)) {
            updates.handlesAlerts = true;
        }
        if (isFirefox(capabilities, 49, Infinity)) {
            updates.supportsKeysCommand = false;
            updates.usesWebDriverLocators = true;
            updates.usesFlatKeysArray = true;
            updates.brokenEmptyPost = true;
            updates.brokenMouseEvents = true;
            updates.fixedLogTypes = [];
        }
        if (isFirefox(capabilities, 49, 53)) {
            updates.brokenWindowSwitch = true;
        }
        if (isInternetExplorer(capabilities, 11)) {
            updates.takesScreenshot = true;
            updates.brokenSubmitElement = true;
        }
        if (isInternetExplorer(capabilities, 11, Infinity)) {
            updates.brokenOptionSelect = false;
        }
        if (!('mouseEnabled' in capabilities) &&
            isFirefox(capabilities, 49, Infinity) &&
            isMac(capabilities)) {
            updates.mouseEnabled = true;
        }
        if (capabilities.hasTouchScreen === false) {
            updates.touchEnabled = false;
        }
        if (capabilities.hasTouchScreen === false ||
            capabilities.browserName === 'chrome') {
            updates.touchEnabled = false;
        }
        if (isInternetExplorer(capabilities, 9)) {
            updates.supportsCssTransforms = true;
        }
        updates.shortcutKey = (function () {
            var platform = (capabilities.platform ||
                capabilities.platformName);
            if (/^mac/i.test(platform) || /^darwin/i.test(platform)) {
                return keys_1.default.COMMAND;
            }
            if (/^ios/i.test(platform)) {
                return null;
            }
            return keys_1.default.CONTROL;
        })();
        updates.scriptedParentFrameCrashesBrowser = isInternetExplorer(capabilities, 0, 9);
        if (capabilities.browserName === 'Safari' &&
            capabilities.platformName === 'IOS') {
            updates.brokenWindowSwitch = true;
        }
        if (capabilities.browserName === 'android' &&
            capabilities.deviceName === 'Android Emulator') {
            updates.brokenParentFrameSwitch = true;
        }
        return updates;
    };
    Server.prototype._detectCapabilities = function (session) {
        var _this = this;
        var capabilities = session.capabilities;
        var supported = function () { return true; };
        var unsupported = function () { return false; };
        var maybeSupported = function (error) {
            if (error.name === 'UnknownCommand') {
                return false;
            }
            if (/\bunimplemented command\b/.test(error.message)) {
                return false;
            }
            return true;
        };
        var broken = supported;
        var works = unsupported;
        var addCapabilities = function (testedCapabilities) {
            return Object.keys(testedCapabilities).reduce(function (previous, key) {
                return previous.then(function () {
                    var value = testedCapabilities[key];
                    var task = typeof value === 'function'
                        ? value()
                        : Task_1.default.resolve(value);
                    return task.then(function (value) {
                        capabilities[key] = value;
                    });
                });
            }, Task_1.default.resolve());
        };
        var get = function (page) {
            if (capabilities.supportsNavigationDataUris !== false) {
                return session.get('data:text/html;charset=utf-8,' + encodeURIComponent(page));
            }
            if (isInternetExplorer(capabilities, 0, 10) ||
                isMsEdge(capabilities)) {
                var initialUrl = 'about:blank';
                if (isInternetExplorer(capabilities) &&
                    capabilities['se:ieOptions']) {
                    initialUrl = capabilities['se:ieOptions'].initialBrowserUrl;
                }
                else if (capabilities.initialBrowserUrl) {
                    initialUrl = capabilities.initialBrowserUrl;
                }
                return session.get(initialUrl).then(function () {
                    return session.execute('document.body.innerHTML = arguments[0];', [
                        page.replace('<!DOCTYPE html>', 'x')
                    ]);
                });
            }
            return session.get('about:blank').then(function () {
                return session.execute('document.write(arguments[0]);', [
                    page
                ]);
            });
        };
        var discoverServerFeatures = function () {
            var testedCapabilities = {};
            if (capabilities.remoteFiles == null) {
                testedCapabilities.remoteFiles = function () {
                    return session
                        .serverPost('file', {
                        file: 'UEsDBAoAAAAAAD0etkYAAAAAAAAAAAAAAAAIABwAdGVzdC50eHRVVAkAA2WnXlVlp15VdXgLAAEE8gMAAATyAwAAUEsBAh4DCgAAAAAAPR62RgAAAAAAAAAAAAAAAAgAGAAAAAAAAAAAAKSBAAAAAHRlc3QudHh0VVQFAANlp15VdXgLAAEE8gMAAATyAwAAUEsFBgAAAAABAAEATgAAAEIAAAAAAA=='
                    })
                        .then(function (filename) {
                        return (filename && filename.indexOf('test.txt') > -1);
                    })
                        .catch(unsupported);
                };
            }
            if (capabilities.supportsSessionCommand == null) {
                testedCapabilities.supportsSessionCommands = _this.get('session/$0', undefined, [session.sessionId]).then(supported, unsupported);
            }
            if (capabilities.usesWebDriverTimeouts == null) {
                testedCapabilities.usesWebDriverTimeouts = session
                    .setFindTimeout(500)
                    .then(unsupported, function (error) {
                    return /Missing 'type' parameter/.test(error.message);
                });
            }
            if (capabilities.usesWebDriverWindowCommands == null) {
                testedCapabilities.usesWebDriverWindowCommands = session
                    .serverGet('window/rect')
                    .then(supported, unsupported);
            }
            if (capabilities.usesHandleParameter == null) {
                testedCapabilities.usesHandleParameter = session
                    .switchToWindow('current')
                    .then(unsupported, function (error) {
                    return /Missing .*handle/.test(error.message);
                });
            }
            if (capabilities.brokenSessionList == null) {
                testedCapabilities.brokenSessionList = _this.getSessions().then(works, broken);
            }
            if (capabilities.usesWebDriverFrameId == null) {
                testedCapabilities.usesWebDriverFrameId = session
                    .switchToFrame('inlineFrame')
                    .then(unsupported, function (error) {
                    return /frame id has unexpected type/.test(error.message);
                });
            }
            if (capabilities.returnsFromClickImmediately == null) {
                testedCapabilities.returnsFromClickImmediately = function () {
                    function assertSelected(expected) {
                        return function (actual) {
                            if (expected !== actual) {
                                throw new Error('unexpected selection state');
                            }
                        };
                    }
                    return get('<!DOCTYPE html><input type="checkbox" id="c">')
                        .then(function () {
                        return session.findById('c');
                    })
                        .then(function (element) {
                        return element
                            .click()
                            .then(function () {
                            return element.isSelected();
                        })
                            .then(assertSelected(true))
                            .then(function () {
                            return element.click().then(function () {
                                return element.isSelected();
                            });
                        })
                            .then(assertSelected(false))
                            .then(function () {
                            return element.click().then(function () {
                                return element.isSelected();
                            });
                        })
                            .then(assertSelected(true));
                    })
                        .then(works, broken);
                };
            }
            if (capabilities.supportsKeysCommand == null) {
                testedCapabilities.supportsKeysCommand = session
                    .serverPost('keys', { value: ['a'] })
                    .then(supported, unsupported);
            }
            return Task_1.default.all(Object.keys(testedCapabilities).map(function (key) { return testedCapabilities[key]; })).then(function () { return testedCapabilities; });
        };
        var discoverFeatures = function () {
            var testedCapabilities = {};
            if (isSafari(capabilities) && isMac(capabilities)) {
                return Task_1.default.resolve({});
            }
            if (capabilities.rotatable == null) {
                testedCapabilities.rotatable = session
                    .getOrientation()
                    .then(supported, unsupported);
            }
            if (capabilities.locationContextEnabled) {
                testedCapabilities.locationContextEnabled = session
                    .getGeolocation()
                    .then(supported, function (error) {
                    if (error.message.indexOf('not mapped : GET_LOCATION') !== -1) {
                        return false;
                    }
                    if (error.message.indexOf('Location must be set') !== -1) {
                        return session
                            .setGeolocation({
                            latitude: 12.1,
                            longitude: -22.33,
                            altitude: 1000.2
                        })
                            .then(function () { return session.getGeolocation(); })
                            .then(supported, unsupported);
                    }
                    return false;
                });
            }
            if (capabilities.webStorageEnabled) {
                testedCapabilities.webStorageEnabled = session
                    .getLocalStorageLength()
                    .then(supported, maybeSupported);
            }
            if (capabilities.applicationCacheEnabled) {
                testedCapabilities.applicationCacheEnabled = session
                    .getApplicationCacheStatus()
                    .then(supported, maybeSupported);
            }
            if (capabilities.takesScreenshot == null) {
                testedCapabilities.takesScreenshot = session
                    .takeScreenshot()
                    .then(supported, unsupported);
            }
            if (capabilities.supportsExecuteAsync == null) {
                testedCapabilities.supportsExecuteAsync = session
                    .executeAsync('arguments[0](true);')
                    .catch(unsupported);
            }
            if (capabilities.mouseEnabled == null &&
                !(isFirefox(capabilities, 49, Infinity) && isMac(capabilities))) {
                testedCapabilities.mouseEnabled = function () {
                    return session
                        .doubleClick()
                        .then(supported, maybeSupported);
                };
            }
            if (capabilities.touchEnabled == null) {
                testedCapabilities.touchEnabled = function () {
                    return get('<!DOCTYPE html><button id="clicker">Click me</button>')
                        .then(function () {
                        return session.findById('clicker');
                    })
                        .then(function (button) {
                        return session
                            .doubleTap(button)
                            .then(supported, maybeSupported);
                    })
                        .catch(unsupported);
                };
            }
            if (capabilities.dynamicViewport == null) {
                testedCapabilities.dynamicViewport = session
                    .getWindowSize()
                    .then(function (originalSize) {
                    return session.setWindowSize(originalSize.width - 2, originalSize.height - 2);
                })
                    .then(supported, unsupported);
            }
            if (capabilities.supportsNavigationDataUris == null) {
                testedCapabilities.supportsNavigationDataUris = function () {
                    return get('<!DOCTYPE html><title>a</title>')
                        .then(function () {
                        return session.getPageTitle();
                    })
                        .then(function (pageTitle) {
                        return pageTitle === 'a';
                    })
                        .catch(unsupported);
                };
            }
            if (capabilities.supportsCssTransforms == null) {
                testedCapabilities.supportsCssTransforms = function () {
                    return get('<!DOCTYPE html><style>#a{width:8px;height:8px;-ms-transform:scale(0.5);-moz-transform:scale(0.5);-webkit-transform:scale(0.5);transform:scale(0.5);}</style><div id="a"></div>')
                        .then(function () {
                        return session.execute(function () {
                            var bbox = document.getElementById('a').getBoundingClientRect();
                            return bbox.right - bbox.left === 4;
                        });
                    })
                        .catch(unsupported);
                };
            }
            return Task_1.default.all(Object.keys(testedCapabilities).map(function (key) { return testedCapabilities[key]; })).then(function () { return testedCapabilities; });
        };
        var discoverDefects = function () {
            var testedCapabilities = {};
            if (isSafari(capabilities) && isMac(capabilities)) {
                return Task_1.default.resolve({});
            }
            if (capabilities.brokenActiveElement == null) {
                testedCapabilities.brokenActiveElement = session
                    .getActiveElement()
                    .then(works, function (error) {
                    return error.name === 'UnknownCommand';
                });
            }
            if (capabilities.brokenDeleteCookie == null &&
                capabilities.browserName === 'selendroid') {
                testedCapabilities.brokenDeleteCookie = function () {
                    return session
                        .get('about:blank')
                        .then(function () {
                        return session.clearCookies();
                    })
                        .then(function () {
                        return session.setCookie({
                            name: 'foo',
                            value: 'foo'
                        });
                    })
                        .then(function () {
                        return session.deleteCookie('foo');
                    })
                        .then(function () {
                        return session.getCookies();
                    })
                        .then(function (cookies) {
                        return cookies.length > 0;
                    })
                        .catch(function () {
                        return true;
                    })
                        .then(function (isBroken) {
                        return session
                            .clearCookies()
                            .then(function () { return isBroken; }, function () { return isBroken; });
                    });
                };
            }
            if (capabilities.brokenHtmlTagName == null) {
                testedCapabilities.brokenHtmlTagName = session
                    .findByTagName('html')
                    .then(function (element) {
                    return element.getTagName();
                })
                    .then(function (tagName) {
                    return tagName !== 'html';
                })
                    .catch(broken);
            }
            if (capabilities.brokenNullGetSpecAttribute == null) {
                testedCapabilities.brokenNullGetSpecAttribute = session
                    .findByTagName('html')
                    .then(function (element) {
                    return element.getSpecAttribute('nonexisting');
                })
                    .then(function (value) {
                    return value !== null;
                })
                    .catch(broken);
            }
            if (capabilities.brokenElementSerialization == null) {
                testedCapabilities.brokenElementSerialization = function () {
                    return get('<!DOCTYPE html><div id="a"></div>')
                        .then(function () {
                        return session.findById('a');
                    })
                        .then(function (element) {
                        return session.execute(function (element) {
                            return element.getAttribute('id');
                        }, [element]);
                    })
                        .then(function (attribute) {
                        return attribute !== 'a';
                    })
                        .catch(broken);
                };
            }
            if (capabilities.brokenExecuteUndefinedReturn == null) {
                testedCapabilities.brokenExecuteUndefinedReturn = session
                    .execute('return undefined;')
                    .then(function (value) {
                    return value !== null;
                }, broken);
            }
            if (capabilities.brokenExecuteElementReturn == null) {
                testedCapabilities.brokenExecuteElementReturn = function () {
                    return get('<!DOCTYPE html><div id="a"></div>')
                        .then(function () {
                        return session.execute('return document.getElementById("a");');
                    })
                        .then(function (element) { return element && element.getTagName(); })
                        .then(works, broken);
                };
            }
            if (capabilities.brokenElementDisplayedOpacity == null) {
                testedCapabilities.brokenElementDisplayedOpacity = function () {
                    return get('<!DOCTYPE html><div id="a" style="opacity: .1;">a</div>')
                        .then(function () {
                        return session.execute('var o = document.getElementById("a").style.opacity; return o && o.charAt(0) === "0";');
                    })
                        .then(function (supportsOpacity) {
                        if (!supportsOpacity) {
                            return works();
                        }
                        else {
                            return session
                                .execute('document.getElementById("a").style.opacity = "0";')
                                .then(function () {
                                return session.findById('a');
                            })
                                .then(function (element) {
                                return element.isDisplayed();
                            });
                        }
                    })
                        .catch(broken);
                };
            }
            if (capabilities.brokenElementDisplayedOffscreen == null) {
                testedCapabilities.brokenElementDisplayedOffscreen = function () {
                    var pageText = '<!DOCTYPE html><div id="a" style="left: 0; position: absolute; top: -1000px;">a</div>';
                    return get(pageText)
                        .then(function () {
                        return session.findById('a');
                    })
                        .then(function (element) {
                        return element.isDisplayed();
                    })
                        .catch(broken);
                };
            }
            if (capabilities.brokenWhitespaceNormalization == null) {
                testedCapabilities.brokenWhitespaceNormalization = function () {
                    return get('<!DOCTYPE html><div id="d">This is\n<br>a test\n</div>')
                        .then(function () {
                        return session
                            .findById('d')
                            .then(function (element) {
                            return element.getVisibleText();
                        })
                            .then(function (text) {
                            if (/\r\n/.test(text) ||
                                /\s+$/.test(text)) {
                                throw new Error('invalid whitespace');
                            }
                        });
                    })
                        .then(works, broken);
                };
            }
            if (capabilities.brokenLinkTextLocator == null) {
                testedCapabilities.brokenLinkTextLocator = function () {
                    return get('<!DOCTYPE html><a id="d">What a cute<span style="display:none">, yellow</span> backpack</a><a id="e">What a cute, yellow backpack</a>')
                        .then(function () {
                        return session
                            .findByLinkText('What a cute, yellow backpack')
                            .then(function (element) {
                            return element.getVisibleText();
                        })
                            .then(function (text) {
                            if (text !== 'What a cute, yellow backpack') {
                                throw new Error('incorrect link was found');
                            }
                        });
                    })
                        .then(works, broken);
                };
            }
            if (capabilities.brokenComputedStyles == null) {
                testedCapabilities.brokenComputedStyles = function () {
                    var pageText = '<!DOCTYPE html><style>a { background: purple }</style><a id="a1">foo</a>';
                    return get(pageText)
                        .then(function () {
                        return session.findById('a1');
                    })
                        .then(function (element) {
                        return element.getComputedStyle('background-color');
                    })
                        .then(function (value) {
                        if (!value) {
                            throw new Error('empty style');
                        }
                    })
                        .then(works, broken);
                };
            }
            if (capabilities.brokenOptionSelect == null) {
                if (capabilities.brokenOptionSelect == null) {
                    testedCapabilities.brokenOptionSelect = function () {
                        return get('<!DOCTYPE html><select id="d"><option id="o1" value="foo">foo</option>' +
                            '<option id="o2" value="bar" selected>bar</option></select>')
                            .then(function () {
                            return session.findById('d');
                        })
                            .then(function (element) {
                            return element.click();
                        })
                            .then(function () {
                            return session.findById('o1');
                        })
                            .then(function (element) {
                            return element.click();
                        })
                            .then(works, broken);
                    };
                }
            }
            if (capabilities.brokenPageSource == null) {
                testedCapabilities.brokenPageSource = session
                    .getPageSource()
                    .then(works, broken);
            }
            if (capabilities.brokenSubmitElement == null) {
                testedCapabilities.brokenSubmitElement = function () {
                    return get('<!DOCTYPE html><form method="get" action="about:blank">' +
                        '<input id="a" type="submit" name="a" value="a"></form>')
                        .then(function () {
                        return session.findById('a');
                    })
                        .then(function (element) {
                        return element.submit();
                    })
                        .then(function () {
                        return session.getCurrentUrl();
                    })
                        .then(function (url) {
                        return url.indexOf('a=a') === -1;
                    })
                        .catch(broken);
                };
            }
            if (capabilities.brokenWindowSize == null) {
                testedCapabilities.brokenWindowSize = session
                    .getWindowSize()
                    .then(works, broken);
            }
            if (capabilities.brokenWindowMaximize == null) {
                testedCapabilities.brokenWindowMaximize = function () {
                    var originalSize;
                    return session
                        .getWindowSize()
                        .then(function (size) {
                        originalSize = size;
                        return session.setWindowSize(size.width - 10, size.height - 10);
                    })
                        .then(function () { return session.maximizeWindow(); })
                        .then(function () { return session.getWindowSize(); })
                        .then(function (size) {
                        return (size.width > originalSize.width &&
                            size.height > originalSize.height);
                    })
                        .catch(broken);
                };
            }
            if (capabilities.fixedLogTypes == null) {
                testedCapabilities.fixedLogTypes = session
                    .getAvailableLogTypes()
                    .then(unsupported, function (error) {
                    if (capabilities.browserName === 'selendroid' &&
                        error.response.text.length === 0) {
                        return ['logcat'];
                    }
                    return [];
                });
            }
            if (capabilities.brokenZeroTimeout == null) {
                testedCapabilities.brokenZeroTimeout = session
                    .setTimeout('implicit', 0)
                    .then(works, broken);
            }
            if (capabilities.brokenWindowSwitch == null) {
                testedCapabilities.brokenWindowSwitch = session
                    .getCurrentWindowHandle()
                    .then(function (handle) {
                    return session.switchToWindow(handle);
                })
                    .then(works, broken);
            }
            if (capabilities.brokenParentFrameSwitch == null) {
                testedCapabilities.brokenParentFrameSwitch = session
                    .switchToParentFrame()
                    .then(works, broken);
            }
            var scrollTestUrl = '<!DOCTYPE html><div id="a" style="margin: 3000px;"></div>';
            if (capabilities.brokenElementPosition == null) {
                testedCapabilities.brokenElementPosition = function () {
                    return get(scrollTestUrl)
                        .then(function () {
                        return session.findById('a');
                    })
                        .then(function (element) {
                        return element.getPosition();
                    })
                        .then(function (position) {
                        return position.x !== 3000 || position.y !== 3000;
                    })
                        .catch(broken);
                };
            }
            if (capabilities.brokenRefresh == null) {
                testedCapabilities.brokenRefresh = function () {
                    return session
                        .get('about:blank?1')
                        .then(function () {
                        var timer;
                        var refresh;
                        return new Task_1.default(function (resolve) {
                            var settled = false;
                            refresh = session
                                .refresh()
                                .then(function () {
                                settled = true;
                                clearTimeout(timer);
                                resolve(false);
                            }, function () {
                                settled = true;
                                clearTimeout(timer);
                                resolve(true);
                            })
                                .finally(function () {
                                if (!settled) {
                                    resolve(true);
                                }
                            });
                            timer = setTimeout(function () {
                                refresh.cancel();
                            }, 2000);
                        }, function () {
                            clearTimeout(timer);
                            refresh.cancel();
                        });
                    })
                        .catch(broken);
                };
            }
            if (capabilities.brokenMouseEvents == null &&
                capabilities.mouseEnabled) {
                testedCapabilities.brokenMouseEvents = function () {
                    return get('<!DOCTYPE html><div id="foo">foo</div>' +
                        '<script>window.counter = 0; var d = document; d.onmousemove = function () { window.counter++; };</script>')
                        .then(function () {
                        return session.findById('foo');
                    })
                        .then(function (element) {
                        return session.moveMouseTo(element, 20, 20);
                    })
                        .then(function () {
                        return util_1.sleep(100);
                    })
                        .then(function () {
                        return session.execute('return window.counter;');
                    })
                        .then(function (counter) {
                        return counter > 0 ? works() : broken();
                    }, broken);
                };
                if (capabilities.brokenHtmlMouseMove == null) {
                    testedCapabilities.brokenHtmlMouseMove = function () {
                        return get('<!DOCTYPE html><html></html>')
                            .then(function () {
                            return session
                                .findByTagName('html')
                                .then(function (element) {
                                return session.moveMouseTo(element, 0, 0);
                            });
                        })
                            .then(works, broken);
                    };
                }
                if (capabilities.brokenDoubleClick == null) {
                    testedCapabilities.brokenDoubleClick = function retry() {
                        if (capabilities.browserName === 'internet explorer' &&
                            capabilities.browserVersion === '9') {
                            return Task_1.default.resolve(false);
                        }
                        return get('<!DOCTYPE html><script>window.counter = 0; var d = document; d.onclick = d.onmousedown = d.onmouseup = function () { window.counter++; };</script>')
                            .then(function () {
                            return session.findByTagName('html');
                        })
                            .then(function (element) {
                            return session.moveMouseTo(element);
                        })
                            .then(function () {
                            return util_1.sleep(100);
                        })
                            .then(function () {
                            return session.doubleClick();
                        })
                            .then(function () {
                            return session.execute('return window.counter;');
                        })
                            .then(function (counter) {
                            if (counter === 0) {
                                return retry();
                            }
                            return counter !== 6;
                        })
                            .catch(broken);
                    };
                }
            }
            if (capabilities.touchEnabled) {
                if (capabilities.brokenLongTap == null) {
                    testedCapabilities.brokenLongTap = session
                        .findByTagName('body')
                        .then(function (element) {
                        return session.longTap(element);
                    })
                        .then(works, broken);
                }
                if (capabilities.brokenMoveFinger == null) {
                    testedCapabilities.brokenMoveFinger = session
                        .pressFinger(0, 0)
                        .then(works, function (error) {
                        return (error.name === 'UnknownCommand' ||
                            error.message.indexOf('need to specify the JS') > -1);
                    });
                }
                if (capabilities.brokenTouchScroll == null) {
                    testedCapabilities.brokenTouchScroll = function () {
                        return get(scrollTestUrl)
                            .then(function () {
                            return session.touchScroll(0, 20);
                        })
                            .then(function () {
                            return session.execute('return window.scrollY !== 20;');
                        })
                            .then(function (isBroken) {
                            if (isBroken) {
                                return true;
                            }
                            return session
                                .findById('a')
                                .then(function (element) {
                                return session.touchScroll(element, 0, 0);
                            })
                                .then(function () {
                                return session.execute('return window.scrollY !== 3000;');
                            });
                        })
                            .catch(broken);
                    };
                }
                if (capabilities.brokenFlickFinger == null) {
                    testedCapabilities.brokenFlickFinger = function () {
                        return get(scrollTestUrl)
                            .then(function () {
                            return session.flickFinger(0, 400);
                        })
                            .then(function () {
                            return session.execute('return window.scrollY === 0;');
                        })
                            .catch(broken);
                    };
                }
            }
            if (capabilities.supportsCssTransforms &&
                capabilities.brokenCssTransformedSize == null) {
                testedCapabilities.brokenCssTransformedSize = function () {
                    return get('<!DOCTYPE html><style>#a{width:8px;height:8px;-ms-transform:scale(0.5);-moz-transform:scale(0.5);-webkit-transform:scale(0.5);transform:scale(0.5);}</style><div id="a"></div>')
                        .then(function () {
                        return session
                            .execute('return document.getElementById("a");')
                            .then(function (element) {
                            return element.getSize();
                        })
                            .then(function (dimensions) {
                            return (dimensions.width !== 4 ||
                                dimensions.height !== 4);
                        });
                    })
                        .catch(broken);
                };
            }
            return Task_1.default.all(Object.keys(testedCapabilities).map(function (key) { return testedCapabilities[key]; })).then(function () { return testedCapabilities; });
        };
        if (capabilities._filled) {
            return Task_1.default.resolve(session);
        }
        var promise = isFirefox(capabilities, 49, Infinity)
            ? Task_1.default.resolve(session)
            : session.get('about:blank');
        return promise
            .then(discoverServerFeatures)
            .then(addCapabilities)
            .then(discoverFeatures)
            .then(addCapabilities)
            .then(function () { return session.get('about:blank'); })
            .then(discoverDefects)
            .then(addCapabilities)
            .then(function () { return session.get('about:blank'); })
            .then(function () { return session; });
    };
    Server.prototype.getSessions = function () {
        return this.get('sessions').then(function (sessions) {
            if (sessions && !Array.isArray(sessions)) {
                sessions = returnValue(sessions);
            }
            sessions.forEach(function (session) {
                if (session.sessionId && !session.id) {
                    session.id = session.sessionId;
                }
            });
            return sessions;
        });
    };
    Server.prototype.getSessionCapabilities = function (sessionId) {
        return this.get('session/$0', undefined, [sessionId]).then(returnValue);
    };
    Server.prototype.deleteSession = function (sessionId) {
        return this.delete('session/$0', undefined, [sessionId]).then(noop);
    };
    return Server;
}());
exports.default = Server;
function isMac(capabilities) {
    return (capabilities.platform === 'MAC' && capabilities.platformName !== 'ios');
}
function isMsEdge(capabilities, minOrExactVersion, maxVersion) {
    if (capabilities.browserName !== 'MicrosoftEdge') {
        return false;
    }
    return isValidVersion(capabilities, minOrExactVersion, maxVersion);
}
function isInternetExplorer(capabilities, minOrExactVersion, maxVersion) {
    if (capabilities.browserName !== 'internet explorer') {
        return false;
    }
    return isValidVersion(capabilities, minOrExactVersion, maxVersion);
}
function isSafari(capabilities, minOrExactVersion, maxVersion) {
    if (capabilities.browserName !== 'safari') {
        return false;
    }
    return isValidVersion(capabilities, minOrExactVersion, maxVersion);
}
function isFirefox(capabilities, minOrExactVersion, maxVersion) {
    if (capabilities.browserName !== 'firefox') {
        return false;
    }
    return isValidVersion(capabilities, minOrExactVersion, maxVersion);
}
function isValidVersion(capabilities, minOrExactVersion, maxVersion) {
    if (minOrExactVersion != null) {
        var version = parseFloat((capabilities.version || capabilities.browserVersion));
        if (maxVersion != null) {
            if (version < minOrExactVersion) {
                return false;
            }
            if (version >= maxVersion) {
                return false;
            }
        }
        else if (version !== minOrExactVersion) {
            return false;
        }
    }
    return true;
}
function noop() { }
function returnValue(response) {
    return response.value;
}
//# sourceMappingURL=Server.js.map