"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var util_1 = require("./lib/util");
var Task_1 = require("@dojo/core/async/Task");
var Session_1 = require("./Session");
var Locator_1 = require("./lib/Locator");
var Command = (function (_super) {
    tslib_1.__extends(Command, _super);
    function Command(parentOrSession, initialiser, errback) {
        var _this = _super.call(this) || this;
        var self = _this;
        var session;
        var trace = {};
        function setContext(contextValue) {
            var context;
            if (!Array.isArray(contextValue)) {
                context = [contextValue];
                context.isSingle = true;
            }
            else {
                context = contextValue;
            }
            var parent = parentOrSession;
            if (!('depth' in context)) {
                context.depth = parent ? parent.context.depth + 1 : 0;
            }
            self._context = context;
        }
        function fixStack(error) {
            error.stack = error.stack + util_1.trimStack(trace.stack);
            throw error;
        }
        if (parentOrSession instanceof Command) {
            _this._parent = parentOrSession;
            session = _this._session = parentOrSession.session;
        }
        else if (parentOrSession instanceof Session_1.default) {
            session = _this._session = parentOrSession;
            parentOrSession = null;
        }
        else {
            throw new Error('A parent Command or Session must be provided to a new Command');
        }
        for (var key in session) {
            if (session[key] !== Session_1.default.prototype[key]) {
                Command.addSessionMethod(_this, key, session[key]);
            }
        }
        Error.captureStackTrace(trace, Command);
        var parentCommand = parentOrSession;
        _this._task = (parentCommand
            ? parentCommand.promise
            : Task_1.default.resolve(undefined))
            .then(function (returnValue) {
            self._context = parentCommand
                ? parentCommand.context
                : TOP_CONTEXT;
            return returnValue;
        }, function (error) {
            self._context = parentCommand
                ? parentCommand.context
                : TOP_CONTEXT;
            throw error;
        })
            .then(initialiser &&
            function (returnValue) {
                return Task_1.default.resolve(returnValue)
                    .then(initialiser.bind(self, setContext))
                    .catch(fixStack);
            }, errback &&
            function (error) {
                return Task_1.default.reject(error)
                    .catch(errback.bind(self, setContext))
                    .catch(fixStack);
            });
        return _this;
    }
    Command.addSessionMethod = function (target, key, originalFn) {
        if (key.charAt(0) !== '_' &&
            !target[key] &&
            typeof originalFn === 'function') {
            target[key] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return new this.constructor(this, function (setContext) {
                    var parentContext = this._context;
                    var session = this._session;
                    var promise;
                    var fn = session[key] || originalFn;
                    if (fn.usesElement &&
                        parentContext.length &&
                        (!args[0] || !args[0].elementId)) {
                        args = Array.prototype.slice.call(args, 0);
                        if (parentContext.isSingle) {
                            promise = fn.apply(session, [parentContext[0]].concat(args));
                        }
                        else {
                            promise = Task_1.default.all(parentContext.map(function (element) {
                                return fn.apply(session, [element].concat(args));
                            }));
                        }
                    }
                    else {
                        promise = fn.apply(session, args);
                    }
                    if (fn.createsContext) {
                        promise = promise.then(function (newContext) {
                            setContext(newContext);
                            return newContext;
                        });
                    }
                    return promise;
                });
            };
        }
    };
    Command.addElementMethod = function (target, key) {
        var anyTarget = target;
        if (key.charAt(0) !== '_') {
            var targetKey = key + (anyTarget[key] ? 'Element' : '');
            anyTarget[targetKey] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return new this.constructor(this, function (setContext) {
                    var parentContext = this._context;
                    var promise;
                    var fn = parentContext[0] && parentContext[0][key];
                    if (parentContext.isSingle) {
                        promise = fn.apply(parentContext[0], args);
                    }
                    else {
                        promise = Task_1.default.all(parentContext.map(function (element) {
                            return element[key].apply(element, args);
                        }));
                    }
                    if (fn && fn.createsContext) {
                        promise = promise.then(function (newContext) {
                            setContext(newContext);
                            return newContext;
                        });
                    }
                    return promise;
                });
            };
        }
    };
    Object.defineProperty(Command.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Command.prototype, "session", {
        get: function () {
            return this._session;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Command.prototype, "context", {
        get: function () {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Command.prototype, "promise", {
        get: function () {
            return this._task;
        },
        enumerable: true,
        configurable: true
    });
    Command.prototype.sleep = function (ms) {
        return new this.constructor(this, function () {
            return util_1.sleep(ms);
        });
    };
    Command.prototype.end = function (numCommandsToPop) {
        if (numCommandsToPop === void 0) { numCommandsToPop = 1; }
        return new this.constructor(this, function (setContext) {
            var command = this;
            var depth = this.context.depth;
            while (depth && numCommandsToPop && (command = command.parent)) {
                if (command.context.depth != null &&
                    command.context.depth < depth) {
                    --numCommandsToPop;
                    depth = command.context.depth;
                }
            }
            setContext(command.context);
        });
    };
    Command.prototype.then = function (callback, errback) {
        function runCallback(command, callback, value, setContext) {
            var returnValue = callback.call(command, value, setContext);
            if (returnValue instanceof Command) {
                var maybeCommand = returnValue;
                do {
                    if (maybeCommand === command) {
                        throw new Error('Deadlock: do not use `return this` from a Command callback');
                    }
                } while ((maybeCommand = getParent(maybeCommand)));
            }
            return returnValue;
        }
        return new this.constructor(this, callback
            ? function (setContext, value) {
                return runCallback(this, callback, value, setContext);
            }
            : undefined, errback
            ? function (setContext, value) {
                return runCallback(this, errback, value, setContext);
            }
            : undefined);
    };
    Command.prototype.catch = function (errback) {
        return this.then(null, errback);
    };
    Command.prototype.finally = function (callback) {
        this._task = this._task.finally(callback);
        return this;
    };
    Command.prototype.cancel = function () {
        this._task.cancel();
        return this;
    };
    Command.prototype.find = function (strategy, value) {
        return this._callFindElementMethod('find', strategy, value);
    };
    Command.prototype.findAll = function (strategy, value) {
        return this._callFindElementMethod('findAll', strategy, value);
    };
    Command.prototype.findDisplayed = function (strategy, value) {
        return this._callFindElementMethod('findDisplayed', strategy, value);
    };
    Command.prototype._callFindElementMethod = function (method, strategy, value) {
        return new this.constructor(this, function (setContext) {
            var parentContext = this._context;
            var task;
            if (parentContext.length && parentContext.isSingle) {
                task = parentContext[0][method](strategy, value);
            }
            else if (parentContext.length) {
                task = Task_1.default.all(parentContext.map(function (element) {
                    return element[method](strategy, value);
                })).then(function (elements) { return Array.prototype.concat.apply([], elements); });
            }
            else {
                task = this.session[method](strategy, value);
            }
            return task.then(function (newContext) {
                setContext(newContext);
                return newContext;
            });
        });
    };
    Command.prototype._callElementMethod = function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return new this.constructor(this, function (setContext) {
            var parentContext = this._context;
            var task;
            var fn = parentContext[0] && parentContext[0][method];
            if (parentContext.isSingle) {
                task = fn.apply(parentContext[0], args);
            }
            else {
                task = Task_1.default.all(parentContext.map(function (element) {
                    return element[method].apply(element, args);
                })).then(function (values) { return Array.prototype.concat.apply([], values); });
            }
            if (fn && fn.createsContext) {
                task = task.then(function (newContext) {
                    setContext(newContext);
                    return newContext;
                });
            }
            return task;
        });
    };
    Command.prototype._callSessionMethod = function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return new this.constructor(this, function (setContext) {
            var parentContext = this._context;
            var session = this._session;
            var task;
            var sessionMethod = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return session[method].apply(session, args);
            };
            if (session[method].usesElement &&
                parentContext.length &&
                (!args[0] || !args[0].elementId)) {
                if (parentContext.isSingle) {
                    task = sessionMethod.apply(void 0, [parentContext[0]].concat(args));
                }
                else {
                    task = Task_1.default.all(parentContext.map(function (element) {
                        return sessionMethod.apply(void 0, [element].concat(args));
                    })).then(function (values) { return Array.prototype.concat.apply([], values); });
                }
            }
            else {
                task = sessionMethod.apply(void 0, args);
            }
            if (session[method].createsContext) {
                task = task.then(function (newContext) {
                    setContext(newContext);
                    return newContext;
                });
            }
            return task;
        });
    };
    Command.prototype.getTimeout = function (type) {
        return this._callSessionMethod('getTimeout', type);
    };
    Command.prototype.setTimeout = function (type, ms) {
        return this._callSessionMethod('setTimeout', type, ms);
    };
    Command.prototype.getCurrentWindowHandle = function () {
        return this._callSessionMethod('getCurrentWindowHandle');
    };
    Command.prototype.getAllWindowHandles = function () {
        return this._callSessionMethod('getAllWindowHandles');
    };
    Command.prototype.getCurrentUrl = function () {
        return this._callSessionMethod('getCurrentUrl');
    };
    Command.prototype.get = function (url) {
        return this._callSessionMethod('get', url);
    };
    Command.prototype.goForward = function () {
        return this._callSessionMethod('goForward');
    };
    Command.prototype.goBack = function () {
        return this._callSessionMethod('goBack');
    };
    Command.prototype.refresh = function () {
        return this._callSessionMethod('refresh');
    };
    Command.prototype.execute = function (script, args) {
        return this._callSessionMethod('execute', script, args);
    };
    Command.prototype.executeAsync = function (script, args) {
        return this._callSessionMethod('executeAsync', script, args);
    };
    Command.prototype.takeScreenshot = function () {
        return this._callSessionMethod('takeScreenshot');
    };
    Command.prototype.getAvailableImeEngines = function () {
        return this._callSessionMethod('getAvailableImeEngines');
    };
    Command.prototype.getActiveImeEngine = function () {
        return this._callSessionMethod('getActiveImeEngine');
    };
    Command.prototype.isImeActivated = function () {
        return this._callSessionMethod('isImeActivated');
    };
    Command.prototype.deactivateIme = function () {
        return this._callSessionMethod('deactivateIme');
    };
    Command.prototype.activateIme = function (engine) {
        return this._callSessionMethod('activateIme', engine);
    };
    Command.prototype.switchToFrame = function (id) {
        return this._callSessionMethod('switchToFrame', id);
    };
    Command.prototype.switchToWindow = function (handle) {
        return this._callSessionMethod('switchToWindow', handle);
    };
    Command.prototype.switchToParentFrame = function () {
        return this._callSessionMethod('switchToParentFrame');
    };
    Command.prototype.closeCurrentWindow = function () {
        return this._callSessionMethod('closeCurrentWindow');
    };
    Command.prototype.setWindowSize = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this._callSessionMethod.apply(this, ['setWindowSize'].concat(args));
    };
    Command.prototype.getWindowSize = function (_windowHandle) {
        return this._callSessionMethod('getWindowSize');
    };
    Command.prototype.setWindowPosition = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this._callSessionMethod.apply(this, ['setWindowPosition'].concat(args));
    };
    Command.prototype.getWindowPosition = function (windowHandle) {
        return this._callSessionMethod('getWindowPosition', windowHandle);
    };
    Command.prototype.maximizeWindow = function (windowHandle) {
        return this._callSessionMethod('maximizeWindow', windowHandle);
    };
    Command.prototype.getCookies = function () {
        return this._callSessionMethod('getCookies');
    };
    Command.prototype.setCookie = function (cookie) {
        return this._callSessionMethod('setCookie', cookie);
    };
    Command.prototype.clearCookies = function () {
        return this._callSessionMethod('clearCookies');
    };
    Command.prototype.deleteCookie = function (name) {
        return this._callSessionMethod('deleteCookie', name);
    };
    Command.prototype.getPageSource = function () {
        return this._callSessionMethod('getPageSource');
    };
    Command.prototype.getPageTitle = function () {
        return this._callSessionMethod('getPageTitle');
    };
    Command.prototype.getActiveElement = function () {
        return this._callSessionMethod('getActiveElement');
    };
    Command.prototype.pressKeys = function (keys) {
        return this._callSessionMethod('pressKeys', keys);
    };
    Command.prototype.getOrientation = function () {
        return this._callSessionMethod('getOrientation');
    };
    Command.prototype.setOrientation = function (orientation) {
        return this._callSessionMethod('setOrientation', orientation);
    };
    Command.prototype.getAlertText = function () {
        return this._callSessionMethod('getAlertText');
    };
    Command.prototype.typeInPrompt = function (text) {
        return this._callSessionMethod('typeInPrompt', text);
    };
    Command.prototype.acceptAlert = function () {
        return this._callSessionMethod('acceptAlert');
    };
    Command.prototype.dismissAlert = function () {
        return this._callSessionMethod('dismissAlert');
    };
    Command.prototype.moveMouseTo = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this._callSessionMethod.apply(this, ['moveMouseTo'].concat(args));
    };
    Command.prototype.clickMouseButton = function (button) {
        return this._callSessionMethod('clickMouseButton', button);
    };
    Command.prototype.pressMouseButton = function (button) {
        return this._callSessionMethod('pressMouseButton', button);
    };
    Command.prototype.releaseMouseButton = function (button) {
        return this._callSessionMethod('releaseMouseButton', button);
    };
    Command.prototype.doubleClick = function () {
        return this._callSessionMethod('doubleClick');
    };
    Command.prototype.tap = function (element) {
        return this._callSessionMethod('tap', element);
    };
    Command.prototype.pressFinger = function (x, y) {
        return this._callSessionMethod('pressFinger', x, y);
    };
    Command.prototype.releaseFinger = function (x, y) {
        return this._callSessionMethod('releaseFinger', x, y);
    };
    Command.prototype.moveFinger = function (x, y) {
        return this._callSessionMethod('moveFinger', x, y);
    };
    Command.prototype.touchScroll = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this._callSessionMethod.apply(this, ['touchScroll'].concat(args));
    };
    Command.prototype.doubleTap = function (element) {
        return this._callSessionMethod('doubleTap', element);
    };
    Command.prototype.longTap = function (element) {
        return this._callSessionMethod('longTap', element);
    };
    Command.prototype.flickFinger = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return this._callSessionMethod.apply(this, ['flickFinger'].concat(args));
    };
    Command.prototype.getGeolocation = function () {
        return this._callSessionMethod('getGeolocation');
    };
    Command.prototype.setGeolocation = function (location) {
        return this._callSessionMethod('setGeolocation', location);
    };
    Command.prototype.getLogsFor = function (type) {
        return this._callSessionMethod('getLogsFor', type);
    };
    Command.prototype.getAvailableLogTypes = function () {
        return this._callSessionMethod('getAvailableLogTypes');
    };
    Command.prototype.getApplicationCacheStatus = function () {
        return this._callSessionMethod('getApplicationCacheStatus');
    };
    Command.prototype.quit = function () {
        return this._callSessionMethod('quit');
    };
    Command.prototype.waitForDeleted = function (using, value) {
        return this._callSessionMethod('waitForDeleted', using, value);
    };
    Command.prototype.getExecuteAsyncTimeout = function () {
        return this._callSessionMethod('getExecuteAsyncTimeout');
    };
    Command.prototype.setExecuteAsyncTimeout = function (ms) {
        return this._callSessionMethod('setExecuteAsyncTimeout', ms);
    };
    Command.prototype.getFindTimeout = function () {
        return this._callSessionMethod('getFindTimeout');
    };
    Command.prototype.setFindTimeout = function (ms) {
        return this._callSessionMethod('setFindTimeout', ms);
    };
    Command.prototype.getPageLoadTimeout = function () {
        return this._callSessionMethod('getPageLoadTimeout');
    };
    Command.prototype.setPageLoadTimeout = function (ms) {
        return this._callSessionMethod('setPageLoadTimeout', ms);
    };
    Command.prototype.click = function () {
        return this._callElementMethod('click');
    };
    Command.prototype.submit = function () {
        return this._callElementMethod('submit');
    };
    Command.prototype.getVisibleText = function () {
        return this._callElementMethod('getVisibleText');
    };
    Command.prototype.type = function (value) {
        return this._callElementMethod('type', value);
    };
    Command.prototype.getTagName = function () {
        return this._callElementMethod('getTagName');
    };
    Command.prototype.clearValue = function () {
        return this._callElementMethod('clearValue');
    };
    Command.prototype.isSelected = function () {
        return this._callElementMethod('isSelected');
    };
    Command.prototype.isEnabled = function () {
        return this._callElementMethod('isEnabled');
    };
    Command.prototype.getSpecAttribute = function (name) {
        return this._callElementMethod('getSpecAttribute', name);
    };
    Command.prototype.getAttribute = function (name) {
        return this._callElementMethod('getAttribute', name);
    };
    Command.prototype.getProperty = function (name) {
        return this._callElementMethod('getProperty', name);
    };
    Command.prototype.equals = function (other) {
        return this._callElementMethod('equals', other);
    };
    Command.prototype.isDisplayed = function () {
        return this._callElementMethod('isDisplayed');
    };
    Command.prototype.getPosition = function () {
        return this._callElementMethod('getPosition');
    };
    Command.prototype.getSize = function () {
        return this._callElementMethod('getSize');
    };
    Command.prototype.getComputedStyle = function (propertyName) {
        return this._callElementMethod('getComputedStyle', propertyName);
    };
    return Command;
}(Locator_1.default));
exports.default = Command;
var TOP_CONTEXT = [];
TOP_CONTEXT.isSingle = true;
TOP_CONTEXT.depth = 0;
var chaiAsPromised = null;
try {
    chaiAsPromised = require('chai-as-promised');
}
catch (error) { }
if (chaiAsPromised) {
    chaiAsPromised.transferPromiseness = function (assertion, promise) {
        assertion.then = promise.then.bind(promise);
        for (var method in promise) {
            if (typeof promise[method] === 'function') {
                assertion[method] = promise[method].bind(promise);
            }
        }
    };
}
function getParent(value) {
    return value && value.parent;
}
//# sourceMappingURL=Command.js.map