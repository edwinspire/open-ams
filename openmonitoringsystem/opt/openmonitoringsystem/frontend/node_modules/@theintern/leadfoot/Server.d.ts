import Task from '@dojo/core/async/Task';
import { RequestOptions } from '@dojo/core/request';
import { NodeRequestOptions } from '@dojo/core/request/providers/node';
import Session from './Session';
import { Capabilities, LeadfootURL } from './interfaces';
export default class Server {
    url: string;
    requestOptions: RequestOptions;
    sessionConstructor: typeof Session;
    fixSessionCapabilities: boolean | 'no-detect';
    constructor(url: string | LeadfootURL, options?: NodeRequestOptions);
    private _sendRequest<T>(method, path, requestData, pathParts?);
    get<T>(path: string, requestData?: Object, pathParts?: string[]): Task<T>;
    post<T>(path: string, requestData?: Object, pathParts?: string[]): Task<T>;
    delete<T>(path: string, requestData?: Object, pathParts?: string[]): Task<T>;
    getStatus(): Task<any>;
    createSession<S extends Session = Session>(desiredCapabilities: Capabilities, requiredCapabilities?: Capabilities): Task<S>;
    private _fillCapabilities<S>(session, detectCapabilities?);
    private _getKnownCapabilities(session);
    private _detectCapabilities(session);
    getSessions(): Task<Session[]>;
    getSessionCapabilities(sessionId: string): Task<Capabilities>;
    deleteSession(sessionId: string): Task<void>;
}
export declare type Method = 'post' | 'get' | 'delete';
