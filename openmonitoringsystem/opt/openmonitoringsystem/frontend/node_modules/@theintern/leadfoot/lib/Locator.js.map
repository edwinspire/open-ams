{"version":3,"file":"Locator.js","sourceRoot":"","sources":["../../../src/lib/Locator.ts"],"names":[],"mappings":";;;AAYA;IAAA;IAgVA,CAAC;IAjUA,iCAAe,GAAf,UAAgB,SAAiB;QAChC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IAC3C,CAAC;IAQD,mCAAiB,GAAjB,UAAkB,QAAgB;QACjC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IAC5C,CAAC;IAOD,0BAAQ,GAAR,UAAS,EAAU;QAClB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAC5B,CAAC;IAQD,4BAAU,GAAV,UAAW,IAAY;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAChC,CAAC;IAQD,gCAAc,GAAd,UAAe,IAAY;QAC1B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;IAQD,uCAAqB,GAArB,UAAsB,IAAY;QACjC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAQD,+BAAa,GAAb,UAAc,OAAe;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IAQD,6BAAW,GAAX,UAAY,IAAY;QACvB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;IAOD,oCAAkB,GAAlB,UAAmB,SAAiB;QACnC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IAC9C,CAAC;IAOD,sCAAoB,GAApB,UAAqB,QAAgB;QACpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAOD,+BAAa,GAAb,UAAc,IAAY;QACzB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;IAQD,mCAAiB,GAAjB,UAAkB,IAAY;QAC7B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC;IAQD,0CAAwB,GAAxB,UAAyB,IAAY;QACpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAOD,kCAAgB,GAAhB,UAAiB,OAAe;QAC/B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAOD,gCAAc,GAAd,UAAe,IAAY;QAC1B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC;IAWD,0CAAwB,GAAxB,UAAyB,SAAiB;QACzC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IACpD,CAAC;IAWD,4CAA0B,GAA1B,UAA2B,QAAgB;QAC1C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IACrD,CAAC;IAWD,mCAAiB,GAAjB,UAAkB,EAAU;QAC3B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACrC,CAAC;IAWD,qCAAmB,GAAnB,UAAoB,IAAY;QAC/B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;IAWD,yCAAuB,GAAvB,UAAwB,IAAY;QACnC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC;IAWD,gDAA8B,GAA9B,UAA+B,IAAY;QAC1C,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IACtD,CAAC;IAWD,wCAAsB,GAAtB,UAAuB,OAAe;QACrC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAChD,CAAC;IAWD,sCAAoB,GAApB,UAAqB,IAAY;QAChC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAQD,2CAAyB,GAAzB,UAA0B,SAAiB;QAC1C,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;IACrD,CAAC;IAQD,6CAA2B,GAA3B,UAA4B,QAAgB;QAC3C,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;IAQD,oCAAkB,GAAlB,UAAmB,EAAU;QAC5B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACtC,CAAC;IAQD,sCAAoB,GAApB,UAAqB,IAAY;QAChC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAQD,0CAAwB,GAAxB,UAAyB,IAAY;QACpC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;IAQD,iDAA+B,GAA/B,UAAgC,IAAY;QAC3C,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC;IAQD,yCAAuB,GAAvB,UAAwB,OAAe;QACtC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACjD,CAAC;IAQD,uCAAqB,GAArB,UAAsB,IAAY;QACjC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;IACF,cAAC;AAAD,CAAC,AAhVD,IAgVC;AAED,kBAAe,OAAO,CAAC;AAEV,QAAA,aAAa,GAAG;IAC5B,cAAc,EAAE,IAAI;IACpB,WAAW,EAAE,IAAI;IACjB,mBAAmB,EAAE,IAAI;IACzB,KAAK,EAAE,IAAI;CACX,CAAC;AASW,QAAA,UAAU,wBACnB,qBAAa,IAChB,YAAY,EAAE,IAAI,EAClB,EAAE,EAAE,IAAI,EACR,IAAI,EAAE,IAAI,EACV,mBAAmB,EAAE,IAAI,EACzB,UAAU,EAAE,IAAI,IACf;AAIF,sBAA6B,KAAe,EAAE,KAAa;IAC1D,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACf,KAAK,IAAI;YACR,KAAK,GAAG,cAAc,CAAC;YACvB,KAAK,GAAG,MAAI,KAAO,CAAC;YACpB,KAAK,CAAC;QACP,KAAK,YAAY;YAChB,KAAK,GAAG,cAAc,CAAC;YACvB,KAAK,GAAG,MAAI,KAAO,CAAC;YACpB,KAAK,CAAC;QACP,KAAK,MAAM;YACV,KAAK,GAAG,cAAc,CAAC;YACvB,KAAK,GAAG,aAAU,KAAK,QAAI,CAAC;YAC5B,KAAK,CAAC;QACP,KAAK,UAAU;YACd,KAAK,GAAG,cAAc,CAAC;YACvB,KAAK,CAAC;IACR,CAAC;IAED,MAAM,CAAC,EAAE,KAAK,OAAA,EAAE,KAAK,OAAA,EAAE,CAAC;AACzB,CAAC;AApBD,oCAoBC","sourcesContent":["/**\n * Locator is a class that supports searching for specific element (E), list\n * (L), and void (V) types by various strategies.\n *\n * Note that this class includes JSONWireProtocol strategies. W3C Webdriver\n * only understands 4 strategies:\n *\n * 1. css selector\n * 2. link text\n * 3. partial link text\n * 4. xpath\n */\nabstract class Locator<E, L, V> {\n\tabstract find(strategy: Strategy, value: string): E;\n\n\tabstract findAll(strategy: Strategy, value: string): L;\n\n\tabstract findDisplayed(strategy: Strategy, value: string): E;\n\n\tabstract waitForDeleted(strategy: Strategy, value: string): V;\n\n\t/**\n\t * Gets the first element inside this element matching the given CSS class\n\t * name.\n\t *\n\t * @param className The CSS class name to search for.\n\t */\n\tfindByClassName(className: string) {\n\t\treturn this.find('class name', className);\n\t}\n\n\t/**\n\t * Gets the first element inside this element matching the given CSS\n\t * selector.\n\t *\n\t * @param selector The CSS selector to search for.\n\t */\n\tfindByCssSelector(selector: string) {\n\t\treturn this.find('css selector', selector);\n\t}\n\n\t/**\n\t * Gets the first element inside this element matching the given ID.\n\t *\n\t * @param id The ID of the element.\n\t */\n\tfindById(id: string) {\n\t\treturn this.find('id', id);\n\t}\n\n\t/**\n\t * Gets the first element inside this element matching the given name\n\t * attribute.\n\t *\n\t * @param name The name of the element.\n\t */\n\tfindByName(name: string) {\n\t\treturn this.find('name', name);\n\t}\n\n\t/**\n\t * Gets the first element inside this element matching the given\n\t * case-insensitive link text.\n\t *\n\t * @param text The link text of the element.\n\t */\n\tfindByLinkText(text: string) {\n\t\treturn this.find('link text', text);\n\t}\n\n\t/**\n\t * Gets the first element inside this element partially matching the given\n\t * case-insensitive link text.\n\t *\n\t * @param text The partial link text of the element.\n\t */\n\tfindByPartialLinkText(text: string) {\n\t\treturn this.find('partial link text', text);\n\t}\n\n\t/**\n\t * Gets the first element inside this element matching the given HTML tag\n\t * name.\n\t *\n\t * @param tagName The tag name of the element.\n\t */\n\tfindByTagName(tagName: string) {\n\t\treturn this.find('tag name', tagName);\n\t}\n\n\t/**\n\t * Gets the first element inside this element matching the given XPath\n\t * selector.\n\t *\n\t * @param path The XPath selector to search for.\n\t */\n\tfindByXpath(path: string) {\n\t\treturn this.find('xpath', path);\n\t}\n\n\t/**\n\t * Gets all elements inside this element matching the given CSS class name.\n\t *\n\t * @param className The CSS class name to search for.\n\t */\n\tfindAllByClassName(className: string) {\n\t\treturn this.findAll('class name', className);\n\t}\n\n\t/**\n\t * Gets all elements inside this element matching the given CSS selector.\n\t *\n\t * @param selector The CSS selector to search for.\n\t */\n\tfindAllByCssSelector(selector: string) {\n\t\treturn this.findAll('css selector', selector);\n\t}\n\n\t/**\n\t * Gets all elements inside this element matching the given name attribute.\n\t *\n\t * @param name The name of the element.\n\t */\n\tfindAllByName(name: string) {\n\t\treturn this.findAll('name', name);\n\t}\n\n\t/**\n\t * Gets all elements inside this element matching the given\n\t * case-insensitive link text.\n\t *\n\t * @param text The link text of the element.\n\t */\n\tfindAllByLinkText(text: string) {\n\t\treturn this.findAll('link text', text);\n\t}\n\n\t/**\n\t * Gets all elements inside this element partially matching the given\n\t * case-insensitive link text.\n\t *\n\t * @param text The partial link text of the element.\n\t */\n\tfindAllByPartialLinkText(text: string) {\n\t\treturn this.findAll('partial link text', text);\n\t}\n\n\t/**\n\t * Gets all elements inside this element matching the given HTML tag name.\n\t *\n\t * @param tagName The tag name of the element.\n\t */\n\tfindAllByTagName(tagName: string) {\n\t\treturn this.findAll('tag name', tagName);\n\t}\n\n\t/**\n\t * Gets all elements inside this element matching the given XPath selector.\n\t *\n\t * @param path The XPath selector to search for.\n\t */\n\tfindAllByXpath(path: string) {\n\t\treturn this.findAll('xpath', path);\n\t}\n\n\t/**\n\t * Gets the first [[Element.isDisplayed|displayed]] element inside this\n\t * element matching the given CSS class name. This is inherently slower\n\t * than [[Element.find]], so should only be used in cases where the\n\t * visibility of an element cannot be ensured in advance.\n\t *\n\t * @since 1.6\n\t * @param className The CSS class name to search for.\n\t */\n\tfindDisplayedByClassName(className: string) {\n\t\treturn this.findDisplayed('class name', className);\n\t}\n\n\t/**\n\t * Gets the first [[Element.isDisplayed|displayed]] element inside this\n\t * element matching the given CSS selector. This is inherently slower than\n\t * [[Element.find]], so should only be used in cases where the visibility\n\t * of an element cannot be ensured in advance.\n\t *\n\t * @since 1.6\n\t * @param selector The CSS selector to search for.\n\t */\n\tfindDisplayedByCssSelector(selector: string) {\n\t\treturn this.findDisplayed('css selector', selector);\n\t}\n\n\t/**\n\t * Gets the first [[Element.isDisplayed|displayed]] element inside this\n\t * element matching the given ID. This is inherently slower than\n\t * [[Element.find]], so should only be used in cases where the visibility\n\t * of an element cannot be ensured in advance.\n\t *\n\t * @since 1.6\n\t * @param id The ID of the element.\n\t */\n\tfindDisplayedById(id: string) {\n\t\treturn this.findDisplayed('id', id);\n\t}\n\n\t/**\n\t * Gets the first [[Element.isDisplayed|displayed]] element inside this\n\t * element matching the given name attribute. This is inherently slower\n\t * than [[Element.find]], so should only be used in cases where the\n\t * visibility of an element cannot be ensured in advance.\n\t *\n\t * @since 1.6\n\t * @param name The name of the element.\n\t */\n\tfindDisplayedByName(name: string) {\n\t\treturn this.findDisplayed('name', name);\n\t}\n\n\t/**\n\t * Gets the first [[Element.isDisplayed|displayed]] element inside this\n\t * element matching the given case-insensitive link text. This is\n\t * inherently slower than [[Element.find]], so should only be used in cases\n\t * where the visibility of an element cannot be ensured in advance.\n\t *\n\t * @since 1.6\n\t * @param text The link text of the element.\n\t */\n\tfindDisplayedByLinkText(text: string) {\n\t\treturn this.findDisplayed('link text', text);\n\t}\n\n\t/**\n\t * Gets the first [[Element.isDisplayed|displayed]] element inside this\n\t * element partially matching the given case-insensitive link text. This is\n\t * inherently slower than [[Element.find]], so should only be used in cases\n\t * where the visibility of an element cannot be ensured in advance.\n\t *\n\t * @since 1.6\n\t * @param text The partial link text of the element.\n\t */\n\tfindDisplayedByPartialLinkText(text: string) {\n\t\treturn this.findDisplayed('partial link text', text);\n\t}\n\n\t/**\n\t * Gets the first [[Element.isDisplayed|displayed]] element inside this\n\t * element matching the given HTML tag name. This is inherently slower than\n\t * [[Element.find]], so should only be used in cases where the visibility\n\t * of an element cannot be ensured in advance.\n\t *\n\t * @since 1.6\n\t * @param tagName The tag name of the element.\n\t */\n\tfindDisplayedByTagName(tagName: string) {\n\t\treturn this.findDisplayed('tag name', tagName);\n\t}\n\n\t/**\n\t * Gets the first [[Element.isDisplayed|displayed]] element inside this\n\t * element matching the given XPath selector. This is inherently slower\n\t * than [[Element.find]], so should only be used in cases where the\n\t * visibility of an element cannot be ensured in advance.\n\t *\n\t * @since 1.6\n\t * @param path The XPath selector to search for.\n\t */\n\tfindDisplayedByXpath(path: string) {\n\t\treturn this.findDisplayed('xpath', path);\n\t}\n\n\t/**\n\t * Waits for all elements inside this element matching the given CSS class\n\t * name to be destroyed.\n\t *\n\t * @param className The CSS class name to search for.\n\t */\n\twaitForDeletedByClassName(className: string) {\n\t\treturn this.waitForDeleted('class name', className);\n\t}\n\n\t/**\n\t * Waits for all elements inside this element matching the given CSS\n\t * selector to be destroyed.\n\t *\n\t * @param selector The CSS selector to search for.\n\t */\n\twaitForDeletedByCssSelector(selector: string) {\n\t\treturn this.waitForDeleted('css selector', selector);\n\t}\n\n\t/**\n\t * Waits for all elements inside this element matching the given ID to be\n\t * destroyed.\n\t *\n\t * @param id The ID of the element.\n\t */\n\twaitForDeletedById(id: string) {\n\t\treturn this.waitForDeleted('id', id);\n\t}\n\n\t/**\n\t * Waits for all elements inside this element matching the given name\n\t * attribute to be destroyed.\n\t *\n\t * @param name The name of the element.\n\t */\n\twaitForDeletedByName(name: string) {\n\t\treturn this.waitForDeleted('name', name);\n\t}\n\n\t/**\n\t * Waits for all elements inside this element matching the given\n\t * case-insensitive link text to be destroyed.\n\t *\n\t * @param text The link text of the element.\n\t */\n\twaitForDeletedByLinkText(text: string) {\n\t\treturn this.waitForDeleted('link text', text);\n\t}\n\n\t/**\n\t * Waits for all elements inside this element partially matching the given\n\t * case-insensitive link text to be destroyed.\n\t *\n\t * @param text The partial link text of the element.\n\t */\n\twaitForDeletedByPartialLinkText(text: string) {\n\t\treturn this.waitForDeleted('partial link text', text);\n\t}\n\n\t/**\n\t * Waits for all elements inside this element matching the given HTML tag\n\t * name to be destroyed.\n\t *\n\t * @param tagName The tag name of the element.\n\t */\n\twaitForDeletedByTagName(tagName: string) {\n\t\treturn this.waitForDeleted('tag name', tagName);\n\t}\n\n\t/**\n\t * Waits for all elements inside this element matching the given XPath\n\t * selector to be destroyed.\n\t *\n\t * @param path The XPath selector to search for.\n\t */\n\twaitForDeletedByXpath(path: string) {\n\t\treturn this.waitForDeleted('xpath', path);\n\t}\n}\n\nexport default Locator;\n\nexport const w3cStrategies = {\n\t'css selector': true,\n\t'link text': true,\n\t'partial link text': true,\n\txpath: true\n};\n\nexport type W3cStrategy = keyof typeof w3cStrategies;\n\nexport interface W3cLocator {\n\tusing: W3cStrategy;\n\tvalue: string;\n}\n\nexport const strategies = {\n\t...w3cStrategies,\n\t'class name': true,\n\tid: true,\n\tname: true,\n\t'partial link text': true,\n\t'tag name': true\n};\n\nexport type Strategy = keyof typeof strategies;\n\nexport function toW3cLocator(using: Strategy, value: string): W3cLocator {\n\tswitch (using) {\n\t\tcase 'id':\n\t\t\tusing = 'css selector';\n\t\t\tvalue = `#${value}`;\n\t\t\tbreak;\n\t\tcase 'class name':\n\t\t\tusing = 'css selector';\n\t\t\tvalue = `.${value}`;\n\t\t\tbreak;\n\t\tcase 'name':\n\t\t\tusing = 'css selector';\n\t\t\tvalue = `[name=\"${value}\"]`;\n\t\t\tbreak;\n\t\tcase 'tag name':\n\t\t\tusing = 'css selector';\n\t\t\tbreak;\n\t}\n\n\treturn { using, value };\n}\n"]}