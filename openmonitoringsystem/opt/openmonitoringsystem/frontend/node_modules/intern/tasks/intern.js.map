{"version":3,"file":"intern.js","sourceRoot":"","sources":["../../../src/tasks/intern.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,4CAAuC;IAEvC,8CAAyC;IAEzC,yCAA6C;IA+B7C,6BACC,OAAoB;QAKpB,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,gBAAS,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,EAAU;oBAAR,kBAAM;gBAClD,IAAM,IAAI,wBAAQ,OAAO,CAAE,CAAC;gBAC5B,OAAO,IAAI,CAAC,MAAM,CAAC;gBACnB,MAAM,CAAC,EAAE,MAAM,QAAA,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAClC,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;IACjD,CAAC;IA5CD,OAAS,UAAS,KAAa;QAC9B,KAAK,CAAC,iBAAiB,CAAC,QAAQ,EAAE;YACjC,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;YAC1B,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAc,EAAE,CAAC,CAAC;YAG9C,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,MAAM,CAAC;YAEjC,mBAAmB,CAAC,OAAO,CAAC;iBAC1B,IAAI,CAAC,UAAC,EAAmB;oBAAjB,kBAAM,EAAE,oBAAO;gBACvB,IAAM,MAAM,GAAG,CAAC,gBAAM,CAAC,MAAM,GAAG,IAAI,cAAI,EAAE,CAAC,CAAC;gBAC5C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBACzB,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;gBAE1B,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;YACrB,CAAC,CAAC;iBACD,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAEvB,gBAAgB,KAAW;gBAC1B,gBAAM,CAAC,MAAM,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,KAAK,CAAC,CAAC;YACb,CAAC;QACF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC","sourcesContent":["import global from '@dojo/shim/global';\n\nimport Node from '../lib/executors/Node';\nimport { Config } from '../lib/common/config';\nimport { getConfig } from '../lib/node/util';\n\nexport = function(grunt: IGrunt) {\n\tgrunt.registerMultiTask('intern', function() {\n\t\tconst done = this.async();\n\t\tconst options = this.options<TaskOptions>({});\n\n\t\t// Force colored output for istanbul report\n\t\tprocess.env.FORCE_COLOR = 'true';\n\n\t\tgetConfigAndOptions(options)\n\t\t\t.then(({ config, options }) => {\n\t\t\t\tconst intern = (global.intern = new Node());\n\t\t\t\tintern.configure(config);\n\t\t\t\tintern.configure(options);\n\n\t\t\t\treturn intern.run();\n\t\t\t})\n\t\t\t.then(finish, finish);\n\n\t\tfunction finish(error?: any) {\n\t\t\tglobal.intern = null;\n\t\t\tdone(error);\n\t\t}\n\t});\n};\n\ninterface TaskOptions extends grunt.task.ITaskOptions, Partial<Config> {\n\t[key: string]: any;\n}\n\nfunction getConfigAndOptions(\n\toptions: TaskOptions\n): Promise<{\n\tconfig: Partial<Config>;\n\toptions: TaskOptions;\n}> {\n\tif (options.config) {\n\t\treturn getConfig(options.config, []).then(({ config }) => {\n\t\t\tconst opts = { ...options };\n\t\t\tdelete opts.config;\n\t\t\treturn { config, options: opts };\n\t\t});\n\t}\n\n\treturn Promise.resolve({ config: {}, options });\n}\n"]}