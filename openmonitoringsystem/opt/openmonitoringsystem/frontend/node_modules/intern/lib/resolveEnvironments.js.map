{"version":3,"file":"resolveEnvironments.js","sourceRoot":"","sources":["../../../src/lib/resolveEnvironments.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,wCAAwC;IAGxC,6CAAwC;IAWxC,6BACC,YAAoC,EACpC,YAAkC,EAClC,SAAmC;QAInC,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,UAAA,WAAW;YAC1C,IAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAC/C,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;QAGH,IAAM,gBAAgB,GAAG,kBAAkB,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;QAGxE,IAAM,oBAAoB,GAAG,gBAAgB,CAAC,GAAG,CAAC,UAAS,WAAW;YACrE,IAAM,OAAO,GAAG,eAAe,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YACxD,IAAI,OAAO,IAAI,IAAI,EAAE;gBACpB,OAAO,WAAW,CAAC;aACnB;YACD,OAAO,YAAK,CAAC,EAAE,EAAE,WAAW,EAAE,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAGH,OAAO,kBAAkB,CAAC,EAAE,EAAE,oBAAoB,CAAC,CAAC,GAAG,CAAC,UACvD,WAAW;YAGX,OAAO,IAAI,qBAAW,CAAC,WAAW,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACJ,CAAC;IA/BD,sCA+BC;IAiBD,4BACC,IAAY,EACZ,KAAa,EACb,iBAA2B;QAE3B,IACC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtC,iBAAiB,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EACtC;YACD,MAAM,IAAI,KAAK,CACd,oBAAoB,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG,iBAAiB,CAC9D,CAAC;SACF;QACD,OAAO,iBAAiB,CAAC,MAAM,CAAC,UAAS,OAAO;YAC/C,OAAO,OAAO,IAAI,IAAI,IAAI,OAAO,IAAI,KAAK,CAAC;QAC5C,CAAC,CAAC,CAAC;IACJ,CAAC;IAYD,6BAA6B,OAAe,EAAE,iBAA2B;QACxE,IAAI,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,OAAO,GAAG,GAAG,CAAC,CAAC;SAC1D;QAED,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,UAAS,KAAK;YACjC,OAAO,KAAK,CAAC,IAAI,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,IACC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC;YACnB,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtD,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC;gBACnB,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,EACvB;YACD,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,OAAO,GAAG,GAAG,CAAC,CAAC;SAC1D;QAED,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;YAE3B,IAAM,eAAe,GAAG,iBAAiB;iBACvC,MAAM,CAAC,UAAA,OAAO;gBACd,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YACpC,CAAC,CAAC;iBACD,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;gBACV,OAAO,UAAU,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YACtC,CAAC,CAAC,CAAC;YAEJ,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,IAAI,MAAM,GAAG,eAAe,CAAC,MAAM,EAAE;gBACpC,IAAI,OAAO,GACV,YAAY;oBACZ,OAAO;oBACP,IAAI;oBACJ,eAAe,CAAC,MAAM;oBACtB,UAAU,CAAC;gBACZ,OAAO;oBACN,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;gBACjE,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;aACzB;YAED,OAAO,eAAe,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;SAC5D;aAAM;YACN,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;SACjB;IACF,CAAC;IAOD,uBAAuB,WAAmB;QACzC,IAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEzC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC1C;QAED,OAAO,QAAQ,CAAC,GAAG,CAAC,UAAS,OAAO;YACnC,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;IACJ,CAAC;IAWD,qBACC,WAA+B,EAC/B,SAAkC;QAElC,IAAI,QAAQ,GAA+B,EAAE,CAAC;QAE9C,SAAS;aACP,MAAM,CAAC,UAAS,oBAAoB;YAEpC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;iBAC9B,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,KAAK,SAAS,EAAjB,CAAiB,CAAC;iBAChC,IAAI,CAAC,UAAA,MAAM;gBACX,IAAM,GAAG,GAAgC,MAAM,CAAC;gBAChD,OAAO,CACN,GAAG,IAAI,oBAAoB;oBAC3B,oBAAoB,CAAC,GAAG,CAAC,KAAK,WAAW,CAAC,GAAG,CAAC,CAC9C,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;aACD,OAAO,CAAC,UAAS,oBAAoB;YACrC,QAAQ,CAAC,oBAAoB,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEJ,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;YACtC,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACrB,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;gBAC7B,OAAO,EAAE,GAAG,EAAE,CAAC;aACf;YACD,IAAI,CAAC,GAAG,CAAC,EAAE;gBACV,OAAO,CAAC,CAAC,CAAC;aACV;YACD,IAAI,CAAC,GAAG,CAAC,EAAE;gBACV,OAAO,CAAC,CAAC;aACT;YACD,OAAO,CAAC,CAAC;QACV,CAAC,CAAC,CAAC;IACJ,CAAC;IAWD,yBACC,WAA4B,EAC5B,SAAmC;QAEnC,IAAI,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC;QACtC,IAAI,QAAkB,CAAC;QACvB,SAAS,GAAG,SAAS,IAAI,EAAE,CAAC;QAE5B,IAAI,WAAW,IAAI,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,EAAE;YAC9C,IAAI,mBAAiB,GAAG,WAAW,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YAE5D,QAAQ,GAAG,aAAa,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAS,OAAO;gBACzD,IAAM,QAAQ,GAAG,mBAAmB,CAAC,OAAO,EAAE,mBAAiB,CAAC,CAAC;gBACjE,IAAI,QAAQ,IAAI,IAAI,EAAE;oBACrB,MAAM,IAAI,KAAK,CACd,iCAA8B,OAAO,eAAS,WAAW,CAAC,WAAW,yBAAsB;wBAC1F,mDAAmD,CACpD,CAAC;iBACF;gBACD,OAAO,QAAQ,CAAC;YACjB,CAAC,CAAC,CAAC;YAEH,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC1B,IAAI,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE;oBAC9B,MAAM,IAAI,KAAK,CACd,iBAAiB;wBAChB,QAAQ;wBACR,+BAA+B,CAChC,CAAC;iBACF;gBAED,QAAQ,GAAG,kBAAkB,CAC5B,QAAQ,CAAC,CAAC,CAAC,EACX,QAAQ,CAAC,CAAC,CAAC,EACX,mBAAiB,CACjB,CAAC;aACF;YAED,OAAO,QAAQ,CAAC;SAChB;QAED,OAAO,WAAW,CAAC;IACpB,CAAC;IAWD,4BACC,IAA+B,EAC/B,OAA8B;QAI9B,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACrC,OAAO,CAAkB,YAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;SAC1C;QAGD,OAAO,OAAO;aACZ,GAAG,CAAC,UAAS,MAAM;YACnB,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAChC,UAAC,YAA+B,EAAE,GAAW;gBAC5C,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;oBAI/B,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC;yBACxB,GAAG,CAAC,UAAC,KAAU;wBACf,OAAO,YAAY,CAAC,GAAG,CAAC,UAAA,WAAW;4BAClC,OAAA,YAAK,CAAC,EAAE,EAAE,WAAW,YAAI,GAAC,GAAG,IAAG,KAAK,MAAG;;wBAAxC,CAAwC,CACxC,CAAC;oBACH,CAAC,CAAC;yBACD,MAAM,CACN,UACC,eAAyB,EACzB,eAAyB;wBAEzB,OAAO,eAAe,CAAC,MAAM,CAC5B,eAAe,CACf,CAAC;oBACH,CAAC,EACD,EAAE,CACF,CAAC;iBACH;qBAAM;oBAGN,YAAY,CAAC,OAAO,CAAC,UAAA,WAAW;wBAC/B,WAAW,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;oBAChC,CAAC,CAAC,CAAC;iBACH;gBACD,OAAO,YAAY,CAAC;YACrB,CAAC,EACD,CAAkB,YAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAClC,CAAC;QACH,CAAC,CAAC;aACD,MAAM,CACN,UAAC,eAAe,EAAE,kBAAkB;YACnC,OAAA,eAAe,CAAC,MAAM,CAAC,kBAAkB,CAAC;QAA1C,CAA0C,EAC3C,EAAE,CACF,CAAC;IACJ,CAAC","sourcesContent":["import { mixin } from '@dojo/core/lang';\nimport { NormalizedEnvironment } from '@theintern/digdug/Tunnel';\n\nimport Environment from './Environment';\n\n/**\n * Resolves a collection of Intern test environments to a list of service\n * environments\n *\n * @param capabilities a base set of capabilities for all environments\n * @param environments a list of user-requested enviromnents\n * @param available a list of available environments\n * @returns a list of flattened service environments\n */\nexport default function resolveEnvironments(\n\tcapabilities: { [key: string]: any },\n\tenvironments: EnvironmentOptions[],\n\tavailable?: NormalizedEnvironment[]\n) {\n\t// Pre-process the environments list to resolve any uses of {pwd} and do any\n\t// top-level substitutions\n\tenvironments = environments.map(environment => {\n\t\tconst serialized = JSON.stringify(environment);\n\t\treturn JSON.parse(serialized.replace(/{pwd}/g, process.cwd()));\n\t});\n\n\t// flatEnviroments will have non-array versions\n\tconst flatEnvironments = createPermutations(capabilities, environments);\n\n\t// Expand any version ranges or aliases in the environments.\n\tconst expandedEnvironments = flatEnvironments.map(function(environment) {\n\t\tconst version = resolveVersions(environment, available);\n\t\tif (version == null) {\n\t\t\treturn environment;\n\t\t}\n\t\treturn mixin({}, environment, { version });\n\t});\n\n\t// Perform a second round of permuting to handle any expanded version ranges\n\treturn createPermutations({}, expandedEnvironments).map(function(\n\t\tenvironment\n\t) {\n\t\t// After permuting, environment.version will be singular again\n\t\treturn new Environment(environment);\n\t});\n}\n\nexport interface EnvironmentOptions {\n\tbrowserName: string | string[];\n\tversion?: string | string[] | number | number[];\n\t[key: string]: any;\n}\n\nexport interface FlatEnvironment {\n\tbrowserName: string;\n\tversion?: string;\n\t[key: string]: any;\n}\n\n/**\n * Expands a range of versions using available environments\n */\nfunction expandVersionRange(\n\tleft: string,\n\tright: string,\n\tavailableVersions: string[]\n) {\n\tif (\n\t\tavailableVersions.indexOf(left) === -1 ||\n\t\tavailableVersions.indexOf(right) === -1\n\t) {\n\t\tthrow new Error(\n\t\t\t'The version range ' + left + '..' + right + ' is unavailable'\n\t\t);\n\t}\n\treturn availableVersions.filter(function(version) {\n\t\treturn version >= left && version <= right;\n\t});\n}\n\n/**\n * Resolves a version alias from a list of available versions.\n *\n * Assumes availableVersions is sorted in ascending order. Acceptable versions\n * are:\n *\n * * '{number}'\n * * 'latest'\n * * 'latest-{number}'\n */\nfunction resolveVersionAlias(version: string, availableVersions: string[]) {\n\tlet pieces = version.split('-');\n\tif (pieces.length > 2) {\n\t\tthrow new Error('Invalid alias syntax \"' + version + '\"');\n\t}\n\n\tpieces = pieces.map(function(piece) {\n\t\treturn piece.trim();\n\t});\n\n\tif (\n\t\t(pieces.length === 2 &&\n\t\t\t(pieces[0] !== 'latest' || isNaN(Number(pieces[1])))) ||\n\t\t(pieces.length === 1 &&\n\t\t\tisNaN(Number(pieces[0])) &&\n\t\t\tpieces[0] !== 'latest')\n\t) {\n\t\tthrow new Error('Invalid alias syntax \"' + version + '\"');\n\t}\n\n\tif (pieces[0] === 'latest') {\n\t\t// Only consider numeric versions; we don't want 'beta' or 'dev'\n\t\tconst numericVersions = availableVersions\n\t\t\t.filter(version => {\n\t\t\t\treturn !isNaN(parseFloat(version));\n\t\t\t})\n\t\t\t.sort((a, b) => {\n\t\t\t\treturn parseFloat(a) - parseFloat(b);\n\t\t\t});\n\n\t\tlet offset = pieces.length === 2 ? Number(pieces[1]) : 0;\n\t\tif (offset > numericVersions.length) {\n\t\t\tlet message =\n\t\t\t\t\"Can't get \" +\n\t\t\t\tversion +\n\t\t\t\t'; ' +\n\t\t\t\tnumericVersions.length +\n\t\t\t\t' version';\n\t\t\tmessage +=\n\t\t\t\t(numericVersions.length !== 1 ? 's are' : ' is') + ' available';\n\t\t\tthrow new Error(message);\n\t\t}\n\n\t\treturn numericVersions[numericVersions.length - 1 - offset];\n\t} else {\n\t\treturn pieces[0];\n\t}\n}\n\n/**\n * Splits a version into one or two version strings using the '..' delimiter\n *\n * @returns {string[]}\n */\nfunction splitVersions(versionSpec: string) {\n\tconst versions = versionSpec.split('..');\n\n\tif (versions.length > 2) {\n\t\tthrow new Error('Invalid version syntax');\n\t}\n\n\treturn versions.map(function(version) {\n\t\treturn version.trim();\n\t});\n}\n\n/**\n * Get a list of versions from a list of available environments filtered by the\n * current environment.\n *\n * @param environment the environment for which versions should match\n * @param available a list of available environments\n * @returns a list of version numbers from available filtered by the current\n * environment\n */\nfunction getVersions(\n\tenvironment: EnvironmentOptions,\n\tavailable: NormalizedEnvironment[]\n): string[] {\n\tlet versions: { [key: string]: boolean } = {};\n\n\tavailable\n\t\t.filter(function(availableEnvironment) {\n\t\t\t// Return true if there are no mismatching keys\n\t\t\treturn !Object.keys(environment)\n\t\t\t\t.filter(key => key !== 'version')\n\t\t\t\t.some(envKey => {\n\t\t\t\t\tconst key = <keyof NormalizedEnvironment>envKey;\n\t\t\t\t\treturn (\n\t\t\t\t\t\tkey in availableEnvironment &&\n\t\t\t\t\t\tavailableEnvironment[key] !== environment[key]\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t})\n\t\t.forEach(function(availableEnvironment) {\n\t\t\tversions[availableEnvironment.version] = true;\n\t\t});\n\n\treturn Object.keys(versions).sort((a, b) => {\n\t\tconst na = Number(a);\n\t\tconst nb = Number(b);\n\t\tif (!isNaN(na) && !isNaN(nb)) {\n\t\t\treturn na - nb;\n\t\t}\n\t\tif (a < b) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (a > b) {\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n}\n\n/**\n * Resolves version aliases (e.g. latest, latest - 1) and version ranges (e.g.\n * 36 .. latest or latest - 3 .. latest) using the environment list returned by\n * tunnel#getEnvironments().\n *\n * @param environment an object with an optional version property\n * @param available a list of environment available on the target service\n * @returns the environment with resolved version aliases\n */\nfunction resolveVersions(\n\tenvironment: FlatEnvironment,\n\tavailable?: NormalizedEnvironment[]\n): string | string[] | undefined {\n\tlet versionSpec = environment.version;\n\tlet versions: string[];\n\tavailable = available || [];\n\n\tif (versionSpec && isNaN(Number(versionSpec))) {\n\t\tlet availableVersions = getVersions(environment, available);\n\n\t\tversions = splitVersions(versionSpec).map(function(version) {\n\t\t\tconst resolved = resolveVersionAlias(version, availableVersions);\n\t\t\tif (resolved == null) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Unable to resolve version \"${version}\" for ${environment.browserName}. Are you using the ` +\n\t\t\t\t\t\t'proper browser and platform names for the tunnel?'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn resolved;\n\t\t});\n\n\t\tif (versions.length === 2) {\n\t\t\tif (versions[0] > versions[1]) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Invalid range [' +\n\t\t\t\t\t\tversions +\n\t\t\t\t\t\t'], must be in ascending order'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tversions = expandVersionRange(\n\t\t\t\tversions[0],\n\t\t\t\tversions[1],\n\t\t\t\tavailableVersions\n\t\t\t);\n\t\t}\n\n\t\treturn versions;\n\t}\n\n\treturn versionSpec;\n}\n\n/**\n * Builds permutations of an object by flattening properties holding array\n * values into a collection of objects representing all combinations of objects\n * for all arrays in the object.\n *\n * @param base a base set of properties applied to each source\n * @param sources a list of sources to flatten\n * @return a flattened collection of sources\n */\nfunction createPermutations(\n\tbase: { [key: string]: string },\n\tsources?: EnvironmentOptions[]\n): FlatEnvironment[] {\n\t// If no expansion sources were given, the set of permutations consists of\n\t// just the base\n\tif (!sources || sources.length === 0) {\n\t\treturn [<FlatEnvironment>mixin({}, base)];\n\t}\n\n\t// Expand the permutation set for each source\n\treturn sources\n\t\t.map(function(source) {\n\t\t\treturn Object.keys(source).reduce(\n\t\t\t\t(permutations: FlatEnvironment[], key: string) => {\n\t\t\t\t\tif (Array.isArray(source[key])) {\n\t\t\t\t\t\t// For array values, create a copy of the permutation\n\t\t\t\t\t\t// set for each array item, then use the combination of\n\t\t\t\t\t\t// these copies as the new value of `permutations`\n\t\t\t\t\t\tpermutations = source[key]\n\t\t\t\t\t\t\t.map((value: any) => {\n\t\t\t\t\t\t\t\treturn permutations.map(permutation =>\n\t\t\t\t\t\t\t\t\tmixin({}, permutation, { [key]: value })\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.reduce(\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\tnewPermutations: object[],\n\t\t\t\t\t\t\t\t\tkeyPermutations: object[]\n\t\t\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\t\t\treturn newPermutations.concat(\n\t\t\t\t\t\t\t\t\t\tkeyPermutations\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t[]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// For simple values, add the value to all current\n\t\t\t\t\t\t// permutations\n\t\t\t\t\t\tpermutations.forEach(permutation => {\n\t\t\t\t\t\t\tpermutation[key] = source[key];\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\treturn permutations;\n\t\t\t\t},\n\t\t\t\t[<FlatEnvironment>mixin({}, base)]\n\t\t\t);\n\t\t})\n\t\t.reduce(\n\t\t\t(newPermutations, sourcePermutations) =>\n\t\t\t\tnewPermutations.concat(sourcePermutations),\n\t\t\t[]\n\t\t);\n}\n"]}