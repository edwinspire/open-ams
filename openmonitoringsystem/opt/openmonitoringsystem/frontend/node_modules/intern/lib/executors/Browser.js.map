{"version":3,"file":"Browser.js","sourceRoot":"","sources":["../../../../src/lib/executors/Browser.ts"],"names":[],"mappings":"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","sourcesContent":["import { Minimatch } from 'minimatch';\nimport request from '@dojo/core/request/providers/xhr';\nimport Task from '@dojo/core/async/Task';\nimport global from '@dojo/shim/global';\n\nimport * as console from '../common/console';\nimport Executor, { Config, Events, Plugins } from './Executor';\nimport { dirname, join, normalizePathEnding } from '../common/path';\nimport { getDefaultBasePath } from '../browser/util';\nimport { RuntimeEnvironment } from '../types';\n\n// Reporters\nimport Html from '../reporters/Html';\nimport Dom from '../reporters/Dom';\nimport ConsoleReporter from '../reporters/Console';\n\n/**\n * A Browser executor is used to run unit tests in a browser.\n */\nexport default class Browser extends Executor<Events, Config, Plugins> {\n\tconstructor(options?: { [key in keyof Config]?: any }) {\n\t\tsuper(<Config>{\n\t\t\tbasePath: '',\n\t\t\tinternPath: ''\n\t\t});\n\n\t\t// Report uncaught errors\n\t\tglobal.addEventListener(\n\t\t\t'unhandledRejection',\n\t\t\t(event: PromiseRejectionEvent) => {\n\t\t\t\tconsole.warn('Unhandled rejection:', event);\n\t\t\t\tthis.emit('error', event.reason);\n\t\t\t}\n\t\t);\n\n\t\tglobal.addEventListener('error', (event: ErrorEvent) => {\n\t\t\tconsole.warn('Unhandled error:', event);\n\t\t\tconst error = new Error(event.message);\n\t\t\terror.stack = `${event.filename}:${event.lineno}:${event.colno}`;\n\t\t\tthis.emit('error', error);\n\t\t});\n\n\t\tthis.registerReporter('html', options => new Html(this, options));\n\t\tthis.registerReporter('dom', options => new Dom(this, options));\n\t\tthis.registerReporter(\n\t\t\t'console',\n\t\t\toptions => new ConsoleReporter(this, options)\n\t\t);\n\n\t\tif (options) {\n\t\t\tthis.configure(options);\n\t\t}\n\t}\n\n\tget environment(): RuntimeEnvironment {\n\t\treturn 'browser';\n\t}\n\n\t/**\n\t * Load a script or scripts via script injection.\n\t *\n\t * @param script a path to a script\n\t */\n\tloadScript(script: string | string[], isEsm = false) {\n\t\tif (typeof script === 'string') {\n\t\t\tscript = [script];\n\t\t}\n\n\t\treturn script.reduce((previous, script) => {\n\t\t\tif (script[0] !== '/') {\n\t\t\t\tscript = `${this.config.basePath}${script}`;\n\t\t\t}\n\t\t\treturn previous.then(() => injectScript(script, isEsm));\n\t\t}, Task.resolve());\n\t}\n\n\tprotected _resolveConfig() {\n\t\treturn super._resolveConfig().then(() => {\n\t\t\tconst config = this.config;\n\t\t\tconst currentPath = global.location.pathname;\n\n\t\t\tif (!config.internPath) {\n\t\t\t\tif (/\\.html$/.test(currentPath)) {\n\t\t\t\t\tconfig.internPath = dirname(currentPath);\n\t\t\t\t} else {\n\t\t\t\t\tconfig.internPath = currentPath;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!config.basePath) {\n\t\t\t\tconfig.basePath = getDefaultBasePath();\n\t\t\t} else if (/^\\./.test(config.basePath)) {\n\t\t\t\t// The user provided a relative value for basePath. Resolve it\n\t\t\t\t// relative to the path to Intern's index.html.\n\t\t\t\tconfig.basePath = join(config.internPath, config.basePath);\n\t\t\t}\n\n\t\t\t['basePath', 'internPath'].forEach(property => {\n\t\t\t\tconst key = <keyof Config>property;\n\t\t\t\tconfig[key] = normalizePathEnding(<string>config[key]);\n\t\t\t});\n\n\t\t\t// Combine suites and browser.suites into browser.suites\n\t\t\tconst suites = (config.browser.suites = [\n\t\t\t\t...config.suites,\n\t\t\t\t...config.browser.suites\n\t\t\t]);\n\n\t\t\t// Clear out the suites list after combining the suites\n\t\t\tdelete config.suites;\n\n\t\t\tconst hasGlobs = suites.some(pattern => {\n\t\t\t\tconst matcher = new Minimatch(pattern);\n\t\t\t\treturn matcher.set[0].some(entry => typeof entry !== 'string');\n\t\t\t});\n\n\t\t\tif (hasGlobs) {\n\t\t\t\treturn request('__resolveSuites__', { query: { suites } })\n\t\t\t\t\t.then(response => response.json<string[]>())\n\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'The server does not support suite glob resolution'\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t\t.then((data: string[]) => {\n\t\t\t\t\t\tconfig.browser.suites = data;\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport { Events, Config };\n\nfunction injectScript(path: string, isEsm: boolean) {\n\treturn new Task<void>((resolve, reject) => {\n\t\tconst doc: Document = global.document;\n\t\tconst scriptTag = doc.createElement('script');\n\t\tscriptTag.addEventListener('load', () => {\n\t\t\tresolve();\n\t\t});\n\t\tscriptTag.addEventListener('error', event => {\n\t\t\tconsole.error(`Error loading ${path}:`, event);\n\t\t\treject(new Error(`Unable to load ${path}`));\n\t\t});\n\t\tif (isEsm) {\n\t\t\tscriptTag.type = 'module';\n\t\t}\n\t\tscriptTag.src = path;\n\t\tdoc.body.appendChild(scriptTag);\n\t});\n}\n"]}