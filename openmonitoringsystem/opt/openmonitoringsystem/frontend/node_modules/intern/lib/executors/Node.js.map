{"version":3,"file":"Node.js","sourceRoot":"","sources":["../../../../src/lib/executors/Node.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,yBAA8C;IAC9C,6BAAwD;IACxD,mCAA8C;IAC9C,+DAAuE;IACvE,mEAA2E;IAC3E,qEAA0E;IAC1E,uDAI2B;IAC3B,4CAAuC;IACvC,8CAAoD;IACpD,wCAAmD;IACnD,uDAAkD;IAClD,qDAAwD;IAIxD,mEAA8D;IAC9D,2EAE8C;IAC9C,qEAAgE;IAChE,uEAAkE;IAClE,yFAAoF;IACpF,2DAAsD;IAGtD,uCAAuD;IACvD,uCAAqD;IACrD,uCAA8D;IAC9D,qCAA0D;IAC1D,yDAAoD;IACpD,oDAA+C;IAC/C,8CAAyC;IACzC,8DAAyD;IACzD,oCAA+B;IAC/B,kCAA0C;IAC1C,8CAAyC;IAEzC,2CAA6C;IAG7C,8CAAyC;IACzC,8CAAyC;IACzC,8CAAyC;IACzC,4CAAuC;IACvC,oDAA+C;IAC/C,0DAAqD;IACrD,0DAAqD;IACrD,0CAAqC;IACrC,oDAA+C;IAC/C,kDAA6C;IAE7C,IAAM,OAAO,GAAmB,gBAAM,CAAC,OAAO,CAAC;IAE/C;QAAkC,gCAAyC;QAc1E,cAAY,OAAyC;YAArD,YACC,kBAAM;gBACL,QAAQ,EAAE,OAAO,CAAC,GAAG,EAAE,GAAG,UAAG;gBAC7B,YAAY,EAAE,EAAE;gBAChB,QAAQ,EAAE,EAAE;gBACZ,YAAY,EAAE,EAAE;gBAChB,kBAAkB,EAAE,IAAI;gBACxB,gBAAgB,EAAE,EAAE;gBACpB,kBAAkB,EAAE,EAAE,cAAc,EAAE,KAAK,EAAE;gBAC7C,mBAAmB,EAAE,EAAE;gBACvB,cAAc,EAAE,QAAQ;gBACxB,IAAI,EAAE,MAAM;gBACZ,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE,KAAK;gBAChB,UAAU,EAAE,IAAI;gBAChB,SAAS,EAAE,EAAE;gBACb,UAAU,EAAE,IAAI;gBAChB,MAAM,EAAE,UAAU;gBAClB,aAAa,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE;aAC/C,CAAC,SA6DF;YA3DA,KAAI,CAAC,WAAW,GAAG,+CAAoB,EAAE,CAAC;YAC1C,KAAI,CAAC,iBAAiB,GAAG,+CAAoB,EAAE,CAAC;YAChD,KAAI,CAAC,eAAe,GAAG,IAAI,wBAAc,CAAC,KAAI,CAAC,CAAC;YAChD,KAAI,CAAC,YAAY,GAAG,yCAAiB,EAAE,CAAC;YAExC,KAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAA,OAAO,IAAI,OAAA,IAAI,gBAAM,CAAC,KAAI,EAAE,OAAO,CAAC,EAAzB,CAAyB,CAAC,CAAC;YACtE,KAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAA,OAAO,IAAI,OAAA,IAAI,gBAAM,CAAC,KAAI,EAAE,OAAO,CAAC,EAAzB,CAAyB,CAAC,CAAC;YACtE,KAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAA,OAAO,IAAI,OAAA,IAAI,gBAAM,CAAC,KAAI,EAAE,OAAO,CAAC,EAAzB,CAAyB,CAAC,CAAC;YACtE,KAAI,CAAC,gBAAgB,CACpB,WAAW,EACX,UAAA,OAAO,IAAI,OAAA,IAAI,mBAAS,CAAC,KAAI,EAAE,OAAO,CAAC,EAA5B,CAA4B,CACvC,CAAC;YACF,KAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAA,OAAO,IAAI,OAAA,IAAI,eAAK,CAAC,KAAI,EAAE,OAAO,CAAC,EAAxB,CAAwB,CAAC,CAAC;YACpE,KAAI,CAAC,gBAAgB,CACpB,cAAc,EACd,UAAA,OAAO,IAAI,OAAA,IAAI,sBAAY,CAAC,KAAI,EAAE,OAAO,CAAC,EAA/B,CAA+B,CAC1C,CAAC;YACF,KAAI,CAAC,gBAAgB,CACpB,cAAc,EACd,UAAA,OAAO,IAAI,OAAA,IAAI,sBAAY,CAAC,KAAI,EAAE,OAAO,CAAC,EAA/B,CAA+B,CAC1C,CAAC;YACF,KAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAA,OAAO,IAAI,OAAA,IAAI,cAAI,CAAC,KAAI,EAAE,OAAO,CAAC,EAAvB,CAAuB,CAAC,CAAC;YAClE,KAAI,CAAC,gBAAgB,CACpB,WAAW,EACX,UAAA,OAAO,IAAI,OAAA,IAAI,mBAAS,CAAC,KAAI,EAAE,OAAO,CAAC,EAA5B,CAA4B,CACvC,CAAC;YACF,KAAI,CAAC,gBAAgB,CACpB,UAAU,EACV,UAAA,OAAO,IAAI,OAAA,IAAI,kBAAQ,CAAC,KAAI,EAAE,OAAO,CAAC,EAA3B,CAA2B,CACtC,CAAC;YAEF,KAAI,CAAC,cAAc,CAAC,MAAM,EAAE,oBAAU,CAAC,CAAC;YACxC,KAAI,CAAC,cAAc,CAAC,UAAU,EAAE,wBAAc,CAAC,CAAC;YAChD,KAAI,CAAC,cAAc,CAAC,WAAW,EAAE,yBAAe,CAAC,CAAC;YAClD,KAAI,CAAC,cAAc,CAAC,cAAc,EAAE,4BAAkB,CAAC,CAAC;YACxD,KAAI,CAAC,cAAc,CAAC,YAAY,EAAE,0BAAgB,CAAC,CAAC;YACpD,KAAI,CAAC,cAAc,CAAC,KAAK,EAAE,mCAAyB,CAAC,CAAC;YAEtD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACb,KAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACzB,CAAC;YAGD,OAAO,CAAC,EAAE,CACT,oBAAoB,EACpB,UAAC,MAAa,EAAE,OAAqB;gBACpC,OAAO,CAAC,IAAI,CAAC,sBAAsB,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;gBACtD,KAAI,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC5B,CAAC,CACD,CAAC;YAEF,OAAO,CAAC,EAAE,CAAC,mBAAmB,EAAE,UAAC,MAAa;gBAC7C,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;gBACzC,KAAI,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;YAEH,KAAI,CAAC,EAAE,CAAC,UAAU,EAAE,UAAA,OAAO;gBAC1B,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;;QACJ,CAAC;QAED,sBAAI,6BAAW;iBAAf;gBACC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;YAC1B,CAAC;;;WAAA;QAED,sBAAI,6BAAW;iBAAf;gBACC,MAAM,CAAC,MAAM,CAAC;YACf,CAAC;;;WAAA;QAED,sBAAI,sCAAoB;iBAAxB;gBACC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;YAC/B,CAAC;;;WAAA;QAED,sBAAI,gCAAc;iBAAlB;gBACC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;YACzB,CAAC;;;WAAA;QAED,sBAAI,iCAAe;iBAAnB;gBACC,MAAM,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;YAC9D,CAAC;;;WAAA;QAKD,sBAAI,wBAAM;iBAAV;gBACC,IAAM,MAAM,GAAG,EAAE,CAAC;gBAGlB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBACtC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC9B,CAAC;gBAED,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;oBACzB,MAAM,CAAC,IAAI,OAAX,MAAM,EAAS,IAAI,CAAC,cAAc,EAAE;gBACrC,CAAC;gBAED,MAAM,CAAC,MAAM,CAAC;YACf,CAAC;;;WAAA;QAKD,uBAAQ,GAAR,UAAS,OAAqC;YAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACtC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,iBAAM,QAAQ,YAAC,OAAO,CAAC,CAAC;YACzB,CAAC;QACF,CAAC;QAKD,wBAAS,GAAT,UAAU,IAAY;YACrB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAgB,YAAU,IAAM,CAAC,CAAC;QACxD,CAAC;QAKD,6BAAc,GAAd,UAAe,IAAY,EAAE,QAAgB;YAC5C,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;YACpC,IAAM,SAAS,GAAG,oBAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAChD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACnD,CAAC;YAED,IAAI,CAAC;gBACJ,IAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAChD,IAAI,EACJ,gBAAS,CAAC,QAAQ,CAAC,EACnB,SAAS,CACT,CAAC;gBAEF,IAAI,CAAC,YAAY,CAAC,eAAe,CAChC,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CACrC,CAAC;gBACF,IAAI,CAAC,iBAAiB,CAAC,WAAW,CACjC,QAAQ,EACR,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAClC,CAAC;gBAEF,MAAM,CAAC,OAAO,CAAC;YAChB,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,IAAI,CACR,SAAS,EACT,yBAAuB,QAAQ,UAAK,KAAK,CAAC,OAAS,CACnD,CAAC;gBACF,MAAM,CAAC,IAAI,CAAC;YACb,CAAC;QACF,CAAC;QAKD,yBAAU,GAAV,UAAW,MAAyB;YACnC,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAE1D,IAAI,CAAC;gBACJ,GAAG,CAAC,CAAiB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;oBAAvB,IAAM,QAAM,gBAAA;oBAChB,IAAM,IAAI,GAAG,cAAO,CAAC,QAAM,CAAC,CAAC;oBAC7B,EAAE,CAAC,CAAC,eAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACtB,OAAO,CAAC,IAAI,CAAC,CAAC;oBACf,CAAC;oBAAC,IAAI,CAAC,CAAC;wBAGP,OAAO,CAAC,cAAW,CAAC,QAAM,EAAE,EAAE,OAAO,EAAE,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC1D,CAAC;iBACD;YACF,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,cAAI,CAAC,MAAM,CAAO,KAAK,CAAC,CAAC;YACjC,CAAC;YAED,MAAM,CAAC,cAAI,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC;QAMD,6BAAc,GAAd,UAAe,IAAY,EAAE,IAAmB;YAC/C,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;QACjD,CAAC;QAMD,mCAAoB,GAApB,UAAqB,QAAgB;YACpC,MAAM,CAAC,CACN,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CACnE,CAAC;QACH,CAAC;QAES,wBAAS,GAAnB;YAAA,iBA4BC;YA3BA,MAAM,CAAC,iBAAM,SAAS,WAAE,CAAC,OAAO,CAAC;gBAChC,KAAI,CAAC,2BAA2B,EAAE,CAAC;gBAEnC,IAAM,QAAQ,GAAmB,EAAE,CAAC;gBACpC,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACjB,QAAQ,CAAC,IAAI,CACZ,KAAI,CAAC,MAAM;yBACT,IAAI,EAAE;yBACN,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,IAAI,CAAC,WAAW,EAAO,KAAI,CAAC,MAAM,CAAC,EAAxC,CAAwC,CAAC,CACtD,CAAC;gBACH,CAAC;gBACD,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACjB,QAAQ,CAAC,IAAI,CACZ,KAAI,CAAC,MAAM;yBACT,IAAI,EAAE;yBACN,IAAI,CAAC;wBACL,OAAA,KAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,MAAM,EAAE,KAAI,CAAC,MAAM,EAAE,CAAC;oBAAhD,CAAgD,CAChD,CACF,CAAC;gBACH,CAAC;gBAGD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAChC,cAAO,CAAC,EACR,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,EAAzB,CAAyB,CAClC,CAAC;YACH,CAAC,CAAC,CAAC;QACJ,CAAC;QAES,yBAAU,GAApB;YAAA,iBAyGC;YAxGA,MAAM,CAAC,iBAAM,UAAU,WAAE,CAAC,IAAI,CAAC;gBAC9B,IAAM,MAAM,GAAG,KAAI,CAAC,MAAM,CAAC;gBAE3B,IAAM,KAAK,GAAG,KAAI,CAAC,UAAU,CAAC;gBAC9B,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;gBACzB,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC,cAAc,CAAC;gBACtC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;gBAEzB,EAAE,CAAC,CAGF,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,MAAM,GAAG,CAAC;oBAC1D,MAAM,CAAC,gBAAgB,CAAC,MAAM;wBAC7B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM;wBAC5B,CAAC,CAAC;oBAGJ,MAAM,CAAC,SACR,CAAC,CAAC,CAAC;oBACF,IAAM,UAAU,GAAG,IAAI,cAAI,CAAO,UAAC,OAAO,EAAE,MAAM;wBACjD,IAAM,MAAM,GAAW,IAAI,gBAAM,CAAC;4BACjC,QAAQ,EAAE,MAAM,CAAC,QAAQ;4BACzB,QAAQ,EAAE,KAAI;4BACd,IAAI,EAAE,MAAM,CAAC,UAAU;4BACvB,SAAS,EAAE,MAAM,CAAC,SAAS;4BAC3B,UAAU,EAAE,MAAM,CAAC,UAAU;yBAC7B,CAAC,CAAC;wBAEH,MAAM;6BACJ,KAAK,EAAE;6BACP,IAAI,CAAC;4BACL,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;4BACrB,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;wBACzC,CAAC,CAAC;6BACD,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBACzB,CAAC,CAAC,CAAC;oBAIH,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;wBACtB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;4BAItB,MAAM,CAAC,IAAI,cAAI,CAAU,UAAA,OAAO;gCAC/B,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE;oCACpB,OAAO,CAAC,IAAI,CAAC,CAAC;gCACf,CAAC,CAAC,CAAC;4BACJ,CAAC,CAAC,CAAC;wBACJ,CAAC,CAAC,CAAC;oBACJ,CAAC;oBAED,MAAM,CAAC,UAAU;yBACf,IAAI,CAAC;wBACL,IAAM,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;wBAC3C,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,cAAc,CAAC,CAAC,CAAC;4BACtC,IAAM,OAAO,GAAwB,aAAa,CAAC;4BACnD,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;4BACxC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;wBACxC,CAAC;wBAED,EAAE,CAAC,CAAC,OAAO,IAAI,MAAM,IAAI,CAAC,CAAC,OAAO,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;4BACtD,aAAa,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;wBACpC,CAAC;wBAED,IAAI,iBAAiB,GAAG,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;wBACtD,IAAM,MAAM,GAAG,CAAC,KAAI,CAAC,MAAM,GAAG,IAAI,iBAAiB,CAClD,KAAI,CAAC,MAAM,CAAC,aAAa,CACzB,CAAC,CAAC;wBAEH,MAAM,CAAC,EAAE,CAAC,kBAAkB,EAAE,UAAA,QAAQ;4BACrC,KAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;gCACnC,MAAM,QAAA;gCACN,QAAQ,UAAA;6BACR,CAAC,CAAC;wBACJ,CAAC,CAAC,CAAC;wBAEH,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAA,MAAM;4BACzB,KAAI,CAAC,IAAI,CAAC,cAAc,EAAE;gCACzB,MAAM,QAAA;gCACN,MAAM,EAAE,MAAM,CAAC,MAAM;6BACrB,CAAC,CAAC;wBACJ,CAAC,CAAC,CAAC;wBAEH,MAAM,CAAC,YAAY,GAAG,gBAAS,CAC9B,MAAM,CAAC,iBAAiB,EACxB,MAAM,CAAC,YAAY,CACnB,CAAC;wBAEF,MAAM,CAAC,KAAI,CAAC,oBAAoB,EAAE,CAAC,IAAI,CAAC;4BACvC,MAAM,CAAC,MAAM;iCACX,KAAK,EAAE;iCACP,IAAI,CAAC;gCACL,OAAA,KAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,MAAM,QAAA,EAAE,CAAC;4BAApC,CAAoC,CACpC,CAAC;wBACJ,CAAC,CAAC,CAAC;oBACJ,CAAC,CAAC;yBACD,IAAI,CAAC;wBACL,MAAM,CAAC,KAAK,CAAC;oBACd,CAAC,CAAC,CAAC;gBACL,CAAC;gBAED,MAAM,CAAC,KAAK,CAAC;YACd,CAAC,CAAC,CAAC;QACJ,CAAC;QAOS,mCAAoB,GAA9B;YAAA,iBAsJC;YArJA,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAC3B,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAE3B,IAAM,cAAc,GAAG,IAAI,gBAAc,CAAC,MAAM,CAAC,SAAS,EAAE;gBAC3D,KAAK,EAAE,OAAO,IAAI,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK;aACtD,CAAC,CAAC;YAEH,IAAM,QAAQ,GAAG,IAAI,CAAC;YAItB;gBAAwC,qDAAc;gBAAtD;oBAAA,qEAIC;oBAHA,cAAQ,GAAG,QAAQ,CAAC;oBACpB,sBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;oBAC3C,aAAO,GAAG,MAAM,CAAC,iBAAiB,IAAI,MAAM,CAAC,SAAS,CAAC;;gBACxD,CAAC;gBAAD,gCAAC;YAAD,CAAC,AAJD,CAAwC,wBAAc,GAIrD;YAED,cAAc,CAAC,kBAAkB,GAAG,yBAAyB,CAAC;YAE9D,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,UAAA,kBAAkB;gBACtD,KAAI,CAAC,cAAc,GAAG,6BAAmB,CACxC,MAAM,CAAC,YAAY,EACnB,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAC/C,kBAAkB,CAClB,CAAC,GAAG,CAAC,UAAA,eAAe;oBACpB,IAAI,OAAuB,CAAC;oBAG5B,IAAM,KAAK,GAAG,IAAI,eAAK,CAAC;wBACvB,IAAI,EAAE,MAAM,CAAC,eAAe,CAAC;wBAC7B,iBAAiB,EAAE,IAAI;wBACvB,IAAI,EAAE,MAAM,CAAC,IAAI;wBACjB,IAAI,EAAE,MAAM,CAAC,IAAI;wBACjB,KAAK,EAAE,EAAE;wBACT,OAAO,EAAE,MAAM,CAAC,cAAc;wBAC9B,QAAQ,EAAE,KAAI;wBAEd,MAAM;4BAAN,iBA4DC;4BA3DA,QAAQ,CAAC,GAAG,CAAC,sBAAsB,EAAE,eAAe,CAAC,CAAC;4BACtD,MAAM,CAAC,cAAc;iCACnB,aAAa,CAAiB,eAAe,CAAC;iCAC9C,IAAI,CAAC,UAAA,QAAQ;gCACb,OAAO,GAAG,QAAQ,CAAC;gCACnB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAChB,kBAAkB,EAClB,OAAO,CAAC,YAAY,CACpB,CAAC;gCAEF,IAAI,MAAM,GAAmB,IAAI,iBAAO,CACvC,OAAO,CACP,CAAC;gCACF,MAAM,CAAC,eAAe,GAAG,IAAI,qBAAW,CACvC,OAAO,CAAC,YAAY,CACpB,CAAC;gCACF,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gCACrB,KAAI,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC;gCAI1C,KAAI,CAAC,IAAI,GAAG,MAAM,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;gCAE9C,IAAM,QAAQ,GAAG,MAAM,CAAC,kBAAkB,CAAC;gCAC3C,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;gCAChC,EAAE,CAAC,CAAC,QAAQ,CAAC,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC;oCACnC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;wCACtB,OAAA,MAAM,CAAC,sBAAsB,CAC5B,QAAQ,CAAC,YAAa,CACtB;oCAFD,CAEC,CACD,CAAC;oCACF,KAAI,CAAC,QAAQ,CAAC,GAAG,CAChB,qCAAqC,EACrC,QAAQ,CAAC,YAAY,CACrB,CAAC;gCACH,CAAC;gCACD,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;oCAC3B,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;wCACtB,OAAA,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAK,CAAC;oCAArC,CAAqC,CACrC,CAAC;oCACF,KAAI,CAAC,QAAQ,CAAC,GAAG,CAChB,6BAA6B,EAC7B,QAAQ,CAAC,IAAI,CACb,CAAC;gCACH,CAAC;gCACD,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;oCAC/B,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;wCACtB,OAAA,MAAM,CAAC,kBAAkB,CACxB,QAAQ,CAAC,QAAS,CAClB;oCAFD,CAEC,CACD,CAAC;oCACF,KAAI,CAAC,QAAQ,CAAC,GAAG,CAChB,iCAAiC,EACjC,QAAQ,CAAC,QAAQ,CACjB,CAAC;gCACH,CAAC;gCAED,MAAM,CAAC,OAAO,CAAC;4BAChB,CAAC,CAAC,CAAC;wBACL,CAAC;wBAED,KAAK;4BAAL,iBAqCC;4BApCA,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;4BAE3B,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gCACZ,IAAM,UAAU,GAAG;oCAMlB,kBAAkB,KAAY;wCAC7B,EAAE,CAAC,CACF,KAAK,CAAC,KAAK,IAAI,IAAI;4CACnB,KAAK,CAAC,cAAc,GAAG,CACxB,CAAC,CAAC,CAAC;4CACF,MAAM,CAAC,IAAI,CAAC;wCACb,CAAC;wCACD,MAAM,CAAC,KAAK,CAAC,KAAK;6CAChB,MAAM,CAAC,eAAO,CAAC;6CACf,IAAI,CAAC,QAAQ,CAAC,CAAC;oCAClB,CAAC;oCACD,MAAM,CAAC,MAAM,CAAC,YAAY,CACzB,MAAM,CAAC,OAAO,CAAC,SAAS,EACxB,EAAE,OAAO,EAAE,CAAC,QAAQ,CAAC,KAAI,CAAC,EAAE,CAC5B,CAAC;gCACH,CAAC,CAAC;gCAEF,EAAE,CAAC,CACF,MAAM,CAAC,eAAe,KAAK,IAAI;oCAC/B,CAAC,MAAM,CAAC,eAAe,KAAK,MAAM;wCACjC,IAAI,CAAC,cAAc,GAAG,CAAC,CACzB,CAAC,CAAC,CAAC;oCACF,MAAM,CAAC,UAAU,EAAE,CAAC;gCACrB,CAAC;gCAED,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;4BAC1C,CAAC;wBACF,CAAC;qBACD,CAAC,CAAC;oBAKH,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;wBACtC,KAAK,CAAC,GAAG,CAAC,IAAI,qBAAW,EAAE,CAAC,CAAC;oBAC9B,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAKS,oCAAqB,GAA/B;YAAA,iBAUC;YATA,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;YACrC,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC;YAC5C,MAAM,CAAC,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBACvC,IAAI,CAAC;gBACL,KAAI,CAAC,GAAG,CAAC,2BAA2B,EAAE,MAAM,CAAC,CAAC;YAC/C,CAAC,CAAC;iBACD,OAAO,CAAC;gBACR,KAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;YACvC,CAAC,CAAC,CAAC;QACL,CAAC;QAMS,0BAAW,GAArB;YAGC,EAAE,CAAC,CACF,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC;gBAClD,IAAI,CAAC,MAAM,CAAC,SACb,CAAC,CAAC,CAAC;gBACF,MAAM,CAAC,cAAI,CAAC,OAAO,EAAE,CAAC;YACvB,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC1B,IAAI,CAAC,wBAAwB,EAAE,CAAC;YACjC,CAAC;YACD,MAAM,CAAC,iBAAM,WAAW,WAAE,CAAC;QAC5B,CAAC;QAES,6BAAc,GAAxB,UAAyB,GAAiB,EAAE,KAAU;YACrD,EAAE,CAAC,CAAC,CAAC,oBAAa,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;gBACnD,iBAAM,cAAc,YAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAClC,CAAC;QACF,CAAC;QAES,6BAAc,GAAxB;YAAA,iBA+GC;YA9GA,MAAM,CAAC,iBAAM,cAAc,WAAE,CAAC,IAAI,CAAC;gBAClC,IAAM,MAAM,GAAG,KAAI,CAAC,MAAM,CAAC;gBAE3B,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACtC,KAAI,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;oBAC9C,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC;gBACnD,CAAC;gBAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;oBACxB,MAAM,CAAC,UAAU,GAAG,cAAO,CAAC,cAAO,CAAC,SAAS,CAAC,CAAC,CAAC;oBAKhD,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBAGpD,MAAM,CAAC,UAAU,GAAG,cAAO,CAC1B,cAAW,CAAC,QAAQ,EAAE;4BACrB,OAAO,EAAE,OAAO,CAAC,GAAG,EAAE;yBACtB,CAAC,CACF,CAAC;oBACH,CAAC;gBACF,CAAC;gBAED,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC,UAAA,QAAQ;oBAC1C,IAAM,GAAG,GAAiB,QAAQ,CAAC;oBACnC,MAAM,CAAC,GAAG,CAAC,GAAG,0BAAmB,CAChC,cAAO,CAAS,MAAM,CAAC,GAAG,CAAC,CAAC,EAC5B,UAAG,CACH,CAAC;gBACH,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;oBAC5B,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;wBACrB,IAAI,EAAE,WAAW;wBACjB,OAAO,EAAE,MAAM,CAAC,eAAe;qBAC/B,CAAC,CAAC;gBACJ,CAAC;gBAED,KAAI,CAAC,mBAAmB,GAAG,MAAM,CAAC,QAAQ,CAAC;gBAC3C,KAAI,CAAC,cAAc,GAAG,EAAE,CAAC;gBAEzB,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAErB,KAAI,CAAC,cAAc,GAAG,kBAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI;wBAC1D,OAAA,cAAO,CAAC,IAAI,CAAC;oBAAb,CAAa,CACb,CAAC;gBACH,CAAC;gBAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,MAAM,CAAC,SAAS,GAAG,sBAAoB,MAAM,CAAC,UAAU,MAAG,CAAC;gBAC7D,CAAC;gBAGD,CAAC,WAAW,EAAE,mBAAmB,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;oBAC7C,IAAM,QAAQ,GAAiB,GAAG,CAAC;oBACnC,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;wBACtB,MAAM,CAAC,QAAQ,CAAC,GAAY,MAAM,CAAC,QAAQ,CAAE,CAAC,OAAO,CACpD,MAAM,EACN,GAAG,CACH,CAAC;oBACH,CAAC;gBACF,CAAC,CAAC,CAAC;gBAEH,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;oBACjD,MAAM,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;gBAC1C,CAAC;gBAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC/B,MAAM,CAAC,YAAY,CAAC,IAAI,GAAG,QAAQ,CAAC;gBACrC,CAAC;gBAED,IAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;gBACnE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACb,MAAM,CAAC,YAAY,CAAC,KAAK,GAAG,OAAO,CAAC;gBACrC,CAAC;gBAGD,MAAM,CAAC,gBAAgB,GAAG,kBAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;gBAG/D,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,kBAAW,CAC5B,MAAM,CAAC,MAAM,QACb,MAAM,CAAC,IAAI,CAAC,MAAM,EACpB,CAAC;gBACH,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,kBAAW,CAC/B,MAAM,CAAC,MAAM,QACb,MAAM,CAAC,OAAO,CAAC,MAAM,EACvB,CAAC;gBAGH,OAAO,MAAM,CAAC,MAAM,CAAC;gBAIrB,KAAI,CAAC,aAAa,GAAG,4CAAkB,CACtC,YAAK,CACJ,EAAE,qBAED,gBAAgB,EAAE,MAAM,CAAC,gBAAgB,IACtC,MAAM,CAAC,mBAAmB,GAE9B;oBACC,gBAAgB,EAAE,IAAI;oBACtB,gBAAgB,EAAE,IAAI;iBACtB,CACD,CACD,CAAC;YACH,CAAC,CAAC,CAAC;QACJ,CAAC;QAES,wBAAS,GAAnB;YAAA,iBA0CC;YAzCA,IAAI,QAAoB,CAAC;YAEzB,MAAM,CAAC,IAAI,cAAI,CACd,UAAC,OAAO,EAAE,MAAM;gBACf,EAAE,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;oBACtC,QAAQ,GAAG,KAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;gBAClC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,QAAQ,GAAG,cAAI,CAAC,OAAO,EAAE,CAAC;gBAC3B,CAAC;gBAED,QAAQ;qBACN,IAAI,CAAC;oBACL,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC,CAAC;wBAC1B,MAAM,CAAC;oBACR,CAAC;oBACD,MAAM,CAAC,KAAI,CAAC,qBAAqB,EAAE,CAAC,IAAI,CACvC,cAAM,OAAA,CAAC,QAAQ,GAAG,KAAI,CAAC,eAAe,EAAE,CAAC,EAAnC,CAAmC,CACzC,CAAC;gBACH,CAAC,CAAC;qBACD,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACzB,CAAC,EACD;gBACC,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,KAAK,MAAkB,CAAC,CAAC,CAAC;oBAClD,QAAQ,CAAC,MAAM,EAAE,CAAC;gBACnB,CAAC;YACF,CAAC,CACD,CAAC,OAAO,CAAC;gBAIT,IAAM,YAAY,GAAG,KAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;gBAC/C,IAAM,cAAc,GAAG,KAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAA,QAAQ;oBACzD,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC9C,CAAC,CAAC,CAAC;gBACH,cAAc,CAAC,OAAO,CAAC,UAAA,QAAQ;oBAC9B,IAAI,CAAC;wBACJ,IAAM,IAAI,GAAG,iBAAY,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;wBAC1D,KAAI,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;oBACrC,CAAC;oBAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA,CAAC;gBACpB,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAES,8BAAe,GAAzB;YAAA,iBAqCC;YApCA,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAC3B,IAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC;YAC1C,IAAM,KAAK,GAAG,IAAI,aAAa,CAAC,MAAM,CAAC,cAAc,IAAI,QAAQ,CAAC,CAAC;YAEnE,IAAI,CAAC,GAAG,CACP,SAAS,EACT,aAAa,CAAC,MAAM,EACpB,4BAA4B,EAC5B,MAAM,CAAC,cAAc,CACrB,CAAC;YAEF,IAAM,OAAO,GAAG,IAAI,cAAI,CACvB,UAAC,OAAO,EAAE,MAAM;gBACf,cAAI,CAAC,GAAG,CACP,aAAa,CAAC,GAAG,CAAC,UAAA,KAAK;oBACtB,KAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;oBACvC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;wBACpB,KAAI,CAAC,GAAG,CAAC,eAAe,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;wBACtC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;oBACpB,CAAC,CAAC,CAAC;gBACJ,CAAC,CAAC,CACF,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACzB,CAAC,EACD;gBACC,KAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;gBACnC,KAAK,CAAC,KAAK,EAAE,CAAC;YACf,CAAC,CACD,CAAC;YAEF,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,cAAO,CAAC,CAAC,CAAC,OAAO,CAAC;gBACrC,EAAE,CAAC,CAAC,MAAM,CAAC,kBAAkB,KAAK,KAAK,CAAC,CAAC,CAAC;oBAEzC,KAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;oBAC9B,MAAM,CAAC,KAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;gBAC/C,CAAC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAKS,uCAAwB,GAAlC;YAAA,iBASC;YARA,wCAAoB,CACnB,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAnC,CAAmC,EAC/C,UAAC,IAAI,EAAE,QAAQ,IAAK,OAAA,KAAI,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAnC,CAAmC,CACvD,CAAC;YACF,IAAI,CAAC,cAAc,GAAG,+BAAW,CAChC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAnC,CAAmC,EAC/C,UAAC,IAAI,EAAE,QAAQ,IAAK,OAAA,KAAI,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAnC,CAAmC,CACvD,CAAC;QACH,CAAC;QAKS,0CAA2B,GAArC;YACC,0CAAsB,EAAE,CAAC;YACzB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC5B,CAAC;QACF,CAAC;QACF,WAAC;IAAD,CAAC,AAjxBD,CAAkC,kBAAQ,GAixBzC;;IA2CD;QAMC,uBAAY,cAAsB;YACjC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;YACrC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;YAChB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YACtB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACrB,CAAC;QAED,+BAAO,GAAP,UAAQ,IAAqB;YAA7B,iBAWC;YAVA,IAAM,QAAQ,GAAG,IAAI,cAAI,CAAC,UAAC,OAAO,EAAE,MAAM;gBACzC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,MAAA,EAAE,OAAO,SAAA,EAAE,MAAM,QAAA,EAAE,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE9B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;gBACnD,IAAI,CAAC,IAAI,EAAE,CAAC;YACb,CAAC;YAED,MAAM,CAAC,QAAQ,CAAC;QACjB,CAAC;QAED,6BAAK,GAAL;YACC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,EAAE,EAAb,CAAa,CAAC,CAAC;YAChD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,EAAE,EAAb,CAAa,CAAC,CAAC;YAC9C,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YACtB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;YACpB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QACjB,CAAC;QAED,4BAAI,GAAJ;YAAA,iBAaC;YAZA,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBACrB,IAAA,uBAA+C,EAA7C,cAAI,EAAE,sBAAO,EAAE,kBAAM,CAAyB;gBACtD,IAAM,MAAI,GAAG,IAAI,EAAE;qBACjB,IAAI,CAAC,SAAO,EAAE,MAAM,CAAC;qBACrB,OAAO,CAAC;oBAGR,oBAAa,CAAC,KAAI,CAAC,WAAW,EAAE,MAAI,CAAC,CAAC;oBACtC,KAAI,CAAC,IAAI,EAAE,CAAC;gBACb,CAAC,CAAC,CAAC;gBACJ,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAI,CAAC,CAAC;YAC7B,CAAC;QACF,CAAC;QACF,oBAAC;IAAD,CAAC,AAhDD,IAgDC;IAQD,6BAA6B,WAA4B;QACxD,MAAM,CAAC,WAAW,CAAC,WAAW,KAAK,MAAM,CAAC;IAC3C,CAAC;IAED,4BAA4B,WAA4B;QACvD,MAAM,CAAC,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;IAC1C,CAAC","sourcesContent":["import { existsSync, readFileSync } from 'fs';\nimport { dirname, normalize, resolve, sep } from 'path';\nimport { sync as nodeResolve } from 'resolve';\nimport { CoverageMap, createCoverageMap } from 'istanbul-lib-coverage';\nimport { createInstrumenter, Instrumenter } from 'istanbul-lib-instrument';\nimport { createSourceMapStore, MapStore } from 'istanbul-lib-source-maps';\nimport {\n\thookRunInThisContext,\n\thookRequire,\n\tunhookRunInThisContext\n} from 'istanbul-lib-hook';\nimport global from '@dojo/shim/global';\nimport Task, { State } from '@dojo/core/async/Task';\nimport { deepMixin, mixin } from '@dojo/core/lang';\nimport Command from '@theintern/leadfoot/Command';\nimport LeadfootServer from '@theintern/leadfoot/Server';\nimport Tunnel, { DownloadProgressEvent } from '@theintern/digdug/Tunnel';\n\n// Dig Dug tunnels\nimport SeleniumTunnel from '@theintern/digdug/SeleniumTunnel';\nimport BrowserStackTunnel, {\n\tBrowserStackOptions\n} from '@theintern/digdug/BrowserStackTunnel';\nimport SauceLabsTunnel from '@theintern/digdug/SauceLabsTunnel';\nimport TestingBotTunnel from '@theintern/digdug/TestingBotTunnel';\nimport CrossBrowserTestingTunnel from '@theintern/digdug/CrossBrowserTestingTunnel';\nimport NullTunnel from '@theintern/digdug/NullTunnel';\n\nimport { Config, EnvironmentSpec } from '../common/config';\nimport Executor, { Events, Plugins } from './Executor';\nimport { normalizePathEnding } from '../common/path';\nimport { processOption, pullFromArray } from '../common/util';\nimport { expandFiles, readSourceMap } from '../node/util';\nimport ErrorFormatter from '../node/ErrorFormatter';\nimport ProxiedSession from '../ProxiedSession';\nimport Environment from '../Environment';\nimport resolveEnvironments from '../resolveEnvironments';\nimport Server from '../Server';\nimport Suite, { isSuite } from '../Suite';\nimport RemoteSuite from '../RemoteSuite';\nimport { RuntimeEnvironment } from '../types';\nimport * as console from '../common/console';\n\n// Reporters\nimport Pretty from '../reporters/Pretty';\nimport Runner from '../reporters/Runner';\nimport Simple from '../reporters/Simple';\nimport JUnit from '../reporters/JUnit';\nimport Cobertura from '../reporters/Cobertura';\nimport JsonCoverage from '../reporters/JsonCoverage';\nimport HtmlCoverage from '../reporters/HtmlCoverage';\nimport Lcov from '../reporters/Lcov';\nimport Benchmark from '../reporters/Benchmark';\nimport TeamCity from '../reporters/TeamCity';\n\nconst process: NodeJS.Process = global.process;\n\nexport default class Node extends Executor<NodeEvents, Config, NodePlugins> {\n\tserver: Server;\n\ttunnel: Tunnel;\n\n\tprotected _coverageMap: CoverageMap;\n\tprotected _coverageFiles: string[];\n\tprotected _loadingFunctionalSuites: boolean;\n\tprotected _instrumentBasePath: string;\n\tprotected _instrumenter: Instrumenter;\n\tprotected _sourceMaps: MapStore;\n\tprotected _instrumentedMaps: MapStore;\n\tprotected _unhookRequire: null | (() => void);\n\tprotected _sessionSuites: Suite[];\n\n\tconstructor(options?: { [key in keyof Config]?: any }) {\n\t\tsuper({\n\t\t\tbasePath: process.cwd() + sep,\n\t\t\tcapabilities: {},\n\t\t\tcoverage: [],\n\t\t\tenvironments: [],\n\t\t\tfunctionalCoverage: true,\n\t\t\tfunctionalSuites: [],\n\t\t\tfunctionalTimeouts: { connectTimeout: 30000 },\n\t\t\tinstrumenterOptions: {},\n\t\t\tmaxConcurrency: Infinity,\n\t\t\tname: 'node',\n\t\t\treporters: [],\n\t\t\trunInSync: false,\n\t\t\tserveOnly: false,\n\t\t\tserverPort: 9000,\n\t\t\tserverUrl: '',\n\t\t\tsocketPort: 9001,\n\t\t\ttunnel: 'selenium',\n\t\t\ttunnelOptions: { tunnelId: String(Date.now()) }\n\t\t});\n\n\t\tthis._sourceMaps = createSourceMapStore();\n\t\tthis._instrumentedMaps = createSourceMapStore();\n\t\tthis._errorFormatter = new ErrorFormatter(this);\n\t\tthis._coverageMap = createCoverageMap();\n\n\t\tthis.registerReporter('pretty', options => new Pretty(this, options));\n\t\tthis.registerReporter('simple', options => new Simple(this, options));\n\t\tthis.registerReporter('runner', options => new Runner(this, options));\n\t\tthis.registerReporter(\n\t\t\t'benchmark',\n\t\t\toptions => new Benchmark(this, options)\n\t\t);\n\t\tthis.registerReporter('junit', options => new JUnit(this, options));\n\t\tthis.registerReporter(\n\t\t\t'jsoncoverage',\n\t\t\toptions => new JsonCoverage(this, options)\n\t\t);\n\t\tthis.registerReporter(\n\t\t\t'htmlcoverage',\n\t\t\toptions => new HtmlCoverage(this, options)\n\t\t);\n\t\tthis.registerReporter('lcov', options => new Lcov(this, options));\n\t\tthis.registerReporter(\n\t\t\t'cobertura',\n\t\t\toptions => new Cobertura(this, options)\n\t\t);\n\t\tthis.registerReporter(\n\t\t\t'teamcity',\n\t\t\toptions => new TeamCity(this, options)\n\t\t);\n\n\t\tthis.registerTunnel('null', NullTunnel);\n\t\tthis.registerTunnel('selenium', SeleniumTunnel);\n\t\tthis.registerTunnel('saucelabs', SauceLabsTunnel);\n\t\tthis.registerTunnel('browserstack', BrowserStackTunnel);\n\t\tthis.registerTunnel('testingbot', TestingBotTunnel);\n\t\tthis.registerTunnel('cbt', CrossBrowserTestingTunnel);\n\n\t\tif (options) {\n\t\t\tthis.configure(options);\n\t\t}\n\n\t\t// Report uncaught errors\n\t\tprocess.on(\n\t\t\t'unhandledRejection',\n\t\t\t(reason: Error, promise: Promise<any>) => {\n\t\t\t\tconsole.warn('Unhandled rejection:', reason, promise);\n\t\t\t\tthis.emit('error', reason);\n\t\t\t}\n\t\t);\n\n\t\tprocess.on('uncaughtException', (reason: Error) => {\n\t\t\tconsole.warn('Unhandled error:', reason);\n\t\t\tthis.emit('error', reason);\n\t\t});\n\n\t\tthis.on('coverage', message => {\n\t\t\tthis._coverageMap.merge(message.coverage);\n\t\t});\n\t}\n\n\tget coverageMap() {\n\t\treturn this._coverageMap;\n\t}\n\n\tget environment(): RuntimeEnvironment {\n\t\treturn 'node';\n\t}\n\n\tget instrumentedMapStore() {\n\t\treturn this._instrumentedMaps;\n\t}\n\n\tget sourceMapStore() {\n\t\treturn this._sourceMaps;\n\t}\n\n\tget hasCoveredFiles() {\n\t\treturn this._coverageFiles && this._coverageFiles.length > 0;\n\t}\n\n\t/**\n\t * The root suites managed by this executor\n\t */\n\tget suites() {\n\t\tconst suites = [];\n\n\t\t// Only include the rootSuite if some suites were added to it.\n\t\tif (this._rootSuite.tests.length > 0) {\n\t\t\tsuites.push(this._rootSuite);\n\t\t}\n\n\t\tif (this._sessionSuites) {\n\t\t\tsuites.push(...this._sessionSuites);\n\t\t}\n\n\t\treturn suites;\n\t}\n\n\t/**\n\t * Override Executor#addSuite to handle functional suites\n\t */\n\taddSuite(factory: (parentSuite: Suite) => void) {\n\t\tif (this._loadingFunctionalSuites) {\n\t\t\tthis._sessionSuites.forEach(factory);\n\t\t} else {\n\t\t\tsuper.addSuite(factory);\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve a registered tunnel constructor\n\t */\n\tgetTunnel(name: string): typeof Tunnel {\n\t\treturn this.getPlugin<typeof Tunnel>(`tunnel.${name}`);\n\t}\n\n\t/**\n\t * Insert coverage instrumentation into a given code string\n\t */\n\tinstrumentCode(code: string, filename: string): string {\n\t\tthis.log('Instrumenting', filename);\n\t\tconst sourceMap = readSourceMap(filename, code);\n\t\tif (sourceMap) {\n\t\t\tthis._sourceMaps.registerMap(filename, sourceMap);\n\t\t}\n\n\t\ttry {\n\t\t\tconst newCode = this._instrumenter.instrumentSync(\n\t\t\t\tcode,\n\t\t\t\tnormalize(filename),\n\t\t\t\tsourceMap\n\t\t\t);\n\n\t\t\tthis._coverageMap.addFileCoverage(\n\t\t\t\tthis._instrumenter.lastFileCoverage()\n\t\t\t);\n\t\t\tthis._instrumentedMaps.registerMap(\n\t\t\t\tfilename,\n\t\t\t\tthis._instrumenter.lastSourceMap()\n\t\t\t);\n\n\t\t\treturn newCode;\n\t\t} catch (error) {\n\t\t\tthis.emit(\n\t\t\t\t'warning',\n\t\t\t\t`Error instrumenting ${filename}: ${error.message}`\n\t\t\t);\n\t\t\treturn code;\n\t\t}\n\t}\n\n\t/**\n\t * Load scripts using Node's require\n\t */\n\tloadScript(script: string | string[]) {\n\t\tconst scripts = Array.isArray(script) ? script : [script];\n\n\t\ttry {\n\t\t\tfor (const script of scripts) {\n\t\t\t\tconst file = resolve(script);\n\t\t\t\tif (existsSync(file)) {\n\t\t\t\t\trequire(file);\n\t\t\t\t} else {\n\t\t\t\t\t// `script` isn't a valid file path, so maybe it's a\n\t\t\t\t\t// Node-resolvable module\n\t\t\t\t\trequire(nodeResolve(script, { basedir: process.cwd() }));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\treturn Task.reject<void>(error);\n\t\t}\n\n\t\treturn Task.resolve();\n\t}\n\n\t/**\n\t * Register a tunnel constructor with the plugin system. It can be retrieved\n\t * later with getTunnel or getPlugin.\n\t */\n\tregisterTunnel(name: string, Ctor: typeof Tunnel) {\n\t\tthis.registerPlugin('tunnel', name, () => Ctor);\n\t}\n\n\t/**\n\t * Return true if a given file should be instrumented based on the current\n\t * config\n\t */\n\tshouldInstrumentFile(filename: string) {\n\t\treturn (\n\t\t\tthis._coverageFiles && this._coverageFiles.indexOf(filename) !== -1\n\t\t);\n\t}\n\n\tprotected _afterRun() {\n\t\treturn super._afterRun().finally(() => {\n\t\t\tthis._removeInstrumentationHooks();\n\n\t\t\tconst promises: Promise<any>[] = [];\n\t\t\tif (this.server) {\n\t\t\t\tpromises.push(\n\t\t\t\t\tthis.server\n\t\t\t\t\t\t.stop()\n\t\t\t\t\t\t.then(() => this.emit('serverEnd', <any>this.server))\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (this.tunnel) {\n\t\t\t\tpromises.push(\n\t\t\t\t\tthis.tunnel\n\t\t\t\t\t\t.stop()\n\t\t\t\t\t\t.then(() =>\n\t\t\t\t\t\t\tthis.emit('tunnelStop', { tunnel: this.tunnel })\n\t\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t\t// We do not want to actually return an array of values, so chain a\n\t\t\t// callback that resolves to undefined\n\t\t\treturn Promise.all(promises).then(\n\t\t\t\t() => {},\n\t\t\t\terror => this.emit('error', error)\n\t\t\t);\n\t\t});\n\t}\n\n\tprotected _beforeRun() {\n\t\treturn super._beforeRun().then(() => {\n\t\t\tconst config = this.config;\n\n\t\t\tconst suite = this._rootSuite;\n\t\t\tsuite.grep = config.grep;\n\t\t\tsuite.timeout = config.defaultTimeout;\n\t\t\tsuite.bail = config.bail;\n\n\t\t\tif (\n\t\t\t\t// Only start the server if there are remote environments *and*\n\t\t\t\t// either functionalSuites or browser suites\n\t\t\t\t(config.environments.filter(isRemoteEnvironment).length > 0 &&\n\t\t\t\t\tconfig.functionalSuites.length +\n\t\t\t\t\t\tconfig.browser.suites.length >\n\t\t\t\t\t\t0) ||\n\t\t\t\t// User can start the server without planning to run functional\n\t\t\t\t// tests\n\t\t\t\tconfig.serveOnly\n\t\t\t) {\n\t\t\t\tconst serverTask = new Task<void>((resolve, reject) => {\n\t\t\t\t\tconst server: Server = new Server({\n\t\t\t\t\t\tbasePath: config.basePath,\n\t\t\t\t\t\texecutor: this,\n\t\t\t\t\t\tport: config.serverPort,\n\t\t\t\t\t\trunInSync: config.runInSync,\n\t\t\t\t\t\tsocketPort: config.socketPort\n\t\t\t\t\t});\n\n\t\t\t\t\tserver\n\t\t\t\t\t\t.start()\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tthis.server = server;\n\t\t\t\t\t\t\treturn this.emit('serverStart', server);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(resolve, reject);\n\t\t\t\t});\n\n\t\t\t\t// If we're in serveOnly mode, just start the server server.\n\t\t\t\t// Don't create session suites or start a tunnel.\n\t\t\t\tif (config.serveOnly) {\n\t\t\t\t\treturn serverTask.then(() => {\n\t\t\t\t\t\t// In serveOnly mode we just start the server to static\n\t\t\t\t\t\t// file serving and instrumentation. Return an\n\t\t\t\t\t\t// unresolved Task to pause indefinitely until canceled.\n\t\t\t\t\t\treturn new Task<boolean>(resolve => {\n\t\t\t\t\t\t\tprocess.on('SIGINT', () => {\n\t\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn serverTask\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tconst tunnelOptions = config.tunnelOptions;\n\t\t\t\t\t\tif (config.tunnel === 'browserstack') {\n\t\t\t\t\t\t\tconst options = <BrowserStackOptions>tunnelOptions;\n\t\t\t\t\t\t\toptions.servers = options.servers || [];\n\t\t\t\t\t\t\toptions.servers.push(config.serverUrl);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ('proxy' in config && !('proxy' in tunnelOptions)) {\n\t\t\t\t\t\t\ttunnelOptions.proxy = config.proxy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet TunnelConstructor = this.getTunnel(config.tunnel);\n\t\t\t\t\t\tconst tunnel = (this.tunnel = new TunnelConstructor(\n\t\t\t\t\t\t\tthis.config.tunnelOptions\n\t\t\t\t\t\t));\n\n\t\t\t\t\t\ttunnel.on('downloadprogress', progress => {\n\t\t\t\t\t\t\tthis.emit('tunnelDownloadProgress', {\n\t\t\t\t\t\t\t\ttunnel,\n\t\t\t\t\t\t\t\tprogress\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\ttunnel.on('status', status => {\n\t\t\t\t\t\t\tthis.emit('tunnelStatus', {\n\t\t\t\t\t\t\t\ttunnel,\n\t\t\t\t\t\t\t\tstatus: status.status\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconfig.capabilities = deepMixin(\n\t\t\t\t\t\t\ttunnel.extraCapabilities,\n\t\t\t\t\t\t\tconfig.capabilities\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn this._createSessionSuites().then(() => {\n\t\t\t\t\t\t\treturn tunnel\n\t\t\t\t\t\t\t\t.start()\n\t\t\t\t\t\t\t\t.then(() =>\n\t\t\t\t\t\t\t\t\tthis.emit('tunnelStart', { tunnel })\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\t}\n\n\t/**\n\t * Creates suites for each environment in which tests will be executed. This\n\t * method will only be called if there are both environments and suites to\n\t * run.\n\t */\n\tprotected _createSessionSuites() {\n\t\tconst tunnel = this.tunnel;\n\t\tconst config = this.config;\n\n\t\tconst leadfootServer = new LeadfootServer(tunnel.clientUrl, {\n\t\t\tproxy: 'proxy' in config ? config.proxy : tunnel.proxy\n\t\t});\n\n\t\tconst executor = this;\n\n\t\t// Create a subclass of ProxiedSession here that will ensure the\n\t\t// executor is set\n\t\tclass InitializedProxiedSession extends ProxiedSession {\n\t\t\texecutor = executor;\n\t\t\tcoverageVariable = config.coverageVariable;\n\t\t\tbaseUrl = config.functionalBaseUrl || config.serverUrl;\n\t\t}\n\n\t\tleadfootServer.sessionConstructor = InitializedProxiedSession;\n\n\t\treturn tunnel.getEnvironments().then(tunnelEnvironments => {\n\t\t\tthis._sessionSuites = resolveEnvironments(\n\t\t\t\tconfig.capabilities,\n\t\t\t\tconfig.environments.filter(isRemoteEnvironment),\n\t\t\t\ttunnelEnvironments\n\t\t\t).map(environmentType => {\n\t\t\t\tlet session: ProxiedSession;\n\n\t\t\t\t// Create a new root suite for each environment\n\t\t\t\tconst suite = new Suite({\n\t\t\t\t\tname: String(environmentType),\n\t\t\t\t\tpublishAfterSetup: true,\n\t\t\t\t\tgrep: config.grep,\n\t\t\t\t\tbail: config.bail,\n\t\t\t\t\ttests: [],\n\t\t\t\t\ttimeout: config.defaultTimeout,\n\t\t\t\t\texecutor: this,\n\n\t\t\t\t\tbefore() {\n\t\t\t\t\t\texecutor.log('Creating session for', environmentType);\n\t\t\t\t\t\treturn leadfootServer\n\t\t\t\t\t\t\t.createSession<ProxiedSession>(environmentType)\n\t\t\t\t\t\t\t.then(_session => {\n\t\t\t\t\t\t\t\tsession = _session;\n\t\t\t\t\t\t\t\tthis.executor.log(\n\t\t\t\t\t\t\t\t\t'Created session:',\n\t\t\t\t\t\t\t\t\tsession.capabilities\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tlet remote: Remote = <Remote>new Command(\n\t\t\t\t\t\t\t\t\tsession\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tremote.environmentType = new Environment(\n\t\t\t\t\t\t\t\t\tsession.capabilities\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tthis.remote = remote;\n\t\t\t\t\t\t\t\tthis.sessionId = remote.session.sessionId;\n\n\t\t\t\t\t\t\t\t// Update the name with details from the remote\n\t\t\t\t\t\t\t\t// environment\n\t\t\t\t\t\t\t\tthis.name = remote.environmentType.toString();\n\n\t\t\t\t\t\t\t\tconst timeouts = config.functionalTimeouts;\n\t\t\t\t\t\t\t\tlet promise = Promise.resolve();\n\t\t\t\t\t\t\t\tif (timeouts.executeAsync != null) {\n\t\t\t\t\t\t\t\t\tpromise = promise.then(() =>\n\t\t\t\t\t\t\t\t\t\tremote.setExecuteAsyncTimeout(\n\t\t\t\t\t\t\t\t\t\t\ttimeouts.executeAsync!\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tthis.executor.log(\n\t\t\t\t\t\t\t\t\t\t'Set remote executeAsync timeout to ',\n\t\t\t\t\t\t\t\t\t\ttimeouts.executeAsync\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (timeouts.find != null) {\n\t\t\t\t\t\t\t\t\tpromise = promise.then(() =>\n\t\t\t\t\t\t\t\t\t\tremote.setFindTimeout(timeouts.find!)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tthis.executor.log(\n\t\t\t\t\t\t\t\t\t\t'Set remote find timeout to ',\n\t\t\t\t\t\t\t\t\t\ttimeouts.find\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (timeouts.pageLoad != null) {\n\t\t\t\t\t\t\t\t\tpromise = promise.then(() =>\n\t\t\t\t\t\t\t\t\t\tremote.setPageLoadTimeout(\n\t\t\t\t\t\t\t\t\t\t\ttimeouts.pageLoad!\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tthis.executor.log(\n\t\t\t\t\t\t\t\t\t\t'Set remote pageLoad timeout to ',\n\t\t\t\t\t\t\t\t\t\ttimeouts.pageLoad\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn promise;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t},\n\n\t\t\t\t\tafter() {\n\t\t\t\t\t\tconst remote = this.remote;\n\n\t\t\t\t\t\tif (remote) {\n\t\t\t\t\t\t\tconst endSession = () => {\n\t\t\t\t\t\t\t\t// Check for an error in this suite or a\n\t\t\t\t\t\t\t\t// sub-suite. This check is a bit more involved\n\t\t\t\t\t\t\t\t// than just checking for a local suite error or\n\t\t\t\t\t\t\t\t// failed tests since sub-suites may have\n\t\t\t\t\t\t\t\t// failures that don't result in failed tests.\n\t\t\t\t\t\t\t\tfunction hasError(suite: Suite): boolean {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tsuite.error != null ||\n\t\t\t\t\t\t\t\t\t\tsuite.numFailedTests > 0\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn suite.tests\n\t\t\t\t\t\t\t\t\t\t.filter(isSuite)\n\t\t\t\t\t\t\t\t\t\t.some(hasError);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn tunnel.sendJobState(\n\t\t\t\t\t\t\t\t\tremote.session.sessionId,\n\t\t\t\t\t\t\t\t\t{ success: !hasError(this) }\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tconfig.leaveRemoteOpen === true ||\n\t\t\t\t\t\t\t\t(config.leaveRemoteOpen === 'fail' &&\n\t\t\t\t\t\t\t\t\tthis.numFailedTests > 0)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\treturn endSession();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn remote.quit().finally(endSession);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// If browser-compatible unit tests were added to this executor,\n\t\t\t\t// add a RemoteSuite to the session suite. The RemoteSuite will\n\t\t\t\t// run the suites listed in config.browser.suites.\n\t\t\t\tif (config.browser.suites.length > 0) {\n\t\t\t\t\tsuite.add(new RemoteSuite());\n\t\t\t\t}\n\n\t\t\t\treturn suite;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Load functional test suites\n\t */\n\tprotected _loadFunctionalSuites() {\n\t\tthis._loadingFunctionalSuites = true;\n\t\tconst suites = this.config.functionalSuites;\n\t\treturn Task.resolve(this._loader(suites))\n\t\t\t.then(() => {\n\t\t\t\tthis.log('Loaded functional suites:', suites);\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tthis._loadingFunctionalSuites = false;\n\t\t\t});\n\t}\n\n\t/**\n\t * Override Executor#_loadSuites to set instrumentetion hooks before loading\n\t * suites\n\t */\n\tprotected _loadSuites() {\n\t\t// Don't load suites if there isn't a local environment, or if we're\n\t\t// in serveOnly mode\n\t\tif (\n\t\t\t!this.config.environments.some(isLocalEnvironment) ||\n\t\t\tthis.config.serveOnly\n\t\t) {\n\t\t\treturn Task.resolve();\n\t\t}\n\n\t\tif (this.hasCoveredFiles) {\n\t\t\tthis._setInstrumentationHooks();\n\t\t}\n\t\treturn super._loadSuites();\n\t}\n\n\tprotected _processOption(key: keyof Config, value: any) {\n\t\tif (!processOption(key, value, this.config, this)) {\n\t\t\tsuper._processOption(key, value);\n\t\t}\n\t}\n\n\tprotected _resolveConfig() {\n\t\treturn super._resolveConfig().then(() => {\n\t\t\tconst config = this.config;\n\n\t\t\tif (config.environments.length === 0) {\n\t\t\t\tthis.log(\"Adding default 'node' environment\");\n\t\t\t\tconfig.environments.push({ browserName: 'node' });\n\t\t\t}\n\n\t\t\tif (!config.internPath) {\n\t\t\t\tconfig.internPath = dirname(dirname(__dirname));\n\n\t\t\t\t// If internPath isn't under cwd, intern is most likely\n\t\t\t\t// symlinked into the project's node_modules. In that case, use\n\t\t\t\t// the package location as resolved from the project root.\n\t\t\t\tif (config.internPath.indexOf(process.cwd()) !== 0) {\n\t\t\t\t\t// nodeResolve will resolve to index.js; we want the base\n\t\t\t\t\t// intern directory\n\t\t\t\t\tconfig.internPath = dirname(\n\t\t\t\t\t\tnodeResolve('intern', {\n\t\t\t\t\t\t\tbasedir: process.cwd()\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t['basePath', 'internPath'].forEach(property => {\n\t\t\t\tconst key = <keyof Config>property;\n\t\t\t\tconfig[key] = normalizePathEnding(\n\t\t\t\t\tresolve(<string>config[key]),\n\t\t\t\t\tsep\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tif (config.benchmarkConfig) {\n\t\t\t\tconfig.reporters.push({\n\t\t\t\t\tname: 'benchmark',\n\t\t\t\t\toptions: config.benchmarkConfig\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._instrumentBasePath = config.basePath;\n\t\t\tthis._coverageFiles = [];\n\n\t\t\tif (config.coverage) {\n\t\t\t\t// Coverage file entries should be absolute paths\n\t\t\t\tthis._coverageFiles = expandFiles(config.coverage).map(path =>\n\t\t\t\t\tresolve(path)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!config.serverUrl) {\n\t\t\t\tconfig.serverUrl = `http://localhost:${config.serverPort}/`;\n\t\t\t}\n\n\t\t\t// Ensure URLs end with a '/'\n\t\t\t['serverUrl', 'functionalBaseUrl'].forEach(key => {\n\t\t\t\tconst property = <keyof Config>key;\n\t\t\t\tif (config[property]) {\n\t\t\t\t\tconfig[property] = (<string>config[property]).replace(\n\t\t\t\t\t\t/\\/*$/,\n\t\t\t\t\t\t'/'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (config.capabilities['idle-timeout'] == null) {\n\t\t\t\tconfig.capabilities['idle-timeout'] = 60;\n\t\t\t}\n\n\t\t\tif (!config.capabilities.name) {\n\t\t\t\tconfig.capabilities.name = 'intern';\n\t\t\t}\n\n\t\t\tconst buildId = process.env.TRAVIS_COMMIT || process.env.BUILD_TAG;\n\t\t\tif (buildId) {\n\t\t\t\tconfig.capabilities.build = buildId;\n\t\t\t}\n\n\t\t\t// Expand suite globs\n\t\t\tconfig.functionalSuites = expandFiles(config.functionalSuites);\n\n\t\t\t// Expand suite globs into the node and browser objects\n\t\t\tconfig.node.suites = expandFiles([\n\t\t\t\t...config.suites,\n\t\t\t\t...config.node.suites\n\t\t\t]);\n\t\t\tconfig.browser.suites = expandFiles([\n\t\t\t\t...config.suites,\n\t\t\t\t...config.browser.suites\n\t\t\t]);\n\n\t\t\t// Clear out the suites list after combining the suites\n\t\t\tdelete config.suites;\n\n\t\t\t// Install the instrumenter in resolve config so it will be able to\n\t\t\t// handle suites\n\t\t\tthis._instrumenter = createInstrumenter(\n\t\t\t\tmixin(\n\t\t\t\t\t{},\n\t\t\t\t\t{\n\t\t\t\t\t\tcoverageVariable: config.coverageVariable,\n\t\t\t\t\t\t...config.instrumenterOptions\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpreserveComments: true,\n\t\t\t\t\t\tproduceSourceMap: true\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t});\n\t}\n\n\tprotected _runTests() {\n\t\tlet testTask: Task<void>;\n\n\t\treturn new Task<void>(\n\t\t\t(resolve, reject) => {\n\t\t\t\tif (this._rootSuite.tests.length > 0) {\n\t\t\t\t\ttestTask = this._rootSuite.run();\n\t\t\t\t} else {\n\t\t\t\t\ttestTask = Task.resolve();\n\t\t\t\t}\n\n\t\t\t\ttestTask\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tif (!this._sessionSuites) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn this._loadFunctionalSuites().then(\n\t\t\t\t\t\t\t() => (testTask = this._runRemoteTests())\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t\t.then(resolve, reject);\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tif (testTask && testTask.state === State.Pending) {\n\t\t\t\t\ttestTask.cancel();\n\t\t\t\t}\n\t\t\t}\n\t\t).finally(() => {\n\t\t\t// For all files that are marked for coverage that weren't read,\n\t\t\t// read the file and instrument the code (adding it to the overall\n\t\t\t// coverage map)\n\t\t\tconst coveredFiles = this._coverageMap.files();\n\t\t\tconst uncoveredFiles = this._coverageFiles.filter(filename => {\n\t\t\t\treturn coveredFiles.indexOf(filename) === -1;\n\t\t\t});\n\t\t\tuncoveredFiles.forEach(filename => {\n\t\t\t\ttry {\n\t\t\t\t\tconst code = readFileSync(filename, { encoding: 'utf8' });\n\t\t\t\t\tthis.instrumentCode(code, filename);\n\t\t\t\t} catch (_error) {}\n\t\t\t});\n\t\t});\n\t}\n\n\tprotected _runRemoteTests() {\n\t\tconst config = this.config;\n\t\tconst sessionSuites = this._sessionSuites;\n\t\tconst queue = new FunctionQueue(config.maxConcurrency || Infinity);\n\n\t\tthis.log(\n\t\t\t'Running',\n\t\t\tsessionSuites.length,\n\t\t\t'suites with maxConcurrency',\n\t\t\tconfig.maxConcurrency\n\t\t);\n\n\t\tconst runTask = new Task(\n\t\t\t(resolve, reject) => {\n\t\t\t\tTask.all(\n\t\t\t\t\tsessionSuites.map(suite => {\n\t\t\t\t\t\tthis.log('Queueing suite', suite.name);\n\t\t\t\t\t\treturn queue.enqueue(() => {\n\t\t\t\t\t\t\tthis.log('Running suite', suite.name);\n\t\t\t\t\t\t\treturn suite.run();\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t).then(resolve, reject);\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tthis.log('Canceling remote tests');\n\t\t\t\tqueue.clear();\n\t\t\t}\n\t\t);\n\n\t\treturn runTask.then(() => {}).finally(() => {\n\t\t\tif (config.functionalCoverage !== false) {\n\t\t\t\t// Collect any local coverage generated by functional tests\n\t\t\t\tthis.log('Emitting coverage');\n\t\t\t\treturn this._emitCoverage('functional tests');\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Adds hooks for code coverage instrumentation in the Node.js loader.\n\t */\n\tprotected _setInstrumentationHooks() {\n\t\thookRunInThisContext(\n\t\t\tfilename => this.shouldInstrumentFile(filename),\n\t\t\t(code, filename) => this.instrumentCode(code, filename)\n\t\t);\n\t\tthis._unhookRequire = hookRequire(\n\t\t\tfilename => this.shouldInstrumentFile(filename),\n\t\t\t(code, filename) => this.instrumentCode(code, filename)\n\t\t);\n\t}\n\n\t/**\n\t * Removes instrumentation hooks\n\t */\n\tprotected _removeInstrumentationHooks() {\n\t\tunhookRunInThisContext();\n\t\tif (this._unhookRequire) {\n\t\t\tthis._unhookRequire();\n\t\t\tthis._unhookRequire = null;\n\t\t}\n\t}\n}\n\nexport { Config, EnvironmentSpec };\n\nexport interface NodePlugins extends Plugins {\n\ttunnel: typeof Tunnel;\n}\n\nexport interface Remote extends Command<any> {\n\tenvironmentType?: Environment;\n\tsetHeartbeatInterval(delay: number): Command<any>;\n}\n\nexport interface TunnelMessage {\n\ttunnel: Tunnel;\n\tprogress?: DownloadProgressEvent;\n\tstatus?: string;\n}\n\nexport interface NodeEvents extends Events {\n\t/** A test server has stopped */\n\tserverEnd: Server;\n\n\t/** A test server was started */\n\tserverStart: Server;\n\n\t/** Emitted as a Tunnel executable download is in process */\n\ttunnelDownloadProgress: TunnelMessage;\n\n\t/** A WebDriver tunnel has been opened */\n\ttunnelStart: TunnelMessage;\n\n\t/** A status update from a WebDriver tunnel */\n\ttunnelStatus: TunnelMessage;\n\n\t/** A WebDriver tunnel has been stopped */\n\ttunnelStop: TunnelMessage;\n}\n\n/**\n * A basic FIFO function queue to limit the number of currently executing\n * asynchronous functions.\n */\nclass FunctionQueue {\n\treadonly maxConcurrency: number;\n\tqueue: QueueEntry[];\n\tactiveTasks: Task<any>[];\n\tfuncTasks: Task<any>[];\n\n\tconstructor(maxConcurrency: number) {\n\t\tthis.maxConcurrency = maxConcurrency;\n\t\tthis.queue = [];\n\t\tthis.activeTasks = [];\n\t\tthis.funcTasks = [];\n\t}\n\n\tenqueue(func: () => Task<any>) {\n\t\tconst funcTask = new Task((resolve, reject) => {\n\t\t\tthis.queue.push({ func, resolve, reject });\n\t\t});\n\t\tthis.funcTasks.push(funcTask);\n\n\t\tif (this.activeTasks.length < this.maxConcurrency) {\n\t\t\tthis.next();\n\t\t}\n\n\t\treturn funcTask;\n\t}\n\n\tclear() {\n\t\tthis.activeTasks.forEach(task => task.cancel());\n\t\tthis.funcTasks.forEach(task => task.cancel());\n\t\tthis.activeTasks = [];\n\t\tthis.funcTasks = [];\n\t\tthis.queue = [];\n\t}\n\n\tnext() {\n\t\tif (this.queue.length > 0) {\n\t\t\tconst { func, resolve, reject } = this.queue.shift()!;\n\t\t\tconst task = func()\n\t\t\t\t.then(resolve, reject)\n\t\t\t\t.finally(() => {\n\t\t\t\t\t// Remove the task from the active task list and kick off\n\t\t\t\t\t// the next task\n\t\t\t\t\tpullFromArray(this.activeTasks, task);\n\t\t\t\t\tthis.next();\n\t\t\t\t});\n\t\t\tthis.activeTasks.push(task);\n\t\t}\n\t}\n}\n\ninterface QueueEntry {\n\tfunc: () => Task<any>;\n\tresolve: () => void;\n\treject: () => void;\n}\n\nfunction isRemoteEnvironment(environment: EnvironmentSpec) {\n\treturn environment.browserName !== 'node';\n}\n\nfunction isLocalEnvironment(environment: EnvironmentSpec) {\n\treturn !isRemoteEnvironment(environment);\n}\n"]}