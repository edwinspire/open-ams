{"version":3,"file":"tdd.js","sourceRoot":"","sources":["../../../../src/lib/interfaces/tdd.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This is the TDD interface for registering suites. Typically it will be\n * accessed using [[lib/executors/Executor.Executor.getInterface]], like:\n *\n * ```js\n * const { suite, test } = intern.getInterface('tdd');\n * ```\n *\n * It may also be imported as a module, like\n *\n * ```js\n * import { suite, test } from 'intern/lib/interfaces/tdd';\n * ```\n *\n * Suites are registered using callback functions, and tests can be registered\n * within the suite callbacks.\n *\n * ```js\n * suite('foo', () => {\n *     before(() => { ... });\n *     afterEach(() => { ... });\n *     test('bar', () => { ... });\n *     test('baz', () => { ... });\n * });\n */ /** */\nimport { after as _after } from '@dojo/core/aspect';\nimport global from '@dojo/shim/global';\nimport Suite, {\n\tSuiteProperties,\n\tSuiteLifecycleFunction,\n\tTestLifecycleFunction\n} from '../Suite';\nimport Test, { TestProperties } from '../Test';\nimport { Executor } from '../executors/Executor';\n\nexport interface TddInterface extends TddLifecycleInterface {\n\tsuite(name: string, factory: TddSuiteFactory): void;\n\ttest(name: string, test: TestProperties['test']): void;\n}\n\nexport interface TddLifecycleInterface {\n\tbefore(fn: SuiteProperties['before']): void;\n\tafter(fn: SuiteProperties['after']): void;\n\tbeforeEach(fn: SuiteProperties['beforeEach']): void;\n\tafterEach(fn: SuiteProperties['afterEach']): void;\n}\n\nexport type TddSuiteFactory = (suite: Suite) => void;\n\nexport function suite(name: string, factory: TddSuiteFactory) {\n\treturn _suite(global.intern, name, factory);\n}\n\nexport function test(name: string, test: TestProperties['test']) {\n\tif (!currentSuite) {\n\t\tthrow new Error('A test must be declared within a suite');\n\t}\n\tcurrentSuite.add(new Test({ name, test }));\n}\n\nexport function before(fn: SuiteProperties['before']) {\n\tif (!currentSuite) {\n\t\tthrow new Error(\n\t\t\t'A suite lifecycle method must be declared within a suite'\n\t\t);\n\t}\n\taspect(currentSuite, 'before', fn);\n}\n\nexport function after(fn: SuiteProperties['after']) {\n\tif (!currentSuite) {\n\t\tthrow new Error(\n\t\t\t'A suite lifecycle method must be declared within a suite'\n\t\t);\n\t}\n\taspect(currentSuite, 'after', fn);\n}\n\nexport function beforeEach(fn: SuiteProperties['beforeEach']) {\n\tif (!currentSuite) {\n\t\tthrow new Error(\n\t\t\t'A suite lifecycle method must be declared within a suite'\n\t\t);\n\t}\n\taspect(currentSuite, 'beforeEach', fn);\n}\n\nexport function afterEach(fn: SuiteProperties['afterEach']) {\n\tif (!currentSuite) {\n\t\tthrow new Error(\n\t\t\t'A suite lifecycle method must be declared within a suite'\n\t\t);\n\t}\n\taspect(currentSuite, 'afterEach', fn);\n}\n\nexport function getInterface(executor: Executor): TddInterface {\n\treturn {\n\t\tsuite(name: string, factory: TddSuiteFactory) {\n\t\t\treturn _suite(executor, name, factory);\n\t\t},\n\n\t\ttest,\n\t\tbefore,\n\t\tafter,\n\t\tbeforeEach,\n\t\tafterEach\n\t};\n}\n\nlet currentSuite: Suite | null;\n\nfunction registerSuite(name: string, factory: TddSuiteFactory) {\n\tconst parent = currentSuite!;\n\n\tcurrentSuite = new Suite({ name, parent });\n\tparent.add(currentSuite);\n\n\tfactory(currentSuite);\n\n\tcurrentSuite = parent;\n}\n\nfunction _suite(executor: Executor, name: string, factory: TddSuiteFactory) {\n\tif (!currentSuite) {\n\t\texecutor.addSuite(parent => {\n\t\t\tcurrentSuite = parent;\n\t\t\tregisterSuite(name, factory);\n\t\t\tcurrentSuite = null;\n\t\t});\n\t} else {\n\t\tregisterSuite(name, factory);\n\t}\n}\n\nfunction aspect(\n\tsuite: Suite,\n\tmethod: string,\n\tcallback: SuiteLifecycleFunction | TestLifecycleFunction\n) {\n\t_after(suite, method, (originalReturn: any, args: IArguments) => {\n\t\treturn Promise.resolve(originalReturn).then(() => {\n\t\t\treturn callback.apply(currentSuite, args);\n\t\t});\n\t});\n}\n"]}