{"version":3,"file":"benchmark.js","sourceRoot":"","sources":["../../../../src/lib/interfaces/benchmark.ts"],"names":[],"mappings":";;;;;;;;;;;IAGA,4CAAuC;IAGvC,mCAAiE;IACjE,kDAG0B;IAC1B,oDAA6E;IAK7E,uBACC,IAAY,EACZ,mBAGiB;QAEjB,MAAM,CAAC,cAAc,CAAC,gBAAM,CAAC,MAAM,EAAE,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACjE,CAAC;IARD,gCAQC;IAKD,sBAA6B,QAAkB;QAC9C,MAAM,CAAC;YACN,aAAa,YACZ,IAAY,EACZ,mBAGiB;gBAEjB,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,EAAE,mBAAmB,CAAC,CAAC;YAC5D,CAAC;YAED,KAAK,EAAE,uBAAa,CAAC,KAAK;SAC1B,CAAC;IACH,CAAC;IAdD,oCAcC;IAiCD,wBACC,QAAkB,EAClB,IAAY,EACZ,mBAGiB;QAGjB,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YAChC,QAAQ,CAAC,GAAG,CACX,kCAAkC;gBACjC,IAAI;gBACJ,mCAAmC,CACpC,CAAC;YACF,MAAM,CAAC;QACR,CAAC;QAED,QAAQ,CAAC,QAAQ,CAAC,UAAA,MAAM;YAKvB,IAAI,UAAqD,CAAC;YAE1D,EAAE,CAAC,CACF,iCAAwB,CAAwB,mBAAmB,CACpE,CAAC,CAAC,CAAC;gBACF,UAAU,GAAG,mBAAmB,EAAE,CAAC;YACpC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,UAAU,GAAG,mBAAmB,CAAC;YAClC,CAAC;YAED,MAAM,CAAC,GAAG,CACT,oBAAW,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,wBAAc,EAAE,uBAAa,CAAC,CACpE,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC","sourcesContent":["/**\n * Interface for registering benchmark suites\n */ /** */\nimport global from '@dojo/shim/global';\n\nimport { Executor } from '../executors/Executor';\nimport { createSuite, isSuiteDescriptorFactory } from './object';\nimport BenchmarkTest, {\n\tBenchmarkDeferredTestFunction,\n\tBenchmarkTestFunction\n} from '../BenchmarkTest';\nimport BenchmarkSuite, { BenchmarkSuiteProperties } from '../BenchmarkSuite';\n\n/**\n * Importable interface that uses the currently installed global executor\n */\nexport default function registerSuite(\n\tname: string,\n\tdescriptorOrFactory:\n\t\t| BenchmarkSuiteDescriptor\n\t\t| BenchmarkSuiteFactory\n\t\t| BenchmarkTests\n) {\n\treturn _registerSuite(global.intern, name, descriptorOrFactory);\n}\n\n/**\n * Interface factory used by Executor\n */\nexport function getInterface(executor: Executor) {\n\treturn {\n\t\tregisterSuite(\n\t\t\tname: string,\n\t\t\tdescriptorOrFactory:\n\t\t\t\t| BenchmarkSuiteDescriptor\n\t\t\t\t| BenchmarkSuiteFactory\n\t\t\t\t| BenchmarkTests\n\t\t) {\n\t\t\treturn _registerSuite(executor, name, descriptorOrFactory);\n\t\t},\n\n\t\tasync: BenchmarkTest.async\n\t};\n}\n\nexport interface BenchmarkInterface {\n\tregisterSuite(\n\t\tname: string,\n\t\tdescriptor:\n\t\t\t| BenchmarkSuiteDescriptor\n\t\t\t| BenchmarkSuiteFactory\n\t\t\t| BenchmarkTests\n\t): void;\n\n\tasync: (\n\t\ttestFunction: BenchmarkDeferredTestFunction,\n\t\tnumCallsUntilResolution?: number\n\t) => BenchmarkTestFunction;\n}\n\nexport interface BenchmarkTests {\n\t[name: string]:\n\t\t| BenchmarkSuiteDescriptor\n\t\t| BenchmarkTestFunction\n\t\t| BenchmarkTests;\n}\n\nexport interface BenchmarkSuiteDescriptor\n\textends Partial<BenchmarkSuiteProperties> {\n\ttests: BenchmarkTests;\n}\n\nexport interface BenchmarkSuiteFactory {\n\t(): BenchmarkSuiteDescriptor | BenchmarkTests;\n}\n\nfunction _registerSuite(\n\texecutor: Executor,\n\tname: string,\n\tdescriptorOrFactory:\n\t\t| BenchmarkSuiteDescriptor\n\t\t| BenchmarkSuiteFactory\n\t\t| BenchmarkTests\n) {\n\t// Only register benchmark suites if we're in benchmark mode\n\tif (!executor.config.benchmark) {\n\t\texecutor.log(\n\t\t\t'Not registering benchmark suite ' +\n\t\t\t\tname +\n\t\t\t\t' because benchmarking is disabled'\n\t\t);\n\t\treturn;\n\t}\n\n\texecutor.addSuite(parent => {\n\t\t// Enable per-suite closure, to match feature parity with other\n\t\t// interfaces like tdd/bdd more closely; without this, it becomes\n\t\t// impossible to use the object interface for functional tests since\n\t\t// there is no other way to create a closure for each main suite\n\t\tlet descriptor: BenchmarkSuiteDescriptor | BenchmarkTests;\n\n\t\tif (\n\t\t\tisSuiteDescriptorFactory<BenchmarkSuiteFactory>(descriptorOrFactory)\n\t\t) {\n\t\t\tdescriptor = descriptorOrFactory();\n\t\t} else {\n\t\t\tdescriptor = descriptorOrFactory;\n\t\t}\n\n\t\tparent.add(\n\t\t\tcreateSuite(name, parent, descriptor, BenchmarkSuite, BenchmarkTest)\n\t\t);\n\t});\n}\n"]}