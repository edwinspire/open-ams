{"version":3,"file":"Server.js","sourceRoot":"","sources":["../../../src/lib/Server.ts"],"names":[],"mappings":"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","sourcesContent":["import { json, urlencoded } from 'body-parser';\nimport * as express from 'express';\nimport { Server as HttpServer } from 'http';\nimport { Socket } from 'net';\nimport * as WebSocket from 'ws';\nimport { after } from '@dojo/core/aspect';\nimport { mixin } from '@dojo/core/lang';\nimport { Handle } from '@dojo/core/interfaces';\n\nimport { pullFromArray } from './common/util';\nimport Node from './executors/Node';\nimport { Message } from './channels/Base';\n\nimport instrument from './middleware/instrument';\nimport unhandled from './middleware/unhandled';\nimport finalError from './middleware/finalError';\nimport resolveSuites from './middleware/resolveSuites';\nimport post from './middleware/post';\n\nexport interface Context {\n\treadonly stopped: boolean;\n\treadonly basePath: string;\n\treadonly executor: Node;\n\thandleMessage(message: Message): Promise<any>;\n}\n\nexport default class Server implements ServerProperties {\n\t/** Executor managing this Server */\n\treadonly executor: Node;\n\n\t/** Base path to resolve file requests against */\n\tbasePath: string;\n\n\t/** Port to use for HTTP connections */\n\tport: number;\n\n\t/**\n\t * If true, wait for emit handlers to complete before responding to a\n\t * message\n\t */\n\trunInSync: boolean;\n\n\t/** Port to use for WebSocket connections */\n\tsocketPort: number;\n\n\tget stopped() {\n\t\treturn !this._httpServer;\n\t}\n\n\tprotected _app: express.Express | null;\n\tprotected _httpServer: HttpServer | null;\n\tprotected _sessions: { [id: string]: { listeners: ServerListener[] } };\n\tprotected _wsServer: WebSocket.Server | null;\n\n\tconstructor(options: ServerOptions) {\n\t\tmixin(\n\t\t\tthis,\n\t\t\t{\n\t\t\t\tbasePath: '.',\n\t\t\t\trunInSync: false\n\t\t\t},\n\t\t\toptions\n\t\t);\n\t}\n\n\tstart() {\n\t\treturn new Promise<void>(resolve => {\n\t\t\tconst app = (this._app = express());\n\t\t\tthis._sessions = {};\n\n\t\t\tthis.executor.log(\n\t\t\t\t'Listening for WebSocket connections on port',\n\t\t\t\tthis.socketPort\n\t\t\t);\n\t\t\tthis._wsServer = new WebSocket.Server({ port: this.socketPort });\n\t\t\tthis._wsServer.on('connection', client => {\n\t\t\t\tthis.executor.log('WebSocket connection opened:', client);\n\t\t\t\tthis._handleWebSocket(client);\n\t\t\t});\n\t\t\tthis._wsServer.on('error', error => {\n\t\t\t\tthis.executor.emit('error', error);\n\t\t\t});\n\n\t\t\tconst context = Object.create(null, {\n\t\t\t\tstopped: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: () => this.stopped\n\t\t\t\t},\n\t\t\t\tbasePath: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: () => this.basePath\n\t\t\t\t},\n\t\t\t\texecutor: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: () => this.executor\n\t\t\t\t},\n\t\t\t\thandleMessage: {\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\twritable: false,\n\t\t\t\t\tconfigurable: false,\n\t\t\t\t\tvalue: (message: Message) => this._handleMessage(message)\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Add \"intern\" object to both request and response objects\n\t\t\tObject.defineProperty(app.request, 'intern', {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: () => context\n\t\t\t});\n\t\t\tObject.defineProperty(app.response, 'intern', {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: () => context\n\t\t\t});\n\n\t\t\t// Handle JSON and form-encoded request bodies\n\t\t\tapp.use(json({ limit: '1mb' }), urlencoded({ extended: true }));\n\n\t\t\t// Log all requests\n\t\t\tapp.use((request, _response, next) => {\n\t\t\t\tthis.executor.log(\n\t\t\t\t\t`${request.method} request for ${request.url}`\n\t\t\t\t);\n\t\t\t\treturn next();\n\t\t\t});\n\n\t\t\tconst internPath = this.executor.config.internPath;\n\n\t\t\t// Allow resolution using both __intern and node_modules/intern.\n\t\t\t// Note that internPath will always end with a '/'.\n\t\t\tapp.use(\n\t\t\t\t[\n\t\t\t\t\t`/${internPath}__resolveSuites__`,\n\t\t\t\t\t'/__intern/__resolveSuites__'\n\t\t\t\t],\n\t\t\t\tresolveSuites(context)\n\t\t\t);\n\n\t\t\t// Map __intern to config.internPath\n\t\t\tapp.use(\n\t\t\t\t'/__intern',\n\t\t\t\texpress.static(internPath, { fallthrough: false })\n\t\t\t);\n\n\t\t\t// TODO: Allow user to add middleware here\n\n\t\t\tapp.use(\n\t\t\t\tinstrument(context),\n\t\t\t\texpress.static(this.basePath),\n\t\t\t\tpost(context),\n\t\t\t\tunhandled(),\n\t\t\t\tfinalError()\n\t\t\t);\n\n\t\t\tconst server = (this._httpServer = app.listen(this.port, () => {\n\t\t\t\tresolve();\n\t\t\t}));\n\n\t\t\tconst sockets: Socket[] = [];\n\n\t\t\t// If sockets are not manually destroyed then Node.js will keep\n\t\t\t// itself running until they all expire\n\t\t\tafter(server, 'close', function() {\n\t\t\t\tlet socket: Socket | undefined;\n\t\t\t\twhile ((socket = sockets.pop())) {\n\t\t\t\t\tsocket.destroy();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tserver.on('connection', socket => {\n\t\t\t\tsockets.push(socket);\n\t\t\t\tthis.executor.log(\n\t\t\t\t\t'HTTP connection opened,',\n\t\t\t\t\tsockets.length,\n\t\t\t\t\t'open connections'\n\t\t\t\t);\n\n\t\t\t\tsocket.on('close', () => {\n\t\t\t\t\tlet index = sockets.indexOf(socket);\n\t\t\t\t\tindex !== -1 && sockets.splice(index, 1);\n\t\t\t\t\tthis.executor.log(\n\t\t\t\t\t\t'HTTP connection closed,',\n\t\t\t\t\t\tsockets.length,\n\t\t\t\t\t\t'open connections'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tstop() {\n\t\tthis.executor.log('Stopping server...');\n\t\tconst promises: Promise<any>[] = [];\n\n\t\tif (this._app && this._httpServer) {\n\t\t\tpromises.push(\n\t\t\t\tnew Promise(resolve => {\n\t\t\t\t\tthis._httpServer!.close(resolve);\n\t\t\t\t}).then(() => {\n\t\t\t\t\tthis.executor.log('Stopped http server');\n\t\t\t\t\tthis._app = this._httpServer = null;\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\tif (this._wsServer) {\n\t\t\tpromises.push(\n\t\t\t\tnew Promise(resolve => {\n\t\t\t\t\tthis._wsServer!.close(resolve);\n\t\t\t\t}).then(() => {\n\t\t\t\t\tthis.executor.log('Stopped ws server');\n\t\t\t\t\tthis._wsServer = null;\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\treturn Promise.all(promises);\n\t}\n\n\t/**\n\t * Listen for all events for a specific session\n\t */\n\tsubscribe(sessionId: string, listener: ServerListener): Handle {\n\t\tconst listeners = this._getSession(sessionId).listeners;\n\t\tlisteners.push(listener);\n\t\treturn {\n\t\t\tdestroy: function(this: any) {\n\t\t\t\tthis.destroy = function() {};\n\t\t\t\tpullFromArray(listeners, listener);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _getSession(sessionId: string) {\n\t\tlet session = this._sessions[sessionId];\n\t\tif (!session) {\n\t\t\tsession = this._sessions[sessionId] = { listeners: [] };\n\t\t}\n\t\treturn session;\n\t}\n\n\tprivate _handleMessage(message: Message): Promise<any> {\n\t\tthis.executor.log(\n\t\t\t'Processing message [',\n\t\t\tmessage.id,\n\t\t\t'] for ',\n\t\t\tmessage.sessionId,\n\t\t\t': ',\n\t\t\tmessage.name\n\t\t);\n\n\t\tconst promise = this._publish(message);\n\t\tif (getShouldWait(this.runInSync, message)) {\n\t\t\treturn promise;\n\t\t}\n\n\t\t// If we're not returning the promise, catch any errors to avoid\n\t\t// unhandled rejections\n\t\tpromise.catch(error => {\n\t\t\tthis.executor.emit('error', error);\n\t\t});\n\n\t\treturn resolvedPromise;\n\t}\n\n\tprivate _handleWebSocket(client: WebSocket) {\n\t\tclient.on('message', data => {\n\t\t\tthis.executor.log('Received WebSocket message');\n\t\t\tconst message: Message = JSON.parse(data);\n\t\t\tthis._handleMessage(message)\n\t\t\t\t.catch(error => this.executor.emit('error', error))\n\t\t\t\t.then(() => {\n\t\t\t\t\tthis.executor.log('Sending ack for [', message.id, ']');\n\t\t\t\t\tclient.send(JSON.stringify({ id: message.id }), error => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\tthis.executor.emit(\n\t\t\t\t\t\t\t\t'error',\n\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t`Error sending ack for [ ${message.id} ]: ${\n\t\t\t\t\t\t\t\t\t\terror.message\n\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t});\n\n\t\tclient.on('error', error => {\n\t\t\tthis.executor.log('WebSocket client error:', error);\n\t\t\tthis.executor.emit('error', error);\n\t\t});\n\t}\n\n\tprivate _publish(message: Message) {\n\t\tconst listeners = this._getSession(message.sessionId).listeners;\n\t\treturn Promise.all(\n\t\t\tlisteners.map(listener => listener(message.name, message.data))\n\t\t);\n\t}\n}\n\nexport interface ServerProperties {\n\tbasePath: string;\n\texecutor: Node;\n\tport: number;\n\trunInSync: boolean;\n\tsocketPort: number;\n}\n\nexport interface ServerListener {\n\t(name: string, data?: any): void;\n}\n\nexport type ServerOptions = Partial<ServerProperties> & { executor: Node };\n\nconst resolvedPromise = Promise.resolve();\n\n/**\n * Indicate whether Server should wait for an event to process before sending an\n * acknowlegement.\n */\nfunction getShouldWait(waitMode: string | boolean, message: Message) {\n\tlet eventName = message.name;\n\n\t// never wait for runEnd\n\tif (eventName === 'runEnd') {\n\t\treturn false;\n\t}\n\n\tlet shouldWait = false;\n\n\tif (waitMode === 'fail') {\n\t\tif (\n\t\t\t(eventName === 'testEnd' && message.data.error) ||\n\t\t\t(eventName === 'suiteEnd' && message.data.error) ||\n\t\t\teventName === 'error'\n\t\t) {\n\t\t\tshouldWait = true;\n\t\t}\n\t} else if (waitMode === true) {\n\t\tshouldWait = true;\n\t} else if (Array.isArray(waitMode) && waitMode.indexOf(eventName) !== -1) {\n\t\tshouldWait = true;\n\t}\n\n\treturn shouldWait;\n}\n"]}