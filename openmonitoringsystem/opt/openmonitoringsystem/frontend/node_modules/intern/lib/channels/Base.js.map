{"version":3,"file":"Base.js","sourceRoot":"","sources":["../../../../src/lib/channels/Base.ts"],"names":[],"mappings":";;;;;;;;;;;IAGA;QAIC,qBAAY,OAAuB;YAClC,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;YACvB,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACpC,CAAC;QAMD,iCAAW,GAAX,UAAY,IAAwB,EAAE,IAAS;YAC9C,EAAE,CAAC,CAAC,IAAI,YAAY,KAAK,CAAC,CAAC,CAAC;gBAC3B,IAAI,GAAG;oBACN,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,KAAK,EAAE,IAAI,CAAC,KAAK;iBACjB,CAAC;YACH,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACnC,CAAC;QAMF,kBAAC;IAAD,CAAC,AA7BD,IA6BC;;IAeD,mBAA0B,KAAU;QACnC,MAAM,CAAC,CACN,KAAK;YACL,OAAO,KAAK,KAAK,QAAQ;YACzB,OAAO,KAAK,CAAC,WAAW,KAAK,UAAU,CACvC,CAAC;IACH,CAAC;IAND,8BAMC","sourcesContent":["import Task from '@dojo/core/async/Task';\nimport { RemoteEvents } from '../RemoteSuite';\n\nexport default abstract class BaseChannel {\n\treadonly url: string;\n\treadonly sessionId: string;\n\n\tconstructor(options: ChannelOptions) {\n\t\tthis.url = options.url;\n\t\tthis.sessionId = options.sessionId;\n\t}\n\n\t/**\n\t * Send a message, or schedule it to be sent. Return a promise that resolves\n\t * when the message has been sent.\n\t */\n\tsendMessage(name: keyof RemoteEvents, data: any) {\n\t\tif (data instanceof Error) {\n\t\t\tdata = {\n\t\t\t\tname: data.name,\n\t\t\t\tmessage: data.message,\n\t\t\t\tstack: data.stack\n\t\t\t};\n\t\t}\n\n\t\treturn this._sendData(name, data);\n\t}\n\n\tprotected abstract _sendData(\n\t\tname: keyof RemoteEvents,\n\t\tdata: any\n\t): Task<any>;\n}\n\nexport interface ChannelOptions {\n\tsessionId: string;\n\n\t/** An HTTP URL that the testing host can be reached at */\n\turl: string;\n\n\t/** A websocket port */\n\tport?: number;\n\n\t/** A timeout for websocket responses */\n\ttimeout?: number;\n}\n\nexport function isChannel(value: any): value is BaseChannel {\n\treturn (\n\t\tvalue &&\n\t\ttypeof value === 'object' &&\n\t\ttypeof value.sendMessage === 'function'\n\t);\n}\n\nexport interface ChannelOptions {\n\tsessionId: string;\n\turl: string;\n\n\t/** A WebSocket port */\n\tport?: number;\n\n\t/** A timeout for WebSocket responses */\n\ttimeout?: number;\n}\n\nexport interface Message {\n\tsessionId: string;\n\tid: string;\n\tname: string;\n\tdata: any;\n}\n"]}