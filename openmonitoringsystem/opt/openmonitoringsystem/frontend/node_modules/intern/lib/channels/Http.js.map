{"version":3,"file":"Http.js","sourceRoot":"","sources":["../../../../src/lib/channels/Http.ts"],"names":[],"mappings":"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","sourcesContent":["import request from '@dojo/core/request/providers/xhr';\nimport Task from '@dojo/core/async/Task';\n\nimport { RemoteEvents } from '../RemoteSuite';\nimport BaseChannel, { ChannelOptions, Message } from './Base';\n\nexport default class HttpChannel extends BaseChannel {\n\tprotected _lastRequest: Task<void>;\n\tprotected _messageBuffer: MessageEntry[];\n\tprotected _sequence: number;\n\tprotected _maxPostSize: number;\n\tprotected _activeRequest: Task<any> | undefined;\n\n\tconstructor(options: HttpChannelOptions) {\n\t\tsuper(options);\n\t\tthis._sequence = 1;\n\t\tthis._maxPostSize = options.maxPostSize || 100000;\n\t\tthis._messageBuffer = [];\n\t\tthis._lastRequest = Task.resolve();\n\t}\n\n\tprotected _sendData(name: keyof RemoteEvents, data: any) {\n\t\tconst id = String(this._sequence++);\n\t\tconst sessionId = this.sessionId;\n\t\tconst message: Message = { id, sessionId, name, data };\n\t\tconst task = new Task(\n\t\t\t(resolve, reject) => {\n\t\t\t\tthis._messageBuffer.push({\n\t\t\t\t\tmessage: JSON.stringify(message),\n\t\t\t\t\tresolve,\n\t\t\t\t\treject\n\t\t\t\t});\n\n\t\t\t\tif (this._activeRequest) {\n\t\t\t\t\tthis._activeRequest.then(() => this._sendMessages());\n\t\t\t\t} else {\n\t\t\t\t\tthis._sendMessages();\n\t\t\t\t}\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tif (this._activeRequest) {\n\t\t\t\t\tthis._activeRequest.cancel();\n\t\t\t\t}\n\t\t\t\tthis._messageBuffer = [];\n\t\t\t}\n\t\t);\n\n\t\treturn task;\n\t}\n\n\t/**\n\t * Some testing services have problems handling large message POSTs, so\n\t * limit the maximum size of each POST body to maxPostSize bytes. Always\n\t * send at least one message, even if it's more than maxPostSize bytes.\n\t */\n\tprotected _sendMessages(): Task<any> | undefined {\n\t\tconst messages = this._messageBuffer;\n\t\tif (messages.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst block = [messages.shift()!];\n\n\t\tlet size = block[0].message.length;\n\t\twhile (\n\t\t\tmessages.length > 0 &&\n\t\t\tsize + messages[0].message.length < this._maxPostSize\n\t\t) {\n\t\t\tsize += messages[0].message.length;\n\t\t\tblock.push(messages.shift()!);\n\t\t}\n\n\t\tthis._activeRequest = request(this.url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\tbody: JSON.stringify(block.map(entry => entry.message))\n\t\t})\n\t\t\t.then(response => {\n\t\t\t\treturn response.json<any[]>();\n\t\t\t})\n\t\t\t.then((results: any[]) => {\n\t\t\t\tblock.forEach((entry, index) => {\n\t\t\t\t\tentry.resolve(results[index]);\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tblock.forEach(entry => {\n\t\t\t\t\tentry.reject(error);\n\t\t\t\t});\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tthis._activeRequest = undefined;\n\t\t\t\tif (messages.length > 0) {\n\t\t\t\t\treturn this._sendMessages();\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn this._activeRequest;\n\t}\n}\n\nexport interface HttpChannelOptions extends ChannelOptions {\n\tmaxPostSize?: number;\n}\n\nexport interface MessageEntry {\n\tmessage: string;\n\tresolve: (value: any) => void;\n\treject: (error: Error) => void;\n}\n"]}