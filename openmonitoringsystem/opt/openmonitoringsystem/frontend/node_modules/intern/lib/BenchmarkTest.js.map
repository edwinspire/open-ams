{"version":3,"file":"BenchmarkTest.js","sourceRoot":"","sources":["../../../src/lib/BenchmarkTest.ts"],"names":[],"mappings":"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","sourcesContent":["import Task from '@dojo/core/async/Task';\nimport { mixin } from '@dojo/core/lang';\n\n// Explicitly require benchmark dependencies and attach Benchmark to them to\n// improve WebPack compatibility\nimport * as _ from 'lodash';\nimport * as platform from 'platform';\nimport * as Benchmark from 'benchmark';\n\nimport Test, {\n\tisTest,\n\tSKIP,\n\tTestFunction,\n\tTestOptions,\n\tTestProperties\n} from './Test';\nimport { InternError } from './types';\nimport Deferred from './Deferred';\n\n// TODO: remove the <any> cast when benchmark typings are updated to include\n// runInContext\n(<any>Benchmark).runInContext({ _, platform });\n\n/**\n * BenchmarkTest wraps a Benchmark.js Benchmark, mapping its API to that used by\n * [[lib/Test]].\n */\nexport default class BenchmarkTest extends Test {\n\t/** The test function managed by this test */\n\ttest: BenchmarkTestFunction;\n\n\t/** The Benchmark.js test that actually performs benchmarking */\n\tbenchmark: InternBenchmark;\n\n\tconstructor(descriptor: BenchmarkTestOptions) {\n\t\t// Call the superclass constructor with the set of descriptor keys not\n\t\t// specific to BenchmarkTest\n\t\tlet args: TestOptions = <TestOptions>{};\n\t\tObject.keys(descriptor).forEach(descriptorKey => {\n\t\t\tconst key = <keyof BenchmarkTestOptions>descriptorKey;\n\t\t\tswitch (key) {\n\t\t\t\tcase 'options':\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\targs[<keyof TestOptions>key] = descriptor[key];\n\t\t\t}\n\t\t});\n\n\t\targs.test = args.test || /* istanbul ignore next */ function() {};\n\n\t\tsuper(args);\n\n\t\tconst options: BenchmarkOptions = mixin({}, this.test.options || {}, {\n\t\t\tasync: true,\n\t\t\tsetup: createLifecycle(true),\n\t\t\tteardown: createLifecycle(false)\n\t\t});\n\n\t\tif (options.defer) {\n\t\t\tthis.test = (function(testFunction: BenchmarkTestFunction) {\n\t\t\t\treturn <BenchmarkDeferredTestFunction>function(\n\t\t\t\t\tthis: BenchmarkTest,\n\t\t\t\t\tdeferred?: Deferred<any>\n\t\t\t\t) {\n\t\t\t\t\t// deferred is optional for compat with\n\t\t\t\t\t// BenchmarkTestFunction, but it will always be defined here\n\t\t\t\t\tconst dfd = createDeferred(\n\t\t\t\t\t\tthis.benchmark,\n\t\t\t\t\t\tdeferred!,\n\t\t\t\t\t\toptions.numCallsUntilResolution\n\t\t\t\t\t);\n\t\t\t\t\ttestFunction.call(this, dfd);\n\t\t\t\t};\n\t\t\t})(this.test);\n\t\t}\n\n\t\tthis.benchmark = new Benchmark(\n\t\t\tdescriptor.name,\n\t\t\toptions.defer\n\t\t\t\t? 'this.benchmark.internTest.test(deferred);'\n\t\t\t\t: 'this.internTest.test();',\n\t\t\toptions\n\t\t);\n\n\t\tObject.defineProperty(this.benchmark, 'name', {\n\t\t\tget: () => {\n\t\t\t\treturn this.name;\n\t\t\t},\n\t\t\tset: name => {\n\t\t\t\tthis.name = name;\n\t\t\t}\n\t\t});\n\n\t\tthis.benchmark.internTest = this;\n\t}\n\n\t/**\n\t * The number of milliseconds the test function took to complete.\n\t */\n\tget timeElapsed() {\n\t\tif (this.benchmark && this.benchmark.times) {\n\t\t\treturn this.benchmark.times.elapsed;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tset timeElapsed(_value: number) {\n\t\t// ignore\n\t}\n\n\tasync(_timeout?: number, _numCallsUntilResolution?: number): Deferred<any> {\n\t\tthrow new Error(\n\t\t\t'Benchmark tests must be marked as asynchronous and use the deferred ' +\n\t\t\t\t'passed to them rather than call `this.async()`.'\n\t\t);\n\t}\n\n\trun(): Task<void> {\n\t\tthis._hasPassed = false;\n\t\tthis._usesRemote = false;\n\n\t\tconst benchmark = this.benchmark;\n\n\t\treturn new Task(\n\t\t\t(resolve, reject) => {\n\t\t\t\tbenchmark.on('abort', () => {\n\t\t\t\t\treject(benchmark.error);\n\t\t\t\t});\n\n\t\t\t\tbenchmark.on('error', () => {\n\t\t\t\t\tif (benchmark.error === SKIP) {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(benchmark.error);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tbenchmark.on('complete', () => {\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\n\t\t\t\tthis.executor.emit('testStart', this).then(() => {\n\t\t\t\t\tbenchmark.run();\n\t\t\t\t});\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tbenchmark.abort();\n\t\t\t}\n\t\t)\n\t\t\t.finally(() => {\n\t\t\t\t// Stop listening for benchmark events once the test is finished\n\t\t\t\tbenchmark.off();\n\t\t\t})\n\t\t\t.then(\n\t\t\t\t() => {\n\t\t\t\t\tthis._hasPassed = true;\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\tthis.error = error;\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t)\n\t\t\t.finally(() => this.executor.emit('testEnd', this));\n\t}\n\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\t\tconst benchmark = this.benchmark;\n\n\t\tjson.benchmark = {\n\t\t\thz: benchmark.hz,\n\t\t\ttimes: benchmark.times,\n\t\t\tstats: benchmark.stats\n\t\t};\n\n\t\treturn json;\n\t}\n\n\tstatic async(\n\t\ttestFunction: BenchmarkDeferredTestFunction,\n\t\tnumCallsUntilResolution?: number\n\t) {\n\t\ttestFunction.options = mixin({}, testFunction.options || {}, {\n\t\t\tdefer: true,\n\t\t\tnumCallsUntilResolution: numCallsUntilResolution\n\t\t});\n\n\t\treturn <BenchmarkTestFunction>testFunction;\n\t}\n}\n\nexport interface BenchmarkTestFunction extends TestFunction {\n\t(this: BenchmarkTest): void | Promise<any>;\n\toptions?: BenchmarkOptions;\n}\n\nexport interface BenchmarkDeferredTestFunction extends BenchmarkTestFunction {\n\t(this: BenchmarkTest, deferred: Deferred<void>): void | Promise<any>;\n\toptions?: BenchmarkOptions;\n}\n\nexport interface BenchmarkTestProperties extends TestProperties {\n\ttest: BenchmarkTestFunction;\n\tskip: string;\n\tnumCallsUntilResolution: number;\n}\n\nexport type BenchmarkTestOptions = Partial<BenchmarkTestProperties> & {\n\tname: string;\n\ttest: BenchmarkTestFunction;\n\toptions?: BenchmarkOptions;\n};\n\nexport interface BenchmarkOptions extends Benchmark.Options {\n\tskip?: string;\n\tnumCallsUntilResolution?: number;\n}\n\nexport interface InternBenchmark extends Benchmark {\n\tinternTest?: BenchmarkTest;\n}\n\nexport function isBenchmarkTest(value: any): value is BenchmarkTest {\n\treturn value && value.benchmark != null && isTest(value);\n}\n\nconst createLifecycle = (before: boolean) => {\n\tconst queueName = before ? 'Before' : 'After';\n\tconst queueMethod = before ? 'push' : 'unshift';\n\tconst methodName = before ? 'before' : 'after';\n\treturn [\n\t\t'(function (benchmark) {',\n\t\t`\tvar queue = benchmark.intern${queueName}EachLoopQueue;`,\n\t\t'\tvar suite;',\n\t\t'\tif (!queue) {',\n\t\t'\t\tsuite = benchmark.internTest;',\n\t\t`\t\tbenchmark.intern${queueName}EachLoopQueue = queue = [];`,\n\t\t'\t\twhile ((suite = suite.parent)) {',\n\t\t`\t\t\tif (suite.${methodName}EachLoop) {`,\n\t\t`\t\t\t\tqueue.${queueMethod}(suite);`,\n\t\t'\t\t\t}',\n\t\t'\t\t}',\n\t\t'\t}',\n\t\t'\tvar i = queue.length;',\n\t\t'\twhile((suite = queue[--i])) {',\n\t\t`\t\tsuite.${methodName}EachLoop();`,\n\t\t'\t}',\n\t\t'})(this.benchmark || this);\\n'\n\t].join('\\n');\n};\n\nfunction createDeferred(\n\tbenchmark: Benchmark,\n\tdeferred: Deferred<any>,\n\tnumCallsUntilResolution?: number\n) {\n\tlet remainingCalls = numCallsUntilResolution || 1;\n\n\treturn {\n\t\tresolve() {\n\t\t\t--remainingCalls;\n\t\t\tif (remainingCalls === 0) {\n\t\t\t\tdeferred.resolve();\n\t\t\t} else if (remainingCalls < 0) {\n\t\t\t\tthrow new Error('resolve called too many times');\n\t\t\t}\n\t\t},\n\n\t\treject(error: InternError) {\n\t\t\tbenchmark.error = error;\n\t\t\tbenchmark.abort();\n\t\t\tdeferred.resolve();\n\t\t},\n\n\t\trejectOnError(this: any, callback: Function) {\n\t\t\tconst self = this;\n\t\t\treturn function(this: any) {\n\t\t\t\ttry {\n\t\t\t\t\treturn callback.apply(this, arguments);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tself.reject(error);\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\tcallback: function(this: any, callback: Function) {\n\t\t\tconst self = this;\n\t\t\treturn this.rejectOnError(function(this: any) {\n\t\t\t\tconst returnValue = callback.apply(this, arguments);\n\t\t\t\tself.resolve();\n\t\t\t\treturn returnValue;\n\t\t\t});\n\t\t}\n\t};\n}\n"]}