{"version":3,"file":"instrument.js","sourceRoot":"","sources":["../../../../src/lib/middleware/instrument.ts"],"names":[],"mappings":"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","sourcesContent":["import { stat, readFile } from 'fs';\nimport * as createError from 'http-errors';\nimport { lookup } from 'mime-types';\nimport { join, resolve } from 'path';\nimport { RequestHandler } from 'express';\n\nimport { Context } from '../Server';\nimport { normalizePath } from '../node/util';\n\nexport default function instrument(context: Context): RequestHandler {\n\tconst codeCache: {\n\t\t[filename: string]: { mtime: number; data: string };\n\t} = Object.create(null);\n\n\treturn (request, response, next) => {\n\t\tconst { basePath, executor } = context;\n\t\tconst wholePath = normalizePath(resolve(join(basePath, request.url)));\n\n\t\tif (\n\t\t\t!(request.method === 'HEAD' || request.method === 'GET') ||\n\t\t\t!executor.shouldInstrumentFile(wholePath)\n\t\t) {\n\t\t\treturn next();\n\t\t}\n\n\t\tstat(wholePath, (error, stats) => {\n\t\t\t// The server was stopped before this file was served\n\t\t\tif (context.stopped) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (error || !stats.isFile()) {\n\t\t\t\texecutor.log('Unable to serve', wholePath, '(unreadable)');\n\t\t\t\treturn next(createError(404, error, { expose: false }));\n\t\t\t}\n\n\t\t\texecutor.log('Serving', wholePath);\n\n\t\t\tconst send = (contentType: string, data: string) => {\n\t\t\t\tresponse.writeHead(200, {\n\t\t\t\t\t'Content-Type': contentType,\n\t\t\t\t\t'Content-Length': Buffer.byteLength(data)\n\t\t\t\t});\n\t\t\t\tresponse.end(request.method === 'HEAD' ? '' : data, callback);\n\t\t\t};\n\t\t\tconst callback = (error?: Error) => {\n\t\t\t\tif (error) {\n\t\t\t\t\texecutor.emit(\n\t\t\t\t\t\t'error',\n\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t`Error serving ${wholePath}: ${error.message}`\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\texecutor.log('Served', wholePath);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst contentType = lookup(wholePath) || 'application/octet-stream';\n\t\t\tconst mtime = stats.mtime.getTime();\n\n\t\t\tif (codeCache[wholePath] && codeCache[wholePath].mtime === mtime) {\n\t\t\t\tsend(contentType, codeCache[wholePath].data);\n\t\t\t} else {\n\t\t\t\treadFile(wholePath, 'utf8', (error, data) => {\n\t\t\t\t\t// The server was stopped in the middle of the file read\n\t\t\t\t\tif (context.stopped) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treturn next(createError(404, error, { expose: false }));\n\t\t\t\t\t}\n\n\t\t\t\t\t// providing `wholePath` to the instrumenter instead of a\n\t\t\t\t\t// partial filename is necessary because lcov.info requires\n\t\t\t\t\t// full path names as per the lcov spec\n\t\t\t\t\tdata = executor.instrumentCode(data, wholePath);\n\t\t\t\t\tcodeCache[wholePath] = {\n\t\t\t\t\t\t// strictly speaking mtime could reflect a previous\n\t\t\t\t\t\t// version, assume those race conditions are rare\n\t\t\t\t\t\tmtime,\n\t\t\t\t\t\tdata\n\t\t\t\t\t};\n\t\t\t\t\tsend(contentType, data);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n}\n"]}