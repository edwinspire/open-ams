{"version":3,"file":"Cobertura.js","sourceRoot":"","sources":["../../../../src/lib/reporters/Cobertura.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,uCAAsE;IAGtE;QAAuC,qCAAQ;QAK9C,mBAAY,QAAc,EAAE,OAAsC;YAAtC,wBAAA,EAAA,YAAsC;YAAlE,YACC,kBAAM,QAAQ,EAAE,OAAO,CAAC,SAKxB;YATQ,gBAAU,GAAe,WAAW,CAAC;YAM7C,IAAI,OAAO,CAAC,WAAW,EAAE;gBACxB,KAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;aACvC;;QACF,CAAC;QAED,sCAAkB,GAAlB;YACC,IAAM,OAAO,GAAG,iBAAM,kBAAkB,WAAE,CAAC;YAE3C,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YAEvC,OAAO,OAAO,CAAC;QAChB,CAAC;QACF,gBAAC;IAAD,CAAC,AApBD,CAAuC,kBAAQ,GAoB9C","sourcesContent":["import Coverage, { ReportType, CoverageProperties } from './Coverage';\nimport Node from '../executors/Node';\n\nexport default class Cobertura extends Coverage\n\timplements CoberturaCoverageProperties {\n\treadonly reportType: ReportType = 'cobertura';\n\tprojectRoot: string | undefined;\n\n\tconstructor(executor: Node, options: CoberturaCoverageOptions = {}) {\n\t\tsuper(executor, options);\n\n\t\tif (options.projectRoot) {\n\t\t\tthis.projectRoot = options.projectRoot;\n\t\t}\n\t}\n\n\tgetReporterOptions(): { [key: string]: any } {\n\t\tconst options = super.getReporterOptions();\n\n\t\toptions.projectRoot = this.projectRoot;\n\n\t\treturn options;\n\t}\n}\n\nexport interface CoberturaCoverageProperties extends CoverageProperties {\n\tprojectRoot?: string;\n}\n\nexport type CoberturaCoverageOptions = Partial<CoberturaCoverageProperties>;\n"]}