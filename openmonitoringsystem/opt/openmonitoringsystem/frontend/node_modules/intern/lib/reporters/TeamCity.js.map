{"version":3,"file":"TeamCity.js","sourceRoot":"","sources":["../../../../src/lib/reporters/TeamCity.ts"],"names":[],"mappings":"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","sourcesContent":["import Reporter, { eventHandler } from './Reporter';\nimport Test from '../Test';\nimport Suite, { isSuite } from '../Suite';\n\n/**\n * This reporter enables Intern to interact with TeamCity.\n * http://confluence.jetbrains.com/display/TCD8/Build+Script+Interaction+with+TeamCity\n *\n * Portions of this module are based on functions from\n * teamcity-service-messages:\n * https://github.com/pifantastic/teamcity-service-messages.\n */\nexport default class TeamCity extends Reporter {\n\t_ignoredTestIds:\n\t\t| { [sessionId: string]: { [testId: string]: boolean } }\n\t\t| undefined;\n\n\t@eventHandler()\n\trunStart() {\n\t\tthis._ignoredTestIds = {};\n\t}\n\n\t@eventHandler()\n\ttestStart(test: Test) {\n\t\tthis._sendMessage('testStarted', {\n\t\t\tname: test.name,\n\t\t\tflowId: test.sessionId\n\t\t});\n\t}\n\n\t@eventHandler()\n\ttestEnd(test: Test) {\n\t\tif (test.error) {\n\t\t\tconst message: any = {\n\t\t\t\tname: test.name,\n\t\t\t\tmessage: this.formatError(test.error),\n\t\t\t\tflowId: test.sessionId\n\t\t\t};\n\n\t\t\tif (test.error.actual && test.error.expected) {\n\t\t\t\tmessage.type = 'comparisonFailure';\n\t\t\t\tmessage.expected = test.error.expected;\n\t\t\t\tmessage.actual = test.error.actual;\n\t\t\t}\n\n\t\t\tthis._sendMessage('testFailed', message);\n\t\t} else if (test.skipped) {\n\t\t\tthis._sendMessage('testIgnored', {\n\t\t\t\tname: test.name,\n\t\t\t\tflowId: test.sessionId\n\t\t\t});\n\t\t} else {\n\t\t\tthis._sendMessage('testFinished', {\n\t\t\t\tname: test.name,\n\t\t\t\tduration: test.timeElapsed,\n\t\t\t\tflowId: test.sessionId\n\t\t\t});\n\t\t}\n\t}\n\n\t@eventHandler()\n\tsuiteStart(suite: Suite) {\n\t\tthis._sendMessage('testSuiteStarted', {\n\t\t\tname: suite.name,\n\t\t\tstartDate: new Date(),\n\t\t\tflowId: suite.sessionId\n\t\t});\n\t}\n\n\t@eventHandler()\n\tsuiteEnd(suite: Suite) {\n\t\tif (suite.error) {\n\t\t\tthis._sendMessage('message', {\n\t\t\t\tname: suite.name,\n\t\t\t\tflowId: suite.sessionId,\n\t\t\t\ttext: 'SUITE ERROR',\n\t\t\t\terrorDetails: this.formatError(suite.error),\n\t\t\t\tstatus: 'ERROR'\n\t\t\t});\n\n\t\t\tthis._notifyUnrunTests(suite);\n\t\t} else {\n\t\t\tthis._sendMessage('testSuiteFinished', {\n\t\t\t\tname: suite.name,\n\t\t\t\tduration: suite.timeElapsed,\n\t\t\t\tflowId: suite.sessionId\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Escape a string for TeamCity output.\n\t *\n\t * @param  {string} string\n\t * @return {string}\n\t *\n\t * Based on Message.prototype.escape from teamcity-service-messages\n\t */\n\tprivate _escapeString(str: string): string {\n\t\tconst replacer = /['\\n\\r\\|\\[\\]\\u0100-\\uffff]/g;\n\t\tconst map = {\n\t\t\t\"'\": \"|'\",\n\t\t\t'|': '||',\n\t\t\t'\\n': '|n',\n\t\t\t'\\r': '|r',\n\t\t\t'[': '|[',\n\t\t\t']': '|]'\n\t\t};\n\n\t\treturn str.replace(replacer, function(character: string): string {\n\t\t\tif (character in map) {\n\t\t\t\treturn (<{ [key: string]: any }>map)[character];\n\t\t\t}\n\t\t\tif (/[^\\u0000-\\u00ff]/.test(character)) {\n\t\t\t\treturn '|0x' + character.charCodeAt(0).toString(16);\n\t\t\t}\n\t\t\treturn '';\n\t\t});\n\t}\n\n\tprivate _notifyUnrunTests(suite: Suite) {\n\t\t// Keep track of test IDs that have already been ignored for a given\n\t\t// session. This prevents the reporter from emitting duplicate\n\t\t// testIgnored messages for unrun tests in nested suites as parent\n\t\t// suites are finished.\n\t\tconst ignoredTestIds = this._ignoredTestIds!;\n\t\tlet ignoredTests = ignoredTestIds![suite.sessionId];\n\t\tif (!ignoredTests) {\n\t\t\tignoredTests = ignoredTestIds![suite.sessionId] = {};\n\t\t}\n\n\t\tsuite.tests.forEach(test => {\n\t\t\tif (isSuite(test)) {\n\t\t\t\tthis._notifyUnrunTests(test);\n\t\t\t} else if (!ignoredTests[test.id]) {\n\t\t\t\tthis._sendMessage('testIgnored', {\n\t\t\t\t\tname: test.name,\n\t\t\t\t\tflowId: test.sessionId\n\t\t\t\t});\n\t\t\t\tignoredTests[test.id] = true;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Output a TeamCity message.\n\t *\n\t * @param  {string} type\n\t * @param  {Object}  args\n\t *\n\t * Based on Message.prototype.formatArgs from teamcity-service-messages\n\t */\n\tprivate _sendMessage(type: string, args: any): void {\n\t\targs.timestamp = new Date().toISOString().slice(0, -1);\n\t\targs = Object.keys(args)\n\t\t\t.map(key => `${key}='${this._escapeString(String(args[key]))}'`)\n\t\t\t.join(' ');\n\n\t\tthis.output.write(`##teamcity[${type} ${args}]\\n`);\n\t}\n}\n"]}