{"version":3,"file":"Benchmark.js","sourceRoot":"","sources":["../../../../src/lib/reporters/Benchmark.ts"],"names":[],"mappings":"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","sourcesContent":["import { readFileSync, writeFileSync } from 'fs';\nimport * as Benchmark from 'benchmark';\nimport { Executor } from '../executors/Executor';\nimport Reporter, { eventHandler, ReporterProperties } from './Reporter';\nimport BenchmarkTest from '../BenchmarkTest';\nimport Test from '../Test';\nimport Suite from '../Suite';\n\n/**\n * Benchmark is a reporter that can generate a baseline report and do runtime\n * comparisons against an existing baseline.\n *\n * **Configuration**\n *\n * Along with the default reporter options, Benchmark also supports a `mode`\n * option. This can have two values:\n *\n * * `'baseline'`: Benchmark data will be written to a baseline file when\n *   testing is finished\n * * `'test'`: Benchmark is compared to a baseline read from a file when testing\n *   starts\n *\n * Baseline data is stored hierarchically by environment and then by test.\n *\n * **Notation**\n *\n * * **rme:** relative margin of error -- margin of error as a percentage of the\n *   mean margin of error\n * * **mean:** mean execution time per function run\n * * **hz:** Hertz (number of executions of a function per second). 1/Hz is the\n *   mean execution time of function.\n */\nexport default class BenchmarkReporter extends Reporter\n\timplements BenchmarkReporterProperties {\n\tbaseline!: BenchmarkBaseline;\n\n\tfilename: string;\n\n\tmode: BenchmarkMode;\n\n\tsessions: { [sessionId: string]: SessionInfo };\n\n\tthresholds: BenchmarkThresholds;\n\n\tconstructor(executor: Executor, options: BenchmarkReporterOptions = {}) {\n\t\tsuper(executor, options);\n\n\t\tthis.mode = options.mode || 'test';\n\t\tthis.filename = options.filename || '';\n\t\tthis.thresholds = options.thresholds || {};\n\n\t\t// In test mode, try to load benchmark data for comparison\n\t\tif (this.mode === 'test') {\n\t\t\ttry {\n\t\t\t\tthis.baseline = JSON.parse(\n\t\t\t\t\treadFileSync(this.filename, { encoding: 'utf8' })\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tthis.console.warn(\n\t\t\t\t\t'Unable to load benchmark baseline data from ' +\n\t\t\t\t\t\tthis.filename\n\t\t\t\t);\n\t\t\t\tthis.console.warn('Switching to \"baseline\" mode');\n\t\t\t\tthis.mode = 'baseline';\n\t\t\t}\n\t\t}\n\n\t\tif (!this.baseline) {\n\t\t\tthis.baseline = {};\n\t\t}\n\n\t\t// Cache environments by session ID so we can look them up again when\n\t\t// serialized tests come back from remote browsers\n\t\tthis.sessions = {};\n\t}\n\n\t_getSession(testOrSuite: Test | Suite) {\n\t\tconst sessionId = testOrSuite.sessionId || 'local';\n\t\tlet session = this.sessions[sessionId];\n\n\t\tif (!session) {\n\t\t\tlet client: string;\n\t\t\tlet version: string;\n\t\t\tlet platform: string;\n\n\t\t\tif (testOrSuite.sessionId) {\n\t\t\t\tconst environmentType = testOrSuite.remote.environmentType!;\n\t\t\t\tclient = environmentType.browserName!;\n\t\t\t\tversion = environmentType.version!;\n\t\t\t\tplatform = environmentType.platform!;\n\t\t\t} else {\n\t\t\t\tclient = process.title;\n\t\t\t\tversion = process.version;\n\t\t\t\tplatform = process.platform;\n\t\t\t}\n\n\t\t\tsession = this.sessions[sessionId] = {\n\t\t\t\tsuites: {},\n\t\t\t\tenvironment: {\n\t\t\t\t\tclient,\n\t\t\t\t\tversion,\n\t\t\t\t\tplatform,\n\t\t\t\t\tid: client + ':' + version + ':' + platform\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\treturn session;\n\t}\n\n\t@eventHandler()\n\trunEnd() {\n\t\tif (this.mode === 'baseline') {\n\t\t\tlet existingBaseline: BenchmarkBaseline;\n\t\t\ttry {\n\t\t\t\texistingBaseline = JSON.parse(\n\t\t\t\t\treadFileSync(this.filename, { encoding: 'utf8' })\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\texistingBaseline = {};\n\t\t\t}\n\n\t\t\t// Merge the newly recorded baseline data into the existing baseline\n\t\t\t// data and write it back out to output file.\n\t\t\tconst baseline = this.baseline;\n\t\t\tObject.keys(baseline).forEach(function(environmentId) {\n\t\t\t\texistingBaseline[environmentId] = baseline[environmentId];\n\t\t\t});\n\t\t\twriteFileSync(\n\t\t\t\tthis.filename,\n\t\t\t\tJSON.stringify(existingBaseline, null, '    ')\n\t\t\t);\n\t\t}\n\t}\n\n\t@eventHandler()\n\tsuiteEnd(suite: Suite) {\n\t\tconst session = this._getSession(suite);\n\n\t\tif (!suite.hasParent) {\n\t\t\tconst environment = session.environment;\n\t\t\tthis.console.log(\n\t\t\t\t'Finished benchmarking ' +\n\t\t\t\t\tenvironment.client +\n\t\t\t\t\t' ' +\n\t\t\t\t\tenvironment.version +\n\t\t\t\t\t' on ' +\n\t\t\t\t\tenvironment.platform\n\t\t\t);\n\t\t} else if (this.mode === 'test') {\n\t\t\tconst suiteInfo = session.suites[suite.id];\n\t\t\tconst numTests = suiteInfo.numBenchmarks;\n\t\t\tif (numTests > 0) {\n\t\t\t\tconst numFailedTests = suiteInfo.numFailedBenchmarks;\n\t\t\t\tconst message =\n\t\t\t\t\tnumFailedTests +\n\t\t\t\t\t'/' +\n\t\t\t\t\tnumTests +\n\t\t\t\t\t' benchmarks failed in ' +\n\t\t\t\t\tsuite.id;\n\t\t\t\tif (numFailedTests > 0) {\n\t\t\t\t\tthis.console.warn(message);\n\t\t\t\t} else {\n\t\t\t\t\tthis.console.log(message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t@eventHandler()\n\tsuiteStart(suite: Suite) {\n\t\tconst session = this._getSession(suite);\n\n\t\t// This is a session root suite\n\t\tif (!suite.hasParent) {\n\t\t\tconst environment = session.environment;\n\t\t\tconst environmentName =\n\t\t\t\tenvironment.client +\n\t\t\t\t' ' +\n\t\t\t\tenvironment.version +\n\t\t\t\t' on ' +\n\t\t\t\tenvironment.platform;\n\t\t\tconst baselineEnvironments = this.baseline;\n\n\t\t\tthis.console.log(\n\t\t\t\t(this.mode === 'baseline' ? 'Baselining' : 'Benchmarking') +\n\t\t\t\t\t' ' +\n\t\t\t\t\tenvironmentName\n\t\t\t);\n\n\t\t\tif (this.mode === 'baseline') {\n\t\t\t\tbaselineEnvironments[environment.id] = {\n\t\t\t\t\tclient: environment.client,\n\t\t\t\t\tversion: environment.version,\n\t\t\t\t\tplatform: environment.platform,\n\t\t\t\t\ttests: {}\n\t\t\t\t};\n\t\t\t} else if (!baselineEnvironments[environment.id]) {\n\t\t\t\tthis.console.warn(\n\t\t\t\t\t'No baseline data for ' + environmentName + '!'\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tsession.suites[suite.id] = {\n\t\t\t\tnumBenchmarks: 0,\n\t\t\t\tnumFailedBenchmarks: 0\n\t\t\t};\n\t\t}\n\t}\n\n\t@eventHandler()\n\ttestEnd(test: Test) {\n\t\tconst benchmarkTest = <BenchmarkTest>test;\n\n\t\t// Just check for the benchmark property because the test may be a\n\t\t// deserialized object rather than an actual BenchmarkTest instance.\n\t\tif (benchmarkTest.benchmark == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (benchmarkTest.error) {\n\t\t\tconst session = this._getSession(benchmarkTest);\n\t\t\tconst suiteInfo = session.suites[benchmarkTest.parentId];\n\t\t\tsuiteInfo.numBenchmarks++;\n\t\t\tsuiteInfo.numFailedBenchmarks++;\n\n\t\t\tthis.console.error('FAIL: ' + benchmarkTest.id);\n\t\t\tthis.console.error(\n\t\t\t\tthis.executor.formatError(benchmarkTest.error, { space: '  ' })\n\t\t\t);\n\t\t} else {\n\t\t\tconst checkTest = (\n\t\t\t\tbaseline: BenchmarkData,\n\t\t\t\tbenchmark: BenchmarkData\n\t\t\t) => {\n\t\t\t\tlet warn: string[] = [];\n\t\t\t\tlet fail: string[] = [];\n\t\t\t\tlet list: string[];\n\n\t\t\t\tconst baselineMean = baseline.stats.mean;\n\t\t\t\tconst thresholds = this.thresholds || {};\n\t\t\t\tlet percentDifference =\n\t\t\t\t\t100 * (benchmark.stats.mean - baselineMean) / baselineMean;\n\n\t\t\t\tif (\n\t\t\t\t\tthresholds.warn &&\n\t\t\t\t\tthresholds.warn.mean &&\n\t\t\t\t\tMath.abs(percentDifference) > thresholds.warn.mean\n\t\t\t\t) {\n\t\t\t\t\tlist = warn;\n\t\t\t\t\tif (\n\t\t\t\t\t\tthresholds.fail &&\n\t\t\t\t\t\tthresholds.fail.mean &&\n\t\t\t\t\t\tMath.abs(percentDifference) > thresholds.fail.mean\n\t\t\t\t\t) {\n\t\t\t\t\t\tlist = fail;\n\t\t\t\t\t}\n\t\t\t\t\tlist.push(\n\t\t\t\t\t\t'Execution time is ' +\n\t\t\t\t\t\t\tpercentDifference.toFixed(1) +\n\t\t\t\t\t\t\t'% off'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst baselineRme = baseline.stats.rme;\n\t\t\t\t// RME is already a percent\n\t\t\t\tpercentDifference = benchmark.stats.rme - baselineRme;\n\t\t\t\tif (\n\t\t\t\t\tthresholds.warn &&\n\t\t\t\t\tthresholds.warn.rme &&\n\t\t\t\t\tMath.abs(percentDifference) > thresholds.warn.rme\n\t\t\t\t) {\n\t\t\t\t\tlist = warn;\n\t\t\t\t\tif (\n\t\t\t\t\t\tthresholds.fail &&\n\t\t\t\t\t\tthresholds.fail.rme &&\n\t\t\t\t\t\tMath.abs(percentDifference) > thresholds.fail.rme\n\t\t\t\t\t) {\n\t\t\t\t\t\tlist = fail;\n\t\t\t\t\t}\n\t\t\t\t\tlist.push(\n\t\t\t\t\t\t'RME is ' + percentDifference.toFixed(1) + '% off'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (fail.length) {\n\t\t\t\t\tthis.console.error(\n\t\t\t\t\t\t'FAIL ' +\n\t\t\t\t\t\t\tbenchmarkTest.id +\n\t\t\t\t\t\t\t' (' +\n\t\t\t\t\t\t\tfail.join(', ') +\n\t\t\t\t\t\t\t')'\n\t\t\t\t\t);\n\t\t\t\t\treturn false;\n\t\t\t\t} else if (warn.length) {\n\t\t\t\t\tthis.console.warn(\n\t\t\t\t\t\t'WARN ' +\n\t\t\t\t\t\t\tbenchmarkTest.id +\n\t\t\t\t\t\t\t' (' +\n\t\t\t\t\t\t\twarn.join(', ') +\n\t\t\t\t\t\t\t')'\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis.console.log('PASS ' + benchmarkTest.id);\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t};\n\n\t\t\tconst benchmark = benchmarkTest.benchmark;\n\t\t\tconst session = this._getSession(benchmarkTest);\n\t\t\tconst environment = session.environment;\n\n\t\t\tconst suiteInfo = session.suites[benchmarkTest.parentId];\n\t\t\tsuiteInfo.numBenchmarks++;\n\n\t\t\tconst baseline = this.baseline[environment.id]!;\n\n\t\t\tif (this.mode === 'baseline') {\n\t\t\t\tbaseline.tests[benchmarkTest.id] = {\n\t\t\t\t\thz: benchmark.hz,\n\t\t\t\t\ttimes: benchmark.times,\n\t\t\t\t\tstats: {\n\t\t\t\t\t\trme: benchmark.stats.rme,\n\t\t\t\t\t\tmoe: benchmark.stats.moe,\n\t\t\t\t\t\tmean: benchmark.stats.mean\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis.console.log('Baselined ' + benchmarkTest.name);\n\t\t\t\tthis.executor.log(\n\t\t\t\t\t'Time per run:',\n\t\t\t\t\tformatSeconds(benchmark.stats.mean),\n\t\t\t\t\t'\\xb1',\n\t\t\t\t\tbenchmark.stats.rme.toFixed(2),\n\t\t\t\t\t'%'\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tif (baseline) {\n\t\t\t\t\tconst testData = baseline.tests[benchmarkTest.id];\n\t\t\t\t\tconst result = checkTest(testData, benchmark);\n\t\t\t\t\tconst baselineStats = testData.stats;\n\t\t\t\t\tconst benchmarkStats = benchmark.stats;\n\t\t\t\t\tthis.executor.log(\n\t\t\t\t\t\t'Expected time per run:',\n\t\t\t\t\t\tformatSeconds(baselineStats.mean),\n\t\t\t\t\t\t'\\xb1',\n\t\t\t\t\t\tbaselineStats.rme.toFixed(2),\n\t\t\t\t\t\t'%'\n\t\t\t\t\t);\n\t\t\t\t\tthis.executor.log(\n\t\t\t\t\t\t'Actual time per run:',\n\t\t\t\t\t\tformatSeconds(benchmarkStats.mean),\n\t\t\t\t\t\t'\\xb1',\n\t\t\t\t\t\tbenchmarkStats.rme.toFixed(2),\n\t\t\t\t\t\t'%'\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!result) {\n\t\t\t\t\t\tsuiteInfo.numFailedBenchmarks++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport interface BenchmarkData {\n\ttimes: Benchmark.Times;\n\thz: number;\n\tstats: {\n\t\trme: number;\n\t\tmoe: number;\n\t\tmean: number;\n\t};\n}\n\nexport interface BenchmarkThresholds {\n\twarn?: {\n\t\trme?: number;\n\t\thz?: number;\n\t\tmean?: number;\n\t};\n\tfail?: {\n\t\trme?: number;\n\t\thz?: number;\n\t\tmean?: number;\n\t};\n}\n\nexport interface BaselineEnvironment {\n\tclient: string;\n\tversion: string;\n\tplatform: string;\n\ttests: { [testId: string]: BenchmarkData };\n}\n\nexport interface BenchmarkBaseline {\n\t[key: string]: BaselineEnvironment;\n}\n\nexport interface SesssionEnvironment {\n\tclient: string;\n\tversion: string;\n\tplatform: string;\n\tid: string;\n}\n\nexport interface SessionInfo {\n\tsuites: {\n\t\t[suiteId: string]: {\n\t\t\tnumBenchmarks: number;\n\t\t\tnumFailedBenchmarks: number;\n\t\t};\n\t};\n\tenvironment: SesssionEnvironment;\n}\n\nexport type BenchmarkMode = 'baseline' | 'test';\n\nexport interface BenchmarkReporterProperties extends ReporterProperties {\n\tfilename: string;\n\tmode: BenchmarkMode;\n\tthresholds: BenchmarkThresholds;\n}\n\nexport type BenchmarkReporterOptions = Partial<BenchmarkReporterProperties>;\n\nfunction formatSeconds(value: number) {\n\tif (value == null) {\n\t\treturn null;\n\t}\n\n\tlet units = 's';\n\tif (value < 1) {\n\t\tconst places = Math.ceil(Math.log(value) / Math.log(10)) - 1;\n\t\tif (places < -9) {\n\t\t\tvalue *= Math.pow(10, 12);\n\t\t\tunits = 'ps';\n\t\t} else if (places < -6) {\n\t\t\tvalue *= Math.pow(10, 9);\n\t\t\tunits = 'ns';\n\t\t} else if (places < -3) {\n\t\t\tvalue *= Math.pow(10, 6);\n\t\t\tunits = 'µs';\n\t\t} else if (places < 0) {\n\t\t\tvalue *= Math.pow(10, 3);\n\t\t\tunits = 'ms';\n\t\t}\n\t}\n\n\treturn value.toFixed(3) + units;\n}\n"]}