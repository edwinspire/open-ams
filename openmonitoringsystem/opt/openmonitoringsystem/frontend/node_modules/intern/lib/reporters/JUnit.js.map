{"version":3,"file":"JUnit.js","sourceRoot":"","sources":["../../../../src/lib/reporters/JUnit.ts"],"names":[],"mappings":"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","sourcesContent":["import { mkdirSync, createWriteStream } from 'fs';\nimport { dirname } from 'path';\n\nimport Suite from '../Suite';\nimport Test from '../Test';\nimport Reporter, { eventHandler, ReporterProperties } from './Reporter';\nimport { Executor } from '../executors/Executor';\n\n/**\n * There is no formal spec for this format and everyone does it differently, so\n * good luck! We've mashed as many of the different incompatible JUnit/xUnit\n * XSDs as possible into one reporter.\n */\nexport default class JUnit extends Reporter {\n\treadonly filename: string;\n\n\tconstructor(executor: Executor, options: Partial<JUnitProperties> = {}) {\n\t\tsuper(executor, options);\n\t\tif (options.filename) {\n\t\t\tthis.filename = options.filename;\n\t\t\tif (dirname(this.filename) !== '.') {\n\t\t\t\ttry {\n\t\t\t\t\tmkdirSync(dirname(this.filename));\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (error.code !== 'EEXIST') {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.output = createWriteStream(this.filename);\n\t\t}\n\t}\n\n\t@eventHandler()\n\trunEnd() {\n\t\tconst rootNode = new XmlNode('testsuites');\n\t\tthis.executor.suites.forEach(suite => {\n\t\t\trootNode.childNodes.push(createSuiteNode(suite, this));\n\t\t});\n\t\tconst report =\n\t\t\t'<?xml version=\"1.0\" encoding=\"UTF-8\" ?>' +\n\t\t\trootNode.toString() +\n\t\t\t'\\n';\n\t\tthis.output.end(report);\n\t}\n}\n\nexport interface JUnitProperties extends ReporterProperties {\n\tfilename?: string;\n}\n\n/**\n * Simple XML generator.\n * @constructor\n * @param {string} nodeName The node name.\n * @param {Object?} attributes Optional attributes.\n */\nclass XmlNode {\n\tnodeName = '';\n\tchildNodes: any[] = [];\n\tattributes: any;\n\n\tconstructor(nodeName: string, attributes?: any) {\n\t\tthis.nodeName = nodeName;\n\n\t\tif (attributes && attributes.childNodes) {\n\t\t\tthis.childNodes = attributes.childNodes;\n\t\t\tattributes.childNodes = undefined;\n\t\t}\n\t\tthis.attributes = attributes || {};\n\t}\n\n\t/**\n\t * Creates a new XML node and pushes it to the end of the current node.\n\t * @param {string} nodeName The node name for the new node.\n\t * @param {Object?} attributes Optional attributes for the new node.\n\t * @param {(XmlNode|string)[]?} childNodes Optional child nodes for the new\n\t * node.\n\t * @returns {XmlNode} A new node.\n\t */\n\tcreateNode(nodeName: string, attributes: Object) {\n\t\tconst node = new XmlNode(nodeName, attributes);\n\t\tthis.childNodes.push(node);\n\t\treturn node;\n\t}\n\n\t_escape(str: string) {\n\t\treturn String(str)\n\t\t\t.replace(/&/g, '&amp;')\n\t\t\t.replace(/</g, '&lt;')\n\t\t\t.replace(/\"/g, '&quot;');\n\t}\n\n\t_serializeAttributes() {\n\t\tconst attributes = this.attributes;\n\t\tconst nodes: any[] = [];\n\n\t\tfor (let key in attributes) {\n\t\t\tif (attributes[key] != null) {\n\t\t\t\tnodes.push(key + '=\"' + this._escape(attributes[key]) + '\"');\n\t\t\t}\n\t\t}\n\n\t\treturn nodes.length ? ' ' + nodes.join(' ') : '';\n\t}\n\n\t_serializeContent() {\n\t\tconst nodeList = this.childNodes;\n\t\tconst nodes: any[] = [];\n\t\tfor (let i = 0, j = nodeList.length; i < j; ++i) {\n\t\t\tnodes.push(\n\t\t\t\ttypeof nodeList[i] === 'string'\n\t\t\t\t\t? this._escape(nodeList[i])\n\t\t\t\t\t: nodeList[i].toString()\n\t\t\t);\n\t\t}\n\n\t\treturn nodes.join('');\n\t}\n\n\t/**\n\t * Outputs the node as a serialised XML string.\n\t * @returns {string}\n\t */\n\ttoString() {\n\t\tconst children = this._serializeContent();\n\n\t\treturn (\n\t\t\t'<' +\n\t\t\tthis.nodeName +\n\t\t\tthis._serializeAttributes() +\n\t\t\t(children.length\n\t\t\t\t? '>' + children + '</' + this.nodeName + '>'\n\t\t\t\t: '/>')\n\t\t);\n\t}\n}\n\nfunction createSuiteNode(suite: Suite, reporter: JUnit): XmlNode {\n\treturn new XmlNode('testsuite', {\n\t\tname: suite.name || 'Node.js',\n\t\tfailures: suite.numFailedTests,\n\t\tskipped: suite.numSkippedTests,\n\t\ttests: suite.numTests,\n\t\ttime: suite.timeElapsed / 1000,\n\t\tchildNodes: suite.tests.map(test => createTestNode(test, reporter))\n\t});\n}\n\nfunction createTestNode(test: Suite | Test, reporter: JUnit) {\n\tif (test instanceof Suite) {\n\t\treturn createSuiteNode(test, reporter);\n\t}\n\n\tconst node = new XmlNode('testcase', {\n\t\tname: test.name,\n\t\ttime: test.timeElapsed / 1000,\n\t\tstatus: test.error ? 1 : 0\n\t});\n\n\tif (test.error) {\n\t\tnode.createNode(\n\t\t\ttest.error.name === 'AssertionError' ? 'failure' : 'error',\n\t\t\t{\n\t\t\t\tchildNodes: [reporter.formatError(test.error)],\n\t\t\t\tmessage: test.error.message,\n\t\t\t\ttype: test.error.name\n\t\t\t}\n\t\t);\n\t} else if (test.skipped != null) {\n\t\tnode.createNode('skipped', {\n\t\t\tchildNodes: [test.skipped]\n\t\t});\n\t}\n\n\treturn node;\n}\n"]}