{"version":3,"file":"Simple.js","sourceRoot":"","sources":["../../../../src/lib/reporters/Simple.ts"],"names":[],"mappings":";;;;;;;;;;;;IAEA,+CAA0C;IAC1C,uCAA0C;IAK1C;QAAoC,kCAAY;QAAhD;;QA8CA,CAAC;QA5CA,sBAAK,GAAL,UAAM,KAAY;YACjB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7C,CAAC;QAGD,oBAAG,GAAH,UAAI,OAAe;YADnB,iBAKC;YAHA,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;gBAC/B,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAU,IAAM,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;QACJ,CAAC;QAGD,yBAAQ,GAAR,UAAS,KAAY;YACpB,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBACjC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YACnD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;gBAChC,IAAM,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC;gBAC5C,IAAM,eAAe,GAAG,KAAK,CAAC,eAAe,CAAC;gBAC9C,IAAI,OAAO,GAAM,cAAc,SAAI,QAAQ,kBAAe,CAAC;gBAC3D,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;oBAChB,OAAO,IAAI,SAAO,KAAK,CAAC,IAAM,CAAC;gBAChC,CAAC;gBAED,EAAE,CAAC,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;oBACzB,OAAO,IAAI,OAAK,eAAe,cAAW,CAAC;gBAC5C,CAAC;gBAED,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC;YACzD,CAAC;QACF,CAAC;QAGD,wBAAO,GAAP,UAAQ,IAAU;YACjB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,WAAS,IAAI,CAAC,EAAE,UAAK,IAAI,CAAC,WAAW,QAAK,CAAC,CAAC;gBAC/D,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YACnE,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAS,IAAI,CAAC,EAAE,UAAK,IAAI,CAAC,OAAO,MAAG,CAAC,CAAC;YACxD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACP,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAS,IAAI,CAAC,EAAE,UAAK,IAAI,CAAC,WAAW,QAAK,CAAC,CAAC;YAC9D,CAAC;QACF,CAAC;QA3CD;YADC,uBAAY,EAAE;2CAGd;QAGD;YADC,uBAAY,EAAE;yCAKd;QAGD;YADC,uBAAY,EAAE;8CAoBd;QAGD;YADC,uBAAY,EAAE;6CAUd;QACF,aAAC;KAAA,AA9CD,CAAoC,sBAAY,GA8C/C;sBA9CoB,MAAM","sourcesContent":["import Suite from '../Suite';\nimport Test from '../Test';\nimport TextCoverage from './TextCoverage';\nimport { eventHandler } from './Reporter';\n\n/**\n * The Simple reporter outputs to the terminal console.\n */\nexport default class Simple extends TextCoverage {\n\t@eventHandler()\n\terror(error: Error) {\n\t\tthis.console.error(this.formatError(error));\n\t}\n\n\t@eventHandler()\n\tlog(message: string) {\n\t\tmessage.split('\\n').forEach(line => {\n\t\t\tthis.console.log(`DEBUG: ${line}`);\n\t\t});\n\t}\n\n\t@eventHandler()\n\tsuiteEnd(suite: Suite) {\n\t\tif (suite.error) {\n\t\t\tthis.console.warn('SUITE ERROR');\n\t\t\tthis.console.error(this.formatError(suite.error));\n\t\t} else {\n\t\t\tconst numTests = suite.numTests;\n\t\t\tconst numFailedTests = suite.numFailedTests;\n\t\t\tconst numSkippedTests = suite.numSkippedTests;\n\t\t\tlet message = `${numFailedTests}/${numTests} tests failed`;\n\t\t\tif (suite.name) {\n\t\t\t\tmessage += ` in ${suite.name}`;\n\t\t\t}\n\n\t\t\tif (numSkippedTests > 0) {\n\t\t\t\tmessage += ` (${numSkippedTests} skipped)`;\n\t\t\t}\n\n\t\t\tthis.console[numFailedTests ? 'warn' : 'info'](message);\n\t\t}\n\t}\n\n\t@eventHandler()\n\ttestEnd(test: Test) {\n\t\tif (test.error) {\n\t\t\tthis.console.error(`FAIL: ${test.id} (${test.timeElapsed}ms)`);\n\t\t\tthis.console.error(this.formatError(test.error, { space: '  ' }));\n\t\t} else if (test.skipped) {\n\t\t\tthis.console.log(`SKIP: ${test.id} (${test.skipped})`);\n\t\t} else {\n\t\t\tthis.console.log(`PASS: ${test.id} (${test.timeElapsed}ms)`);\n\t\t}\n\t}\n}\n"]}