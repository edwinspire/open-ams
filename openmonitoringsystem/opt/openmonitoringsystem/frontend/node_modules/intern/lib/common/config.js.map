{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../src/lib/common/config.ts"],"names":[],"mappings":"","sourcesContent":["import { ReporterOptions } from '../reporters/Reporter';\nimport { BenchmarkReporterOptions } from '../reporters/Benchmark';\nimport { TunnelOptions } from '@theintern/digdug/Tunnel';\nimport { BrowserStackOptions } from '@theintern/digdug/BrowserStackTunnel';\nimport { SeleniumOptions } from '@theintern/digdug/SeleniumTunnel';\n\n/**\n * This interface describes the configuration data used by Intern. Its\n * properties can be set from the command line when running the intern bin\n * script, or via an object passed to the executor's\n * [[lib/executors/Executor.Executor.configure]] method.\n */\nexport interface Config extends ResourceConfig {\n\t/**\n\t * By default, Intern will run all configured tests. Setting this option\n\t * to `true` will cause Intern to stop running tests after the first failure.\n\t */\n\tbail: boolean;\n\n\tbaseline: boolean;\n\n\t/**\n\t * The path to the project base. This will always end with a path separator\n\t * (e.g., /).\n\t */\n\tbasePath: string;\n\n\t/**\n\t * This property must be set to `true` for benchmark tests to run. If it is\n\t * unset or `false`, any suites registered using the benchmark interface will\n\t * be ignored.\n\t */\n\tbenchmark: boolean;\n\n\tbenchmarkConfig?: BenchmarkConfig;\n\n\tbrowser: ResourceConfig;\n\n\t/**\n\t * The global variable that will be used to store coverage data\n\t */\n\tcoverageVariable: string;\n\n\t/**\n\t * When set to true, Intern will emit 'log' events for many internal\n\t * operations. Reporters that register for these events, such as the Runner\n\t * reporter, will display them during testing.\n\t */\n\tdebug: boolean;\n\n\t/**\n\t * This is the number of milliseconds that Intern will wait for an\n\t * [asynchronous test](https://github.com/theintern/intern/docs/writing_tests.md#testing-asynchronous-code)\n\t * to complete before timing out. A timed out test is considered to have\n\t * failed.\n\t */\n\tdefaultTimeout: number;\n\n\t/** A description for this test run */\n\tdescription: string;\n\n\t/**\n\t * If true, filter external library calls and runtime calls out of error\n\t * stacks.\n\t */\n\tfilterErrorStack: boolean;\n\n\t/**\n\t * This property is a regular expression that is used to filter which tests\n\t * are run. Grep operates on test IDs. A test ID is the concatenation of a\n\t * test name with all of its parent suite names. Every test ID that matches\n\t * the current grep expression will be run.\n\t */\n\tgrep: RegExp;\n\n\t/**\n\t * The path to Intern. This will always end with a path separator (e.g., /).\n\t */\n\tinternPath: string;\n\n\t/** A top-level name for this configuration. */\n\tname: string;\n\n\tnode: ResourceConfig;\n\n\t/**\n\t * An identifier for this test session. By default it will have the value\n\t * ''.\n\t */\n\tsessionId: string;\n\n\t/** If true, display the resolved config and exit */\n\tshowConfig: boolean;\n\n\t/**\n\t * The default capabilities for all test environments.\n\t *\n\t * They will be extended for each environment by values in the\n\t * [`environments`](#environments) array.\n\t *\n\t * Cloud testing services such as BrowserStack may have unique capabilities.\n\t * Itâ€™s important to use the proper capabilities for the WebDriver server or\n\t * cloud service being used to run tests.\n\t *\n\t * * [Selenium capabilities](https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities)\n\t * * [BrowserStack capabilities](https://www.browserstack.com/automate/capabilities)\n\t * * [CrossBrowserTesting capabilities](https://help.crossbrowsertesting.com/selenium-testing/automation-capabilities)\n\t * * [Sauce Labs capabilities](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-Selenium-SpecificOptions) and [environments](https://saucelabs.com/platforms)\n\t * * [TestingBot capabilities](https://testingbot.com/support/other/test-options) and [environments](https://testingbot.com/support/getting-started/browsers.html)\n\t *\n\t * [Chrome-specific options](https://sites.google.com/a/chromium.org/chromedriver/capabilities)\n\t * may be passed using a `chromeOptions` capability.\n\t *\n\t * Intern will automatically provide certain capabilities to provide better\n\t * feedback with cloud service dashboards:\n\t *\n\t * * `name` will be set to the name of the test config\n\t * * `build` will be set to the commit ID from the `TRAVIS_COMMIT` and\n\t *   `BUILD_TAG` environment variables, if either exists\n\t */\n\tcapabilities: {\n\t\tname?: string;\n\t\tbuild?: string;\n\t\t[key: string]: any;\n\t};\n\n\t/**\n\t * An array of file paths or globs that should be instrumented for code\n\t * coverage, or false to completely disable coverage.\n\t *\n\t * This property should point to the actual JavaScript files that will be\n\t * executed, not pre-transpiled sources (coverage results will still be\n\t * mapped back to original sources). Coverage data will be collected for\n\t * these files even if theyâ€™re not loaded by Intern for tests, allowing a\n\t * test writer to see which files _havenâ€™t_ been tested, as well as coverage\n\t * on files that were tested.\n\t *\n\t * When this value is unset, Intern will still look for coverage data on a\n\t * global coverage variable, and it will request coverage data from remote\n\t * sessions. Explicitly setting coverage to false will prevent Intern from\n\t * even checking for coverage data.\n\t *\n\t * > ðŸ’¡This property replaces the `excludeInstrumentation` property used in\n\t * previous versions of Intern, which acted as a filter rather than an\n\t * inclusive list.\n\t */\n\tcoverage: false | string[];\n\n\t/**\n\t * The environments that will be used to run tests.\n\t *\n\t * Its value can be a single browser name or an environment object, or an\n\t * array of these.\n\t *\n\t * ```js\n\t * environments: 'chrome'\n\t * environments: ['chrome', 'firefox']\n\t * environments: { browserName: 'chrome', version: '57.0' }\n\t * environments: { browserName: 'chrome', fixSessionCapabilities: false }\n\t * ```\n\t *\n\t * The syntax for browser names and other properties depends on where tests\n\t * are being run. For example, when running tests using a local Selenium\n\t * server, the browser name should be the lowercase name of a locally\n\t * available browser, such as â€˜chromeâ€™ or â€˜firefoxâ€™, and other properties\n\t * such as the platform name will generally be ignored. When running on a\n\t * cloud testing service such as [Sauce Labs](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-RequiredSeleniumTestConfigurationSettings)\n\t * or [BrowserStack](https://www.browserstack.com/automate/capabilities),\n\t * browser names and other properties may have different acceptable values\n\t * (e.g., â€˜googlechromeâ€™ instead of â€˜chromeâ€™, or â€˜MacOSâ€™ vs â€˜OSXâ€™).\n\t *\n\t * The [fixSessionCapabilities](https://theintern.io/docs.html#Leadfoot/2/api/Server/fixsessioncapabilities)\n\t * property determines whether feature and defect tests will be run in the\n\t * remote browser. Setting it to `false` entirely disables feature tests\n\t * (assuming that all features are enabled), while setting it to\n\t * `'no-detect'` will set certain already-known feature and defect flags\n\t * based on the browser and platform. The current set of capabilities are\n\t * available on `this.remote.session.capabilities` in functional tests.\n\t *\n\t * > ðŸ’¡Note that 'node' is an environment. If no environments are specified,\n\t * the Node executor will automatically add 'node' to the resolved config.\n\t * If any environments are specified, though, unit tests will only be run in\n\t * this environments.\n\t */\n\tenvironments: EnvironmentSpec[];\n\n\t// Deprecated; this is only here for typing\n\texcludeInstrumentation: never;\n\n\t/** The base URL to use for relative addresses in functional tests */\n\tfunctionalBaseUrl?: string;\n\n\t/** Whether to collect coverage data from functional tests */\n\tfunctionalCoverage: boolean;\n\n\t/**\n\t * A list of paths or glob expressions that point to functional suites.\n\t *\n\t * Functional suites are files that register\n\t * [WebDriver tests](writing_tests.md).\n\t */\n\tfunctionalSuites: string[];\n\n\t/**\n\t * Default timeout values for functional tests\n\t *\n\t *   * **find** is the time to wait for findBy commands to find an element\n\t *   * **executeAsync** is the time to wait for executeAsync calls to\n\t *     complete\n\t *   * **pageLoad** is the time to wait for a page to finish loading\n\t *     synchronous resources\n\t */\n\tfunctionalTimeouts: {\n\t\t// Deprecated; this is only here for typing\n\t\tconnectTimeout?: number;\n\n\t\t/** Time to wait for a findBy command to find a matching element */\n\t\tfind?: number;\n\n\t\t/** Time to wait for an executeAsync to complete */\n\t\texecuteAsync?: number;\n\n\t\t/** Time to wait for initial page load to complete */\n\t\tpageLoad?: number;\n\t};\n\n\t/**\n\t * An object containing options for the\n\t * [Istanbul instrumenter](https://github.com/istanbuljs/istanbuljs/blob/master/packages/istanbul-lib-instrument/api.md#instrumenter).\n\t */\n\tinstrumenterOptions: { [key: string]: any };\n\n\t/**\n\t * Whether to leave the remote browser open after testing.\n\t *\n\t * Normally when Intern runs tests on remote browsers, it shuts the browser\n\t * down when testing is finished. However, you may sometimes want to inspect\n\t * the state of a remote browser after tests have run, particularly if\n\t * you're trying to debug why a test is failing. Setting `leaveRemoteOpen`\n\t * to true will cause Intern to leave the browser open after testing.\n\t * Setting it to `'fail'` will cause Intern to leave it open only if there\n\t * were test failures.\n\t */\n\tleaveRemoteOpen: boolean | 'fail';\n\n\t/**\n\t * The number of concurrent remote test sessions to run at once.\n\t *\n\t * The default value is Infinity, meaning Intern will try to run all of its\n\t * test sessions in parallel. Note that cloud testing services often limit\n\t * the number of concurrent sessions they will allow to 2 or 5.\n\t */\n\tmaxConcurrency: number;\n\n\t/**\n\t * A proxy that should be used for outgoing web connections. If specified,\n\t * this will be used for Intern's WebDriver client instead of the Dig Dug\n\t * tunnel's proxy value.\n\t */\n\tproxy?: string;\n\n\t/**\n\t * If true, a remote will wait for reponses from Intern for any executor\n\t * events.\n\t */\n\trunInSync: boolean;\n\n\t/** If true, start Intern's static test server but do not run any tests. */\n\tserveOnly: boolean;\n\n\t/**\n\t * The port Intern's static server will listen on during functional tests.\n\t */\n\tserverPort: number;\n\n\t/**\n\t * The URL a remote should use to access Intern's static server. By default\n\t * this is http://localhost:9000, but the domain or port may be different if\n\t * Intern is behind a proxy.\n\t */\n\tserverUrl: string;\n\n\t/**\n\t * The port that a remote will use to access Intern's websocket server. The\n\t * hostname will be the same as for serverUrl. For example, if serverPort is\n\t * set to 9001 and the default serverUrl is used (http://localhost:9000),\n\t * the full websocket URL will be ws://localhost:9001.\n\t */\n\tsocketPort?: number;\n\n\t/**\n\t * The Dig Dug tunnel class to use for WebDriver testing.\n\t *\n\t * There are several built in tunnel types, and others can be added through\n\t * the Node executorâ€™s [`registerPlugin`\n\t * method](./architecture.md#extension-points).\n\t *\n\t * The built in tunnel classes are:\n\t *\n\t * * 'null'\n\t * * 'selenium'\n\t * * 'browserstack'\n\t * * 'cbt' (CrossBrowserTesting)\n\t * * 'saucelabs'\n\t * * 'testingbot'\n\t */\n\ttunnel: string;\n\n\t/**\n\t * Options for the currently selected tunnel.\n\t *\n\t * The available options depend on the current tunnel. Common options\n\t * include:\n\t *\n\t * ** All tunnels**\n\t *\n\t * | Property   | Value                                                    |\n\t * | :---       | :---                                                     |\n\t * | `username` | Username for the tunnel service (e.g., BrowserStack)     |\n\t * | `apiKey`   | API key for the tunnel service (e.g., BrowserStack)      |\n\t * | `pathname` | The path for the tunnelâ€™s REST endpoint (e.g., `wd/hub`) |\n\t *\n\t * **Selenium tunnel**\n\t *\n\t * | Property  | Value                                                                   |\n\t * | :---      | :---                                                                    |\n\t * | `drivers` | A list of driver names, or objects with `name` and `options` properties |\n\t * | `verbose` | If true, show tunnel debug information                                  |\n\t *\n\t * See also:\n\t *\n\t * * [[https://theintern.io/docs.html#Dig%20Dug/2/api/Tunnel/tunnelproperties|Tunnel]]\n\t * * [[https://theintern.io/docs.html#Dig%20Dug/2/api/SeleniumTunnel/seleniumproperties|SeleniumTunnel]]\n\t * * [[https://theintern.io/docs.html#Dig%20Dug/2/api/BrowserStackTunnel/browserstackproperties|BrowserStackTunnel]]\n\t */\n\ttunnelOptions: TunnelOptions | BrowserStackOptions | SeleniumOptions;\n}\n\n/**\n * A descriptor object used to load a built-in reporter\n */\nexport interface ReporterDescriptor {\n\tname: string;\n\toptions?: ReporterOptions;\n}\n\n/**\n * A descriptor object for a script. If an options value is present, the\n * descriptor is assumed to refer to a plugin, and the options will be passed to\n * the plugins initializer function.\n */\nexport interface PluginDescriptor {\n\tscript: string;\n\tuseLoader?: boolean;\n\toptions?: any;\n}\n\n/**\n * A generic event listener\n */\nexport interface Listener<T> {\n\t(arg: T): void | Promise<void>;\n}\n\nexport interface ResourceConfig {\n\t/**\n\t * The loader used to load test suites and application modules.\n\t *\n\t * When passed in as part of a config object, the `loader` property can be a\n\t * string with a loader name or the path to a loader script. It may also be\n\t * an object with `script` and `config` properties. Intern provides built-in\n\t * loader scripts for Dojo and Dojo2, which can be specified with the IDs\n\t * 'dojo' and 'dojo2'.\n\t *\n\t * ```ts\n\t * loader: 'dojo2'\n\t * loader: 'tests/loader.js'\n\t * loader: {\n\t *     script: 'dojo',\n\t *     config: {\n\t *         packages: [\n\t *             { name: 'app', location: './js' }\n\t *         ]\n\t *     }\n\t * }\n\t * ```\n\t */\n\tloader: LoaderDescriptor;\n\n\t/**\n\t * A list of reporter names or descriptors.\n\t *\n\t * Reporters specified in this list must have been previously installed\n\t * using\n\t * [`registerReporter`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerreporter)\n\t * or\n\t * [`registerPlugin`](https://theintern.io/docs.html#Intern/4/api/lib%2Fexecutors%2FExecutor/registerplugin).\n\t *\n\t * List entries may be reporter names or objects of the format\n\t *\n\t * ```js\n\t * {\n\t *     name: 'reporter name',\n\t *     options: {\n\t *         // reporter-specific options\n\t *     }\n\t * }\n\t * ```\n\t *\n\t * The built-in reporters under Node are:\n\t *   * benchmark - output benchmark test results\n\t *   * cobertura - output coverage data in the cobertura format\n\t *   * htmlcoverage - output coverage data as an HTML report\n\t *   * jsoncoverage - output coverage data in a JSON format\n\t *   * junit - output results in JUnit format\n\t *   * lcov - output coverage results in lcov format\n\t *   * pretty - draw text results in a terminal\n\t *   * runner - output test results as formatted text (default Node reporter)\n\t *   * simple - output test results as simple text\n\t *   * teamcity - output results in TeamCity format\n\t *\n\t * The built-in reporters available in browsers are:\n\t *   * console - output to the browser console\n\t *   * dom - output results as text in the DOM\n\t *   * html - output a pretty HTML report (default browser reporter)\n\t */\n\treporters: ReporterDescriptor[];\n\n\t/**\n\t * A list of scripts or modules to load before suites are loaded.\n\t */\n\tplugins: PluginDescriptor[];\n\n\t/**\n\t * A list of paths or glob expressions that point to suite scripts.\n\t *\n\t * ```js\n\t * {\n\t *     suites: [\n\t *         'tests/unit/**\\/*.js',\n\t *         'tests/intergration/request.js'\n\t *     ]\n\t * }\n\t * ```\n\t *\n\t * Note that using globs with the browser client requires that Intern's\n\t * server be used to serve the tests. The server can be run in standalone\n\t * mode by setting the `serveOnly` option.\n\t */\n\tsuites: string[];\n\n\t// Deprecated; these are only here for typing\n\trequire: never;\n\trequires: never;\n\tscripts: never;\n}\n\nexport interface BenchmarkConfig extends BenchmarkReporterOptions {\n\tid: string;\n}\n\nexport interface LoaderDescriptor {\n\tscript: string;\n\toptions?: { [key: string]: any };\n}\n\nexport interface EnvironmentSpec {\n\tbrowserName: string;\n\t[key: string]: any;\n}\n"]}