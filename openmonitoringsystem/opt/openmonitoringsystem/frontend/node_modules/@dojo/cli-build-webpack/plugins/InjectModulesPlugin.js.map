{"version":3,"file":"InjectModulesPlugin.js","sourceRoot":"","sources":["InjectModulesPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport NormalModule = require('webpack/lib/NormalModule');\nimport NormalModuleFactory = require('webpack/lib/NormalModuleFactory');\nimport Chunk = require('webpack/lib/Chunk');\nimport Compiler = require('webpack/lib/Compiler');\nimport Compilation = require('webpack/lib/Compilation');\nimport { getBasePath, isRelative } from './util/main';\nimport Map from '@dojo/shim/Map';\nimport '@dojo/shim/Promise';\nconst basePath = path.join(process.cwd(), 'node_modules');\n\nexport interface InjectModulesPluginOptions {\n\t/**\n\t * An optional base path for the injected modules. If not provided, defaults to the `resolve.root` option.\n\t * If `resolve.root` is an array, then the first path is used. If there is no `resolve.root`, then\n\t * `${process.cwd()}/node_modules/` is used.\n\t */\n\tcontext?: string;\n\n\t/**\n\t * The IDs for modules that should be injected into the build. If an array is provided, then the plugin's\n\t * `context` is used as the context. An object of contexts to module IDs can also be provided. IDs can be\n\t * either relative or absolute. If an ID is relative, then it will be resolved relative to the issuer; if\n\t * absolute, it will be resolved relative to the context.\n\t */\n\tmoduleIds: ModuleIds;\n\n\t/**\n\t * The regular expression that matches module paths to determine whether the specified module IDs should\n\t * be injected into the relevant chunk(s).\n\t */\n\tresourcePattern: RegExp;\n}\n\nexport type ModuleIds = string[] | { [basePath: string]: string[] };\n\n/**\n * @private\n * Generate the request and loader data for the specified module ID within the specified context.\n *\n * @param id\n * The module ID.\n *\n * @param absContext\n * The context used when the module ID is absolute.\n *\n * @param relativeContext\n * The context used when the module ID is relative.\n *\n * @param resolver\n * The resolver function.\n *\n * @return\n * A promise to the resolved module paths data.\n */\nfunction resolveContextPath(id: string, absContext: string, relativeContext: string, resolver: NormalModuleFactory.Resolver) {\n\treturn new Promise<NormalModuleFactory.AfterData>((resolve, reject) => {\n\t\tresolver({\n\t\t\tcontextInfo: {},\n\t\t\tcontext: isRelative(id) ? relativeContext : absContext,\n\t\t\trequest: id\n\t\t}, (error, result) => {\n\t\t\tif (error) {\n\t\t\t\treturn reject(error);\n\t\t\t}\n\n\t\t\tresolve(result);\n\t\t});\n\t});\n}\n\n/**\n * @private\n * Resolve the default context to use when resolving the IDs for any injected modules.\n *\n * @param plugin\n * The plugin instance.\n *\n * @param compiler\n * The compiler instance.\n */\nfunction setContext(plugin: InjectModulesPlugin, compiler: Compiler) {\n\tif (plugin.context) {\n\t\treturn;\n\t}\n\n\tconst resolve = compiler.options.resolve;\n\tconst modules = resolve && resolve.modules;\n\n\tplugin.context = Array.isArray(modules) ? modules[0] :\n\t\t(typeof modules === 'string') ? modules : basePath;\n}\n\n/**\n * @private\n * Validate the presence of module IDs.\n *\n * @param module IDs\n * The module ID array or hash to validate.\n *\n * @throws Error\n */\nfunction validateModuleIds(moduleIds: ModuleIds) {\n\tconst length = Array.isArray(moduleIds) ?\n\t\tmoduleIds.length :\n\t\tObject.keys(moduleIds).reduce((length: number, context: string) => {\n\t\t\treturn length + moduleIds[context].length;\n\t\t}, 0);\n\n\tif (!length) {\n\t\tthrow new Error('Missing module IDs.');\n\t}\n}\n\n/**\n * A webpack plugin that injects arbitrary modules into the relevant build chunks if a module matching a specified\n * pattern is included somewhere in the current module hierarchy.\n */\nexport default class InjectModulesPlugin {\n\tprotected _added: string[];\n\tprotected _modules: Map<string, NormalModule>;\n\n\tcontext?: string;\n\tmoduleIds: ModuleIds;\n\tresourcePattern: RegExp;\n\n\tconstructor(options: InjectModulesPluginOptions) {\n\t\tconst { context, moduleIds, resourcePattern } = options;\n\n\t\tvalidateModuleIds(moduleIds);\n\t\tthis._added = [];\n\t\tthis._modules = new Map<string, NormalModule>();\n\t\tthis.context = context;\n\t\tthis.moduleIds = moduleIds;\n\t\tthis.resourcePattern = resourcePattern;\n\t}\n\n\t/**\n\t * Set up the compiler and compilation event listeners.\n\t *\n\t * @param compiler\n\t * The compiler instance.\n\t */\n\tapply(compiler: Compiler) {\n\t\tconst { resourcePattern } = this;\n\t\tconst resources: string[] = [];\n\n\t\tsetContext(this, compiler);\n\n\t\tcompiler.plugin('compilation', (compilation, data) => {\n\t\t\t// Listening to the \"resolver\" event gives access to the resolver function that allows the injected module\n\t\t\t// IDs to be mapped to not only their resources, but also to any loaders.\n\t\t\tdata.normalModuleFactory.plugin('resolver', (resolver: NormalModuleFactory.Resolver): NormalModuleFactory.Resolver => {\n\t\t\t\treturn (data: NormalModuleFactory.BeforeData, callback: NormalModuleFactory.ResolverCallback): void => {\n\t\t\t\t\tresolver(data, (error, result) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treturn callback(error);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { resource } = result as NormalModuleFactory.AfterData;\n\t\t\t\t\t\tif (resourcePattern.test(resource) && resources.indexOf(resource) === -1) {\n\t\t\t\t\t\t\treturn this.resolve(resource, resolver)\n\t\t\t\t\t\t\t\t.then(resolved => {\n\t\t\t\t\t\t\t\t\tresources.push(resource);\n\t\t\t\t\t\t\t\t\treturn this.createModules(resolved, <Compilation> compilation);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\t\tcallback(null, result);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.catch((error: Error) => {\n\t\t\t\t\t\t\t\t\tcallback(error);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcallback(null, result);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tcompilation.plugin('optimize-chunks', (chunks) => {\n\t\t\t\tthis._modules.forEach((module: NormalModule) => {\n\t\t\t\t\tchunks.forEach((chunk) => {\n\t\t\t\t\t\tconst requests = chunk.modules.map((module: NormalModule) => module.userRequest);\n\n\t\t\t\t\t\tif (requests.some((id: string) => resources.indexOf(id) > -1)) {\n\t\t\t\t\t\t\tchunk.addModule(module);\n\t\t\t\t\t\t\tmodule.addChunk(chunk);\n\t\t\t\t\t\t\tthis.injectModuleDependencies(module, chunk);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tcompiler.plugin('done', () => {\n\t\t\tthis._added.length = 0;\n\t\t});\n\t}\n\n\t/**\n\t * Generate and build the module instances, and then inject them into the current compilation.\n\t *\n\t * @param data\n\t * An array of resolved request data used to generate the module object.\n\t *\n\t * @param compilation\n\t * The current compilation.\n\t *\n\t * @return\n\t * A promise that resolves once all modules have been built.\n\t */\n\tcreateModules(data: NormalModuleFactory.AfterData[], compilation: Compilation): Promise<void[]> {\n\t\treturn Promise.all(data.map(item => {\n\t\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t\tconst { request, userRequest, rawRequest, loaders, resource, parser } = item;\n\t\t\t\tlet module = this._modules.get(resource);\n\n\t\t\t\tif (!module) {\n\t\t\t\t\tmodule = new NormalModule(request, userRequest, rawRequest, loaders, resource, parser);\n\t\t\t\t\tthis._modules.set(resource, module);\n\t\t\t\t}\n\n\t\t\t\tcompilation.addModule(module);\n\t\t\t\tcompilation.buildModule(module, false, null, null, (error?: Error) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treturn reject(error);\n\t\t\t\t\t}\n\n\t\t\t\t\tcompilation.processModuleDependencies(module as NormalModule, (error?: Error) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treturn reject(error);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}));\n\t}\n\n\tinjectModuleDependencies(module: NormalModule, chunk: Chunk) {\n\t\tif (this._added.indexOf(module.userRequest) > -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._added.push(module.userRequest);\n\t\tmodule.dependencies.forEach(dependency => {\n\t\t\tconst modules = Array.isArray(dependency.module) ? dependency.module : [ dependency.module ];\n\t\t\tmodules.filter(module => Boolean(module))\n\t\t\t\t.forEach(module => {\n\t\t\t\t\tchunk.addModule(module);\n\t\t\t\t\tmodule.addChunk(chunk);\n\t\t\t\t\tthis.injectModuleDependencies(module as NormalModule, chunk);\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Resolve the request data for all modules injected for the specified resource.\n\t *\n\t * @param resource\n\t * The context for the injected modules.\n\t *\n\t * @param resolver\n\t * The resolver function.\n\t *\n\t * @return\n\t * A promise that resolves to the request data for the injected modules.\n\t */\n\tresolve(resource: string, resolver: NormalModuleFactory.Resolver): Promise<NormalModuleFactory.AfterData[]> {\n\t\tconst { context, moduleIds } = this;\n\t\tconst resourcePath = getBasePath(resource);\n\n\t\tif (Array.isArray(moduleIds)) {\n\t\t\treturn Promise.all(moduleIds.map((id: string) => {\n\t\t\t\treturn resolveContextPath(id, context as string, resourcePath, resolver);\n\t\t\t}));\n\t\t}\n\t\telse {\n\t\t\treturn Promise.all(Object.keys(moduleIds).reduce((promises: any[], context: string) => {\n\t\t\t\treturn promises.concat(moduleIds[context].map((id: string) => {\n\t\t\t\t\treturn resolveContextPath(id, context, resourcePath, resolver);\n\t\t\t\t}));\n\t\t\t}, []));\n\t\t}\n\t}\n}\n"]}