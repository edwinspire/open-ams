{"version":3,"file":"main.js","sourceRoot":"","sources":["main.ts"],"names":[],"mappings":";;AAAA,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3C,MAAM,uBAAuB,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;AAE/D;;;;;;GAMG;AACH,8BAAqC,OAAe;IACnD,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC;AACxD,CAAC;AAFD,oDAEC;AAED;;;;;;;;GAQG;AACH,qBAA4B,OAAe;IAC1C,MAAM,MAAM,GAAG,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC;IACtE,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAClE,MAAM,CAAC,IAAI,KAAK,EAAE,GAAG,GAAG,GAAG,MAAM,GAAG,IAAI,CAAC;AAC1C,CAAC;AAJD,kCAIC;AAED,MAAM,gBAAgB,GAAG,eAAe,CAAC;AAEzC;;;;;;;;GAQG;AACH,sBAA6B,IAAY;IACxC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpC,CAAC;AAFD,oCAEC;AAED;;;;;;;;;;;GAWG;AACH,qBAA4B,IAAc,EAAE,KAAe;IAC1D,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAgB,EAAE,KAAa;QACnD,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IACf,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;AAClB,CAAC;AAPD,kCAOC;AAED;;;;;;;;GAQG;AACH,oBAA2B,EAAU;IACpC,MAAM,KAAK,GAAG,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IACtC,MAAM,CAAC,KAAK,KAAK,GAAG,IAAI,KAAK,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzD,CAAC;AAHD,gCAGC;AAED;;;;;;;;GAQG;AACH,oBAA2B,GAAW;IACrC,MAAM,WAAW,GAAQ,OAAO,CAAC;IACjC,MAAM,CAAC,OAAO,WAAW,CAAC,KAAK,KAAK,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACpG,CAAC;AAHD,gCAGC","sourcesContent":["const { normalize, sep } = require('path');\nconst currentDirectoryPattern = createFilePathRegExp('^\\\\.\\/');\n\n/**\n * Creates a regular expression from a string that can match a file path regardless of the path separator.\n *\n * @param pattern A regular expression string that matches a file path pattern.\n *\n * @return A regular expression that matches a file path pattern.\n */\nexport function createFilePathRegExp(pattern: string): RegExp {\n\treturn new RegExp(pattern.replace(/\\//g, '(\\\\\\\\|\\/)'));\n}\n\n/**\n * Strips the module name from the provided path.\n *\n * @param context\n * The context module path.\n *\n * @return\n * The base path.\n */\nexport function getBasePath(context: string): string {\n\tconst prefix = currentDirectoryPattern.test(context) ? `.${sep}` : '';\n\tconst base = normalize(context).split(sep).slice(0, -1).join(sep);\n\treturn base === '' ? sep : prefix + base;\n}\n\nconst extensionPattern = /\\.[a-z0-9]+$/i;\n\n/**\n * Tests a file path for the presence of an extension. Note that the test only accounts for alphanumeric extensions.\n *\n * @param path\n * The file path to test.\n *\n * @return\n * `true` if the file path has an extension; `false` otherwise.\n */\nexport function hasExtension(path: string): boolean {\n\treturn extensionPattern.test(path);\n}\n\n/**\n * Add any unique strings from the second array into the first array.\n *\n * @param left\n * An array to merge values into.\n *\n * @param right\n * An array with values to merge into the first array.\n *\n * @return\n * A new array containing all unique values from both input arrays.\n */\nexport function mergeUnique(left: string[], right: string[]): string[] {\n\treturn right.reduce((result: string[], value: string) => {\n\t\tif (result.indexOf(value) < 0) {\n\t\t\tresult.push(value);\n\t\t}\n\t\treturn result;\n\t}, left.slice());\n}\n\n/**\n * Test whether a module ID is relative or absolute.\n *\n * @param id\n * The module ID.\n *\n * @return\n * `true` if the path is relative; `false` otherwise.\n */\nexport function isRelative(id: string): boolean {\n\tconst first = normalize(id.charAt(0));\n\treturn first !== sep && first !== '@' && /^\\W/.test(id);\n}\n\n/**\n * Resolve a module ID to its absolute file path.\n *\n * @param mid\n * The module ID to resolve.\n *\n * @return\n * The resolved module file path.\n */\nexport function resolveMid(mid: string): string {\n\tconst rootRequire: any = require;\n\treturn typeof rootRequire.toUrl === 'function' ? rootRequire.toUrl(mid) : rootRequire.resolve(mid);\n}\n"]}