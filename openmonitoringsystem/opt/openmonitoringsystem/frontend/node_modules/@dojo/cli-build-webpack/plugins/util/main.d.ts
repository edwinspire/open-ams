/**
 * Creates a regular expression from a string that can match a file path regardless of the path separator.
 *
 * @param pattern A regular expression string that matches a file path pattern.
 *
 * @return A regular expression that matches a file path pattern.
 */
export declare function createFilePathRegExp(pattern: string): RegExp;
/**
 * Strips the module name from the provided path.
 *
 * @param context
 * The context module path.
 *
 * @return
 * The base path.
 */
export declare function getBasePath(context: string): string;
/**
 * Tests a file path for the presence of an extension. Note that the test only accounts for alphanumeric extensions.
 *
 * @param path
 * The file path to test.
 *
 * @return
 * `true` if the file path has an extension; `false` otherwise.
 */
export declare function hasExtension(path: string): boolean;
/**
 * Add any unique strings from the second array into the first array.
 *
 * @param left
 * An array to merge values into.
 *
 * @param right
 * An array with values to merge into the first array.
 *
 * @return
 * A new array containing all unique values from both input arrays.
 */
export declare function mergeUnique(left: string[], right: string[]): string[];
/**
 * Test whether a module ID is relative or absolute.
 *
 * @param id
 * The module ID.
 *
 * @return
 * `true` if the path is relative; `false` otherwise.
 */
export declare function isRelative(id: string): boolean;
/**
 * Resolve a module ID to its absolute file path.
 *
 * @param mid
 * The module ID to resolve.
 *
 * @return
 * The resolved module file path.
 */
export declare function resolveMid(mid: string): string;
