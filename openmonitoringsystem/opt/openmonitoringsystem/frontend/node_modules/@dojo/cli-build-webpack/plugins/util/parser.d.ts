import { ArrayExpression, BaseFunction, Node } from 'estree';
/**
 * If the provided node is an array expression, then return an array containing its values.
 * @private
 *
 * @param item An AST node
 * @return An array of values if the node is an array expression; otherwise, `undefined`.
 */
export declare function extractArrayValues(item: any): any[] | undefined;
/**
 * Return a parent node's child node, if it exists.
 *
 * @param item The parent node.
 * @return The child node, if it exists.
 */
export declare const getNextItem: (item: Node) => Node | null;
/**
 * Determine whether the provided node is an array expression.
 * @private
 *
 * @param item The node to test.
 * @return `true` if the item is an array expression; false otherwise.
 */
export declare function isArrayExpression(item: any): item is ArrayExpression;
/**
 * Determine whether the provided node is a function declaration.
 * @private
 *
 * @param item The item to test.
 * @return `true` if the node represents either function declaration or a function expression.
 */
export declare function isFunctionDefinition(item: any): item is BaseFunction;
/**
 * Determine whether the specified node is shadowing any of the specified variable names.
 * @private
 *
 * @param item The node to test
 * @param importNames A list of variable names.
 * @return `true` if the node is a shadowing node
 */
export declare function isShadowing(item: Node, importNames: string[]): boolean;
