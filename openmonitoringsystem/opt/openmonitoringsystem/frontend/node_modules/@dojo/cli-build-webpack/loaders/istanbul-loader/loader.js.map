{"version":3,"file":"loader.js","sourceRoot":"","sources":["loader.ts"],"names":[],"mappings":";;AAEA,MAAM,EAAE,kBAAkB,EAAE,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;AAElE;;;;;GAKG;AACH,mBAAsD,OAAe,EAAE,SAAe;IACrF,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;IAE9B,MAAM,YAAY,GAAG,kBAAkB,CAAC;QACvC,gBAAgB,EAAE,IAAI;QACtB,SAAS,EAAE,IAAI;KACf,CAAC,CAAC;IAEH;;;;;OAKG;IACH,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QACpC,SAAS,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAc;YACxD,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC5C,EAAE,CAAC,CAAC,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;YACvC,CAAC;YACD,MAAM,CAAC,MAAM,CAAC;QACf,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,YAAY,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,KAAY,EAAE,kBAA0B;QAC5F,QAAQ,CAAC,IAAI,EAAE,kBAAkB,EAAE,YAAY,CAAC,aAAa,EAAE,CAAC,CAAC;IAClE,CAAC,EAAE,SAAS,CAAC,CAAC;AACf,CAAC;AA3BD,4BA2BC","sourcesContent":["import webpack = require('webpack');\n\nconst { createInstrumenter } = require('istanbul-lib-instrument');\n\n/**\n * Take a source file and run it through istanbul for instrumentation\n *\n * @param {string} content the source code\n * @param {object} sourceMap The source map object\n */\nexport default function (this: webpack.LoaderContext, content: string, sourceMap?: any) {\n\tconst callback = this.async();\n\n\tconst instrumenter = createInstrumenter({\n\t\tproduceSourceMap: true,\n\t\tesModules: true\n\t});\n\n\t/*\n\tFor the code coverage to work we need to modify the sources in the source map to point back to the original file.\n\tThe files coming in have been generated by webpack and look like,\n\t\"node_modules/tslint-loader?!path/to/file/css-modules!path/to/file.ts. We need these files to simply\n\tbe \"path/to/file.ts\".\n\t */\n\tif (sourceMap && sourceMap.sources) {\n\t\tsourceMap.sources = sourceMap.sources.map((source: string) => {\n\t\t\tconst lastExclaim = source.lastIndexOf('!');\n\t\t\tif (lastExclaim !== -1) {\n\t\t\t\treturn source.substr(lastExclaim + 1);\n\t\t\t}\n\t\t\treturn source;\n\t\t});\n\t}\n\n\tinstrumenter.instrument(content, this.resourcePath, (error: Error, instrumentedSource: string) => {\n\t\tcallback(null, instrumentedSource, instrumenter.lastSourceMap());\n\t}, sourceMap);\n}\n"]}