{"version":3,"file":"unit.js","sourceRoot":"","sources":["unit.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,qBAAmB;IACnB,yCAAuC;IAEvC,8CAAsD;IAoCtD,oBAA2B,KAAa,EAAE,IAAY,EAAE,eAA+C,EAAE,MAAe;QACvH,MAAM,CAAC,8BAAkB,CAAuC,YAAY,EAAE;YAC7E,MAAM,QAAA;YACN,eAAe,iBAAA;YACf,IAAI,MAAA;YACJ,KAAK,OAAA;SACL,CAAC,CAAC;IACJ,CAAC;IAPD,gCAOC;IAmBD,0BAAiC,IAAY,EAAE,eAA+C,EAAE,MAAe;QAC9G,MAAM,CAAC,8BAAkB,CAAgD,eAAe,EAAE;YACzF,MAAM,QAAA;YACN,eAAe,iBAAA;YACf,IAAI,MAAA;SACJ,CAAC,CAAC;IACJ,CAAC;IAND,4CAMC","sourcesContent":["import 'globalize';\nimport 'globalize/dist/globalize/unit';\nimport { NumberFormatter, NumberFormatterOptions } from './number';\nimport { globalizeDelegator } from './util/globalize';\n\nexport type UnitLength = 'long' | 'narrow' | 'short';\n\nexport type UnitFormatterOptions = {\n\t/**\n\t * form: [String] eg. \"long\", \"short\" or \"narrow\".\n\t */\n\tform?: UnitLength;\n\n\t/**\n\t * numberFormatter: [Function] a number formatter function. Defaults to Globalize .numberFormatter() for the current locale using the default options.\n\t */\n\tnumberFormatter?: NumberFormatterOptions;\n};\n\n/**\n * Return a string formatted for the specified number, unit, and options/locale.\n *\n * @param value\n * The number of units.\n *\n * @param unit\n * The unit, singular (e.g., \"day\", \"meter\", \"foot\").\n *\n * @param options\n * An optional configuration object that determines how the number and unit are formatted.\n *\n * @param locale\n * The optional locale. Defaults to the root locale.\n *\n * @return\n * The formatted string.\n */\nexport function formatUnit(value: number, unit: string, options?: UnitFormatterOptions, locale?: string): string;\nexport function formatUnit(value: number, unit: string, locale?: string): string;\nexport function formatUnit(value: number, unit: string, optionsOrLocale?: UnitFormatterOptions | string, locale?: string): string {\n\treturn globalizeDelegator<number, UnitFormatterOptions, string>('formatUnit', {\n\t\tlocale,\n\t\toptionsOrLocale,\n\t\tunit,\n\t\tvalue\n\t});\n}\n\n/**\n * Return a function that formats a number according to specified unit and options/locale.\n *\n * @param unit\n * The unit, singular (e.g., \"day\", \"meter\", \"foot\").\n *\n * @param options\n * An optional configuration object that determines how the number and unit are formatted.\n *\n * @param locale\n * The optional locale. Defaults to the root locale.\n *\n * @return\n * A function that accepts a number and returns a string formatted according to the specified unit and options/locale.\n */\nexport function getUnitFormatter(unit: string, options?: UnitFormatterOptions, locale?: string): NumberFormatter;\nexport function getUnitFormatter(unit: string, locale?: string): NumberFormatter;\nexport function getUnitFormatter(unit: string, optionsOrLocale?: UnitFormatterOptions | string, locale?: string): NumberFormatter {\n\treturn globalizeDelegator<string, UnitFormatterOptions, NumberFormatter>('unitFormatter', {\n\t\tlocale,\n\t\toptionsOrLocale,\n\t\tunit\n\t});\n}\n"]}