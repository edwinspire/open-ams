{"version":3,"file":"webpack.js","sourceRoot":"","sources":["webpack.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,8BAA4B,CAAC,4BAA4B;IACzD,qCAOmB;IA4ClB,uBA/CA,sBAAY,CA+CA;IACZ,gBA/CA,eAAK,CA+CA;IACL,+BA/CA,8BAAoB,CA+CA;IA1CrB;;;OAGG;IACH,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB;;;;;6BACK,CAAC,UAAU,EAAX,wBAAW;wBACd,UAAU,GAAG,IAAI,CAAC;wBAClB,qBAAM,iBAAQ,CAAC,YAAY,CAAC,EAAA;;wBAA5B,SAA4B,CAAC;;;;;;KAE9B;IAOD,sBAAqC,aAA6C,EAAE,IAA0B;QAC7G,IAAI,GAAG,OAAO,aAAa,KAAK,UAAU,GAAG,IAAI,GAAG,aAAa,CAAC;QAElE,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC1B,CAAC;QAED,gBAAgB,EAAE,CAAC;QACnB,MAAM,CAAC,iBAAQ,CAAC,IAAgB,CAAC,CAAC;IACnC,CAAC;IATD,+BASC;IAED;;;OAGG;IACH,kBAAyB,SAAkC;QAAE,cAAiB;aAAjB,UAAiB,EAAjB,qBAAiB,EAAjB,IAAiB;YAAjB,6BAAiB;;QAC7E,gBAAgB,EAAE,CAAC;QACnB,MAAM,CAAC,kBAAY,iCAAC,SAAS,GAAK,IAAI,GAAE;IACzC,CAAC;IAHD,4BAGC","sourcesContent":["import '@dojo/shim/Promise'; // imported for side effects\nimport baseLoad, {\n\tCldrData,\n\tisLoaded as baseIsLoaded,\n\tLocaleData,\n\tmainPackages,\n\treset,\n\tsupplementalPackages\n} from './default';\n\ndeclare const __cldrData__: CldrData;\n\n/*\n * Loading the data in this manner allows a global `__cldrData__` to be populated after this module loads\n * in the event that a local equivalent is not injected at build time.\n */\nlet cldrLoaded = false;\nasync function loadInjectedData() {\n\tif (!cldrLoaded) {\n\t\tcldrLoaded = true;\n\t\tawait baseLoad(__cldrData__);\n\t}\n}\n\n/**\n * A webpack-specific function used to load CLDR data from a preset cache.\n */\nexport default function loadCldrData(contextRequire: Function, data: CldrData | string[]): Promise<void>;\nexport default function loadCldrData(data: CldrData | string[]): Promise<void>;\nexport default function loadCldrData(dataOrRequire: Function | CldrData | string[], data?: CldrData | string[]): Promise<void> {\n\tdata = typeof dataOrRequire === 'function' ? data : dataOrRequire;\n\n\tif (Array.isArray(data)) {\n\t\treturn Promise.resolve();\n\t}\n\n\tloadInjectedData();\n\treturn baseLoad(data as CldrData);\n}\n\n/**\n * A light wrapper around the base `isLoaded` method that ensures the injected CLDR data have been registered\n * with the i18n ecosystem.\n */\nexport function isLoaded(groupName: 'main' | 'supplemental', ...args: string[]) {\n\tloadInjectedData();\n\treturn baseIsLoaded(groupName, ...args);\n}\n\nexport {\n\tCldrData,\n\tLocaleData,\n\tmainPackages,\n\treset,\n\tsupplementalPackages\n}\n"]}