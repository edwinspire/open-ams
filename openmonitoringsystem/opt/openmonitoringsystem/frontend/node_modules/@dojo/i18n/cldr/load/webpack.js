(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/shim/Promise", "./default"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    require("@dojo/shim/Promise"); // imported for side effects
    var default_1 = require("./default");
    exports.mainPackages = default_1.mainPackages;
    exports.reset = default_1.reset;
    exports.supplementalPackages = default_1.supplementalPackages;
    /*
     * Loading the data in this manner allows a global `__cldrData__` to be populated after this module loads
     * in the event that a local equivalent is not injected at build time.
     */
    var cldrLoaded = false;
    function loadInjectedData() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!cldrLoaded) return [3 /*break*/, 2];
                        cldrLoaded = true;
                        return [4 /*yield*/, default_1.default(__cldrData__)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    }
    function loadCldrData(dataOrRequire, data) {
        data = typeof dataOrRequire === 'function' ? data : dataOrRequire;
        if (Array.isArray(data)) {
            return Promise.resolve();
        }
        loadInjectedData();
        return default_1.default(data);
    }
    exports.default = loadCldrData;
    /**
     * A light wrapper around the base `isLoaded` method that ensures the injected CLDR data have been registered
     * with the i18n ecosystem.
     */
    function isLoaded(groupName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        loadInjectedData();
        return default_1.isLoaded.apply(void 0, tslib_1.__spread([groupName], args));
    }
    exports.isLoaded = isLoaded;
});
//# sourceMappingURL=webpack.js.map