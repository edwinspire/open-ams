{"version":3,"file":"load.js","sourceRoot":"","sources":["load.ts"],"names":[],"mappings":";;;;;;;;;;;;IAAA,wCAAmC;IACnC,8CAA6C;IAC7C,qCAAgC;IAEhC,8CAAyC;IAEzC,0CAQwB;IAuEvB,mBA3EA,kBAAQ,CA2EA;IACR,uBA3EA,sBAAY,CA2EA;IACZ,gBA3EA,eAAK,CA2EA;IACL,+BA3EA,8BAAoB,CA2EA;IAtErB;;;;;;;;;;;;OAYG;IACH,IAAM,OAAO,GAA2D,CAAC;QACxE,EAAE,CAAC,CAAC,aAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,UAAU,OAAY,EAAE,KAAe;gBAC7C,MAAM,CAAC,cAAI,iCAAC,OAAO,GAAK,KAAK,GAAE;YAChC,CAAC,CAAC;QACH,CAAC;QAED,MAAM,CAAC,UAAU,OAAY,EAAE,KAAe;YAC7C,MAAM,CAAC,iBAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAY;gBACzC,EAAE,CAAC,CAAC,OAAO,OAAO,CAAC,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC;oBACzC,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC5B,CAAC;gBAED,MAAM,CAAqB,iBAAW,CAAC,GAAG,CAAC,IAAI,CAAC;qBAC9C,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;qBACjC,IAAI,CAAC,UAAC,IAAc;oBACpB,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IACH,CAAC,CAAC,EAAE,CAAC;IAiBL,sBAAqC,aAA6C,EAAE,IAA0B;QAC7G,IAAM,cAAc,GAAG,OAAO,aAAa,KAAK,UAAU,GAAG,aAAa,GAAG,OAAO,CAAC;QACrF,IAAI,GAAG,OAAO,aAAa,KAAK,UAAU,GAAG,IAAI,GAAG,aAAa,CAAC;QAElE,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,MAAkB;gBAC5D,MAAM,CAAC,OAAO,CAAC,iBAAQ,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,MAAM,CAAC,iBAAQ,CAAC,IAAgB,CAAC,CAAC;IACnC,CAAC;IAXD,+BAWC","sourcesContent":["import load from '@dojo/core/load';\nimport coreRequest from '@dojo/core/request';\nimport has from '@dojo/has/has';\nimport { Require } from '@dojo/interfaces/loader';\nimport Promise from '@dojo/shim/Promise';\n\nimport baseLoad, {\n\tCldrData,\n\tCldrGroup,\n\tLocaleData,\n\tisLoaded,\n\tmainPackages,\n\treset,\n\tsupplementalPackages\n} from './load/default';\n\ndeclare const require: Require;\n\n/**\n * @private\n * Load the CLDR JSON files at the specified paths.\n *\n * @param require\n * The require method used to resolve relative paths.\n *\n * @param paths\n * The JSON paths.\n *\n * @return\n * A promise to the CLDR data for each path.\n */\nconst getJson: (require: any, paths: string[]) => Promise<CldrData[]> = (function () {\n\tif (has('host-node')) {\n\t\treturn function (require: any, paths: string[]): Promise<{}[]> {\n\t\t\treturn load(require, ...paths);\n\t\t};\n\t}\n\n\treturn function (require: any, paths: string[]): Promise<CldrData[]> {\n\t\treturn Promise.all(paths.map((path: string): Promise<CldrData> => {\n\t\t\tif (typeof require.toUrl === 'function') {\n\t\t\t\tpath = require.toUrl(path);\n\t\t\t}\n\n\t\t\treturn <Promise<CldrData>> coreRequest.get(path)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then((data: CldrData) => {\n\t\t\t\t\treturn data;\n\t\t\t\t});\n\t\t}));\n\t};\n})();\n\n/**\n * Load the specified CLDR data with the i18n ecosystem.\n *\n * @param contextRequire\n * An optional contextual require that can be used to resolve relative paths.\n *\n * @param data\n * Either a data object to load directly, or an array of URLs to CLDR data objects. Note that the response for\n * dynamically-loaded data must satisfy the `CldrData` interface.\n *\n * @return\n * A promise that resolves once all data have been loaded and registered.\n */\nexport default function loadCldrData(contextRequire: Function, data: CldrData | string[]): Promise<void>;\nexport default function loadCldrData(data: CldrData | string[]): Promise<void>;\nexport default function loadCldrData(dataOrRequire: Function | CldrData | string[], data?: CldrData | string[]): Promise<void> {\n\tconst contextRequire = typeof dataOrRequire === 'function' ? dataOrRequire : require;\n\tdata = typeof dataOrRequire === 'function' ? data : dataOrRequire;\n\n\tif (Array.isArray(data)) {\n\t\treturn getJson(contextRequire, data).then((result: CldrData[]) => {\n\t\t\tresult.forEach(baseLoad);\n\t\t});\n\t}\n\n\treturn baseLoad(data as CldrData);\n}\n\nexport {\n\tCldrData,\n\tCldrGroup,\n\tLocaleData,\n\tisLoaded,\n\tmainPackages,\n\treset,\n\tsupplementalPackages\n}\n"]}