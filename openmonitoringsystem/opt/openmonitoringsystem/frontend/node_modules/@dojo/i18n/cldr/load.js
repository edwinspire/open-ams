(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/core/load", "@dojo/core/request", "@dojo/has/has", "@dojo/shim/Promise", "./load/default"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var load_1 = require("@dojo/core/load");
    var request_1 = require("@dojo/core/request");
    var has_1 = require("@dojo/has/has");
    var Promise_1 = require("@dojo/shim/Promise");
    var default_1 = require("./load/default");
    exports.isLoaded = default_1.isLoaded;
    exports.mainPackages = default_1.mainPackages;
    exports.reset = default_1.reset;
    exports.supplementalPackages = default_1.supplementalPackages;
    /**
     * @private
     * Load the CLDR JSON files at the specified paths.
     *
     * @param require
     * The require method used to resolve relative paths.
     *
     * @param paths
     * The JSON paths.
     *
     * @return
     * A promise to the CLDR data for each path.
     */
    var getJson = (function () {
        if (has_1.default('host-node')) {
            return function (require, paths) {
                return load_1.default.apply(void 0, tslib_1.__spread([require], paths));
            };
        }
        return function (require, paths) {
            return Promise_1.default.all(paths.map(function (path) {
                if (typeof require.toUrl === 'function') {
                    path = require.toUrl(path);
                }
                return request_1.default.get(path)
                    .then(function (response) { return response.json(); })
                    .then(function (data) {
                    return data;
                });
            }));
        };
    })();
    function loadCldrData(dataOrRequire, data) {
        var contextRequire = typeof dataOrRequire === 'function' ? dataOrRequire : require;
        data = typeof dataOrRequire === 'function' ? data : dataOrRequire;
        if (Array.isArray(data)) {
            return getJson(contextRequire, data).then(function (result) {
                result.forEach(default_1.default);
            });
        }
        return default_1.default(data);
    }
    exports.default = loadCldrData;
});
//# sourceMappingURL=load.js.map