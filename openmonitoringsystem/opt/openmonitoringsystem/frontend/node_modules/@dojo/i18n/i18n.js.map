{"version":3,"file":"i18n.js","sourceRoot":"","sources":["i18n.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:interface-name */\nimport Evented from '@dojo/core/Evented';\nimport has from '@dojo/core/has';\nimport { assign } from '@dojo/core/lang';\nimport load, { useDefault } from '@dojo/core/load';\nimport { Handle } from '@dojo/interfaces/core';\nimport global from '@dojo/shim/global';\nimport Map from '@dojo/shim/Map';\nimport Observable, { Observer, Subscription, SubscriptionObserver } from '@dojo/shim/Observable';\nimport Promise from '@dojo/shim/Promise';\nimport * as Globalize from 'globalize/dist/globalize/message';\nimport { isLoaded } from './cldr/load';\nimport { generateLocales, normalizeLocale } from './util/main';\n\n/**\n * A default bundle used as basis for loading locale-specific bundles.\n */\nexport interface Bundle<T extends Messages> {\n\t/**\n\t * The absolute module ID used by the loader to resolve paths to locale-specific paths. This MUST follow the format\n\t * \"{basePath}{separator}{filename}\". For example, if the module ID for a bundle is \"nls/common\", the loader will\n\t * look for locale-specific bundles at \"nls/{locale}/common\".\n\t */\n\treadonly bundlePath: string;\n\n\t/**\n\t * A list of supported locales. Any included locale MUST have an associated bundle.\n\t */\n\treadonly locales?: string[];\n\n\t/**\n\t * The map of default messages that will be used when locale-specific messages are unavailable.\n\t * Note that any message key used in the i18n system MUST have a default specified here.\n\t */\n\treadonly messages: T;\n}\n\n/**\n * Options object passed to message formatters and used for token replacement.\n */\nexport interface FormatOptions {\n\t[key: string]: any;\n}\n\nexport interface I18n<T extends Messages> {\n\t(bundle: Bundle<T>, locale?: string): Promise<T>;\n\n\t/**\n\t * The current namespace as set via `switchLocale`. Defaults to `systemLocale`.\n\t */\n\treadonly locale: string;\n}\n\ninterface LocaleModule<T extends Messages> {\n\tdefault?: T;\n}\n\n/**\n * Describes a compiled ICU message formatter function.\n */\nexport interface MessageFormatter {\n\t(options?: FormatOptions): string;\n}\n\n/**\n * An object of keys to locale messages.\n */\nexport interface Messages {\n\t[key: string]: string;\n}\n\nconst PATH_SEPARATOR: string = has('host-node') ? require('path').sep : '/';\nconst TOKEN_PATTERN = /\\{([a-z0-9_]+)\\}/gi;\nconst VALID_PATH_PATTERN = new RegExp(`\\\\${PATH_SEPARATOR}[^\\\\${PATH_SEPARATOR}]+\\$`);\nconst bundleMap = new Map<string, Map<string, Messages>>();\nconst formatterMap = new Map<string, MessageFormatter>();\nconst localeProducer = new Evented({});\nlet rootLocale: string;\n\n/**\n * @private\n * Return a function that formats an ICU-style message, and takes an optional value for token replacement.\n *\n * Usage:\n * const formatter = getMessageFormatter(bundlePath, 'guestInfo', 'fr');\n * const message = formatter({\n *   host: 'Miles',\n *   gender: 'male',\n *   guest: 'Oscar',\n *   guestCount: '15'\n * });\n *\n * @param bundlePath\n * The message's bundle path.\n *\n * @param key\n * The message's key.\n *\n * @param locale\n * An optional locale for the formatter. If no locale is supplied, or if the locale is not supported, the\n * default locale is used.\n *\n * @return\n * The message formatter.\n */\nfunction getIcuMessageFormatter(bundlePath: string, key: string, locale?: string): MessageFormatter {\n\tconst normalized = bundlePath.replace(new RegExp(`\\\\${PATH_SEPARATOR}`, 'g'), '-').replace(/-$/, '');\n\tlocale = normalizeLocale(locale || getRootLocale());\n\tconst formatterKey = `${locale}:${bundlePath}:${key}`;\n\tlet formatter = formatterMap.get(formatterKey);\n\n\tif (formatter) {\n\t\treturn formatter;\n\t}\n\n\tconst globalize = locale !== getRootLocale() ? new Globalize(normalizeLocale(locale)) : Globalize;\n\tformatter = globalize.messageFormatter(`${normalized}/${key}`);\n\n\tconst cached = bundleMap.get(bundlePath);\n\tif (cached && cached.get(locale)) {\n\t\tformatterMap.set(formatterKey, formatter);\n\t}\n\n\treturn formatter;\n}\n\n/**\n * @private\n * Load the specified locale-specific bundles, mapping the default exports to simple `Messages` objects.\n */\nconst loadLocaleBundles = (function () {\n\tfunction mapMessages<T extends Messages>(modules: LocaleModule<T>[]): T[] {\n\t\treturn modules.map((localeModule: LocaleModule<T>): T => useDefault(localeModule));\n\t}\n\n\treturn function<T extends Messages>(paths: string[]): Promise<T[]> {\n\t\treturn load(<any> require, ...paths).then((modules: LocaleModule<T>[]) => {\n\t\t\treturn mapMessages(modules);\n\t\t});\n\t};\n})();\n\n/**\n * @private\n * Return the root locale. Defaults to the system locale.\n */\nfunction getRootLocale(): string {\n\treturn rootLocale || systemLocale;\n}\n\n/**\n * @private\n * Retrieve a list of supported locales that can provide messages for the specified locale.\n *\n * @param locale\n * The target locale.\n *\n * @param supported\n * The locales that are supported by the bundle.\n *\n * @return\n * A list of supported locales that match the target locale.\n */\nfunction getSupportedLocales(locale: string, supported: string[] = []): string[] {\n\treturn generateLocales(locale).filter((locale: string) => supported.indexOf(locale) > -1);\n}\n\n/**\n * @private\n * Inject messages for the specified locale into the i18n system.\n *\n * @param bundlePath\n * The bundle path\n *\n * @param messages\n * The messages to inject\n *\n * @param locale\n * An optional locale. If not specified, then it is assumed that the messages are the defaults for the given\n * bundle path.\n */\nfunction loadMessages<T extends Messages> (bundlePath: string, messages: T, locale: string = 'root') {\n\tlet cached = bundleMap.get(bundlePath);\n\n\tif (!cached) {\n\t\tcached = new Map<string, Messages>();\n\t\tbundleMap.set(bundlePath, cached);\n\t}\n\n\tcached.set(locale, messages);\n\tGlobalize.loadMessages({\n\t\t[locale]: {\n\t\t\t[bundlePath.replace(new RegExp(`\\\\${PATH_SEPARATOR}`, 'g'), '-')]: messages\n\t\t}\n\t});\n}\n\n/**\n * @private\n * Return a list of locale path bundles for a target locale.\n *\n * @param path\n * The default bundle path.\n *\n * @param locale\n * The target locale\n *\n * @param supported\n * A list of locales with their own bundles.\n *\n * @return Paths for locale bundles to be loaded.\n */\nfunction resolveLocalePaths<T extends Messages>(path: string, locale: string, supported?: string[]): string[] {\n\tvalidatePath(path);\n\n\tlet filename: string;\n\tconst parentDirectory = path.replace(VALID_PATH_PATTERN, (matched: string): string => {\n\t\tfilename = matched;\n\t\treturn PATH_SEPARATOR;\n\t});\n\tconst locales = getSupportedLocales(locale, supported);\n\treturn locales.map((locale: string): string => {\n\t\treturn `${parentDirectory}${locale}${filename}`;\n\t});\n}\n\n/**\n * @private\n * Ensure a path follows the required format for loading locale-specific bundles.\n *\n * @param path\n * The default bundle path to validate.\n */\nfunction validatePath(path: string): void {\n\tif (!VALID_PATH_PATTERN.test(path)) {\n\t\tconst message = 'Invalid i18n bundle path. Bundle maps must adhere to the format' +\n\t\t\t' \"{basePath}{separator}{bundleName}\" so that locale bundles can be resolved.';\n\t\tthrow new Error(message);\n\t}\n}\n\n/**\n * Return a formatted message.\n *\n * If both the \"supplemental/likelySubtags\" and \"supplemental/plurals-type-cardinal\" CLDR data have been loaded, then\n * the ICU message format is supported. Otherwise, a simple token-replacement mechanism is used.\n *\n * Usage:\n * formatMessage(bundle.bundlePath, 'guestInfo', {\n *   host: 'Bill',\n *   guest: 'John'\n * }, 'fr');\n *\n * @param bundlePath\n * The message's bundle path.\n *\n * @param key\n * The message's key.\n *\n * @param options\n * An optional value used by the formatter to replace tokens with values.\n *\n * @param locale\n * An optional locale for the formatter. If no locale is supplied, or if the locale is not supported, the\n * default locale is used.\n *\n * @return\n * The formatted message.\n */\nexport function formatMessage(bundlePath: string, key: string, options?: FormatOptions, locale?: string): string {\n\treturn getMessageFormatter(bundlePath, key, locale)(options);\n}\n\n/**\n * Return the cached messages for the specified bundle and locale. If messages have not been previously loaded for the\n * specified locale, no value will be returned. If messages for the specified locale were added via\n * `setLocaleMessages`, then those messages will be returned regardless of whether the locale is listed in the bundle's\n * `locales` array.\n *\n * @param bundle\n * The default bundle that is used to determine where the locale-specific bundles are located.\n *\n * @param locale\n * The locale of the desired messages.\n *\n * @return The cached messages object, if it exists.\n */\nexport function getCachedMessages<T extends Messages>(bundle: Bundle<T>, locale: string): T | void {\n\tconst { bundlePath, locales, messages } = bundle;\n\tconst cached = bundleMap.get(bundlePath);\n\n\tif (!cached) {\n\t\tloadMessages(bundlePath, messages);\n\t}\n\telse {\n\t\tconst localeMessages = cached.get(locale);\n\t\tif (localeMessages) {\n\t\t\treturn localeMessages as T;\n\t\t}\n\t}\n\n\tconst supportedLocales = getSupportedLocales(locale, locales);\n\tif (!supportedLocales.length) {\n\t\treturn messages;\n\t}\n\n\tif (cached) {\n\t\treturn cached.get(supportedLocales[supportedLocales.length - 1]) as T;\n\t}\n}\n\n/**\n * Return a function that formats a specific message, and takes an optional value for token replacement.\n *\n * If both the \"supplemental/likelySubtags\" and \"supplemental/plurals-type-cardinal\" CLDR data have been loaded, then\n * the returned function will have ICU message format support. Otherwise, the returned function will perform a simple\n * token replacement on the message string.\n *\n * Usage:\n * const formatter = getMessageFormatter(bundlePath, 'guestInfo', 'fr');\n * const message = formatter({\n *   host: 'Miles',\n *   gender: 'male',\n *   guest: 'Oscar',\n *   guestCount: '15'\n * });\n *\n * @param bundlePath\n * The message's bundle path.\n *\n * @param key\n * The message's key.\n *\n * @param locale\n * An optional locale for the formatter. If no locale is supplied, or if the locale is not supported, the\n * default locale is used.\n *\n * @return\n * The message formatter.\n */\nexport function getMessageFormatter(bundlePath: string, key: string, locale?: string): MessageFormatter {\n\tif (isLoaded('supplemental', 'likelySubtags') && isLoaded('supplemental', 'plurals-type-cardinal')) {\n\t\treturn getIcuMessageFormatter(bundlePath, key, locale);\n\t}\n\n\tconst cached = bundleMap.get(bundlePath);\n\tconst messages = cached ? (cached.get(locale || getRootLocale()) || cached.get('root')) : null;\n\n\tif (!messages) {\n\t\tthrow new Error(`The bundle \"${bundlePath}\" has not been registered.`);\n\t}\n\n\treturn function (options: FormatOptions = Object.create(null)) {\n\t\treturn messages[key].replace(TOKEN_PATTERN, (token: string, property: string) => {\n\t\t\tconst value = options[property];\n\n\t\t\tif (typeof value === 'undefined') {\n\t\t\t\tthrow new Error(`Missing property ${property}`);\n\t\t\t}\n\n\t\t\treturn value;\n\t\t});\n\t};\n}\n\n/**\n * Load locale-specific messages for the specified bundle and locale.\n *\n * @param bundle\n * The default bundle that is used to determine where the locale-specific bundles are located.\n *\n * @param locale\n * An optional locale. If no locale is provided, then the current locale is assumed.\n *\n * @return A promise to the locale-specific messages.\n */\nfunction i18n<T extends Messages>(bundle: Bundle<T>, locale?: string): Promise<T> {\n\tconst { bundlePath, locales, messages } = bundle;\n\tconst path = bundlePath.replace(new RegExp(`\\\\${PATH_SEPARATOR}\\$`), '');\n\tconst currentLocale = locale ? normalizeLocale(locale) : getRootLocale();\n\n\ttry {\n\t\tvalidatePath(path);\n\t}\n\tcatch (error) {\n\t\treturn Promise.reject(error);\n\t}\n\n\tconst cachedMessages = getCachedMessages(bundle, currentLocale);\n\tif (cachedMessages) {\n\t\treturn Promise.resolve(cachedMessages);\n\t}\n\n\tconst localePaths = resolveLocalePaths(path, currentLocale, locales);\n\treturn loadLocaleBundles(localePaths).then((bundles: T[]): T => {\n\t\treturn bundles.reduce((previous: T, partial: T): T => {\n\t\t\tconst localeMessages: T = assign({}, previous, partial);\n\t\t\tloadMessages(bundlePath, <T> Object.freeze(localeMessages), currentLocale);\n\t\t\treturn localeMessages;\n\t\t}, messages);\n\t});\n}\n\nObject.defineProperty(i18n, 'locale', {\n\tget: getRootLocale\n});\n\nexport default i18n as I18n<Messages>;\n\n/**\n * Invalidate the cache for a particular bundle, or invalidate the entire cache. Note that cached messages for all\n * locales for a given bundle will be cleared.\n *\n * @param bundlePath\n * The optional path of the bundle to invalidate. If no path is provided, then the cache is cleared for all bundles.\n */\nexport function invalidate(bundlePath?: string) {\n\tif (bundlePath) {\n\t\tbundleMap.delete(bundlePath);\n\t}\n\telse {\n\t\tbundleMap.clear();\n\t}\n}\n\n/**\n * Register an observer to be notified when the root locale changes.\n *\n * @param observer\n * The observer whose `next` method will receive the locale string on updates, and whose `error` method will receive\n * an Error object if the locale switch fails.\n *\n * @return\n * A subscription object that can be used to unsubscribe from updates.\n */\nexport const observeLocale = (function () {\n\tconst localeSource = new Observable<string>((observer: SubscriptionObserver<string>) => {\n\t\tconst handles: Handle[] = [\n\t\t\tlocaleProducer.on('change', (event: any) => {\n\t\t\t\tobserver.next(event.target);\n\t\t\t})\n\t\t];\n\n\t\treturn function () {\n\t\t\thandles.forEach((handle: Handle) => {\n\t\t\t\thandle.destroy();\n\t\t\t});\n\t\t};\n\t});\n\n\treturn function (observer: Observer<string>): Subscription {\n\t\treturn localeSource.subscribe(observer);\n\t};\n})();\n\n/**\n * Pre-load locale-specific messages into the i18n system.\n *\n * @param bundle\n * The default bundle that is used to merge locale-specific messages with the default messages.\n *\n * @param messages\n * The messages to cache.\n *\n * @param locale\n * The locale for the messages\n */\nexport function setLocaleMessages<T extends Messages>(bundle: Bundle<T>, localeMessages: T, locale: string): void {\n\tconst messages: T = assign({}, bundle.messages, localeMessages);\n\tloadMessages(bundle.bundlePath, <T> Object.freeze(messages), locale);\n}\n\n/**\n * Change the root locale, and notify any registered observers.\n *\n * @param locale\n * The new locale.\n */\nexport function switchLocale(locale: string): void {\n\tconst previous = rootLocale;\n\trootLocale = locale ? normalizeLocale(locale) : '';\n\n\tif (previous !== rootLocale) {\n\t\tif (isLoaded('supplemental', 'likelySubtags')) {\n\t\t\tGlobalize.load({\n\t\t\t\tmain: {\n\t\t\t\t\t[rootLocale]: {}\n\t\t\t\t}\n\t\t\t});\n\t\t\tGlobalize.locale(rootLocale);\n\t\t}\n\n\t\tlocaleProducer.emit({ type: 'change', target: rootLocale });\n\t}\n}\n\n/**\n * The default environment locale.\n *\n * It should be noted that while the system locale will be normalized to a single\n * format when loading message bundles, this value represents the unaltered\n * locale returned directly by the environment.\n */\nexport const systemLocale: string = (function () {\n\tlet systemLocale = 'en';\n\tif (has('host-browser')) {\n\t\tconst navigator = global.navigator;\n\t\tsystemLocale = navigator.language || navigator.userLanguage;\n\t}\n\telse if (has('host-node')) {\n\t\tsystemLocale = process.env.LANG || systemLocale;\n\t}\n\treturn normalizeLocale(systemLocale);\n})();\n"]}