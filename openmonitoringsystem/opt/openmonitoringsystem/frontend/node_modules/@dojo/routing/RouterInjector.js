(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/widget-core/Injector", "./history/HashHistory", "./Router"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Injector_1 = require("@dojo/widget-core/Injector");
    var HashHistory_1 = require("./history/HashHistory");
    var Router_1 = require("./Router");
    /**
     * Key for the router injector
     */
    exports.routerKey = Symbol();
    /**
     * Creates a router instance for a specific History manager (default is `HashHistory`) and registers
     * the route configuration.
     *
     * @param config The route config to register for the router
     * @param registry An optional registry that defaults to the global registry
     * @param options The router injector options
     */
    function registerRouterInjector(config, registry, options) {
        if (options === void 0) { options = {}; }
        var _a = options.key, key = _a === void 0 ? exports.routerKey : _a, _b = options.history, history = _b === void 0 ? new HashHistory_1.default() : _b;
        if (registry.hasInjector(key)) {
            throw new Error('Router has already been defined');
        }
        var router = new Router_1.Router({ history: history, config: config });
        var injector = new Injector_1.Injector(router);
        router.on('navstart', function () {
            injector.emit({ type: 'invalidate' });
        });
        registry.defineInjector(key, injector);
        return router;
    }
    exports.registerRouterInjector = registerRouterInjector;
});
//# sourceMappingURL=RouterInjector.js.map