import UrlSearchParams from '@dojo/core/UrlSearchParams';
export interface ParsedPath {
    /**
     * Parameters extracted from the search component.
     */
    searchParams: UrlSearchParams;
    /**
     * Pathname segments.
     */
    segments: string[];
    /**
     * Whether the pathname ended with a trailing slash.
     */
    trailingSlash: boolean;
}
/**
 * Parses a path
 * @param path The path to parse.
 * @return The search params, pathname segments, and whether it ended with a trailing slash.
 */
export declare function parse(path: string): ParsedPath;
export interface MatchResult {
    /**
     * Whether there are remaining segments that weren't matched.
     */
    hasRemaining: boolean;
    /**
     * Position in the segments array that the remaining unmatched segments start.
     */
    offset: number;
    /**
     * Values for named segments.
     */
    values: string[];
}
/**
 * Determines whether a DeconstructedPath is a (partial) match for given pathname segments.
 * @param expectedSegments Part of a DeconstructedPath object.
 * @param segments Pathname segments as returned by `parse()`
 * @return A result object.
 */
export declare function match({expectedSegments}: DeconstructedPath, segments: string[]): MatchResult | null;
export interface LiteralSegment {
    literal: string;
}
export interface NamedSegment {
    name: string;
}
export declare type Segment = LiteralSegment | NamedSegment;
/**
 * Determine whether the segment is a NamedSegment.
 *
 * @param segment The segment to be checked
 * @return true if the segment is a NamedSegment, false otherwise
 */
export declare function isNamedSegment(segment: Segment): segment is NamedSegment;
/**
 * Describes a route path, broken down into its constituent parts.
 */
export interface DeconstructedPath {
    /**
     * Segments (literal and named) that are expected to be present when matching paths.
     */
    expectedSegments: Segment[];
    /**
     * Whether the pathname started with a slash.
     */
    leadingSlash: boolean;
    /**
     * Named path parameters, in the order that they occurred in the path.
     */
    parameters: string[];
    /**
     * Named query parameters, in the order that they occurred in the path.
     */
    searchParameters: string[];
    /**
     * Whether the pathname ended with a slash.
     */
    trailingSlash: boolean;
}
/**
 * Deconstruct a route path into its constituent parts.
 * @param path The path to deconstruct.
 * @return An object describing the path's constituent parts.
 */
export declare function deconstruct(path: string): DeconstructedPath;
