import UrlSearchParams from '@dojo/core/UrlSearchParams';
import { Thenable } from '@dojo/shim/interfaces';
import { Context, DefaultParameters, LinkParams, MatchResult, Parameters, Request, RouteInterface, Selection } from './interfaces';
import { DeconstructedPath } from './lib/path';
/**
 * The options for the route.
 */
export interface RouteOptions<C, P extends Parameters> {
    /**
     * Path the route matches against. Pathname segments may be named, same for query parameters. Leading slashes are
     * ignored. Defaults to `/`.
     */
    path?: string;
    /**
     * The outlet associated with the path
     */
    outlet?: string;
    /**
     * If the `path` option contains a trailing slash (in the pathname component), the route will only match against
     * another pathname that contains a trailing slash, and vice-versa if the path does not contain a trailing slash.
     * Defaults to `true`, change to `false` to allow routes to match regardless of trailing slashes.
     */
    trailingSlashMustMatch?: boolean;
    /**
     * A handler called when the route is executed.
     * @param request An object whose `context` property contains the dispatch context. Extracted parameters are
     *   available under `params`.
     */
    exec?(request: Request<C, P>): void | Thenable<any>;
    /**
     * If specified, causes the route to be selected if there are no nested routes that match the remainder of
     * the dispatched path. When the route is executed, this handler is called rather than `exec()`.
     * @param request An object whose `context` property contains the dispatch context. Extracted parameters are
     *   available under `params`.
     */
    fallback?(request: Request<C, P>): void | Thenable<any>;
    /**
     * Callback used to determine whether the route should be selected after it's been matched.
     * @param request An object whose `context` property contains the dispatch context. Extracted parameters are
     *   available under `params`.
     * @return Returning `true` causes the route to be selected. Returning a string indicates that a redirect is
     *   required; the string should be the path to redirect to.
     */
    guard?(request: Request<C, P>): string | boolean;
    /**
     * If specified, and the route is the final route in the hierarchy, when the route is executed, this handler is
     * called rather than `exec()`.
     * @param request An object whose `context` property contains the dispatch context. Extracted parameters are
     *   available under `params`.
     */
    index?(request: Request<C, P>): void | Thenable<any>;
    /**
     * Callback used for constructing the `params` object from extracted parameters, and validating the parameters.
     * @param fromPathname Array of parameter values extracted from the pathname.
     * @param searchParams Parameters extracted from the search component.
     * @return If `null` prevents the route from being selected, else the value for the `params` object.
     */
    params?(fromPathname: string[], searchParams: UrlSearchParams): null | P;
    /**
     * Default params to use when generating a link.
     */
    defaultParams?: null | P;
}
export declare class Route<C extends Context, P extends Parameters> implements RouteInterface<C, P> {
    private _path;
    private _outlet;
    private _routes;
    private _trailingSlashMustMatch;
    private _computeParams;
    private _exec?;
    private _fallback?;
    private _guard;
    private _index?;
    private _defaultParams;
    readonly parent: Route<Context, Parameters> | undefined;
    readonly path: DeconstructedPath;
    readonly outlet: string | undefined;
    readonly defaultParams: P;
    constructor(options?: RouteOptions<C, P>);
    append(add: Route<Context, Parameters> | Route<Context, Parameters>[]): void;
    link(params?: LinkParams): string;
    match(segments: string[], hasTrailingSlash: boolean, searchParams: UrlSearchParams): null | MatchResult<DefaultParameters | P>;
    select(context: C, segments: string[], hasTrailingSlash: boolean, searchParams: UrlSearchParams): string | Selection[];
}
export default Route;
