{"version":3,"file":"RouterInjector.js","sourceRoot":"","sources":["RouterInjector.ts"],"names":[],"mappings":";;;;;;;;;;;IACA,uDAAsD;IAGtD,qDAAgD;IAEhD,mCAAkC;IAGlC;;OAEG;IACU,QAAA,SAAS,GAAG,MAAM,EAAE,CAAC;IAWlC;;;;;;;OAOG;IACH,gCAAuC,MAAqB,EAAE,QAAkB,EAAE,OAAmC;QAAnC,wBAAA,EAAA,YAAmC;QAC5G,IAAA,gBAAe,EAAf,4CAAe,EAAE,oBAA2B,EAA3B,0DAA2B,CAAa;QAEjE,EAAE,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACpD,CAAC;QACD,IAAM,MAAM,GAAG,IAAI,eAAM,CAAC,EAAE,OAAO,SAAA,EAAE,MAAM,QAAA,EAAE,CAAC,CAAC;QAC/C,IAAM,QAAQ,GAAG,IAAI,mBAAQ,CAAC,MAAM,CAAC,CAAC;QACtC,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE;YACrB,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QACH,QAAQ,CAAC,cAAc,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;QACvC,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;IAbD,wDAaC","sourcesContent":["import { Registry } from '@dojo/widget-core/Registry';\nimport { Injector } from '@dojo/widget-core/Injector';\nimport { RegistryLabel } from '@dojo/widget-core/interfaces';\n\nimport HashHistory from './history/HashHistory';\nimport { History } from './history/interfaces';\nimport { Router } from './Router';\nimport { RouteConfig } from './interfaces';\n\n/**\n * Key for the router injector\n */\nexport const routerKey = Symbol();\n\n/**\n * Router Injector Options\n *\n */\nexport interface RouterInjectorOptions {\n\thistory?: History;\n\tkey?: RegistryLabel;\n}\n\n/**\n * Creates a router instance for a specific History manager (default is `HashHistory`) and registers\n * the route configuration.\n *\n * @param config The route config to register for the router\n * @param registry An optional registry that defaults to the global registry\n * @param options The router injector options\n */\nexport function registerRouterInjector(config: RouteConfig[], registry: Registry, options: RouterInjectorOptions = {}): Router<any> {\n\tconst { key = routerKey, history = new HashHistory() } = options;\n\n\tif (registry.hasInjector(key)) {\n\t\tthrow new Error('Router has already been defined');\n\t}\n\tconst router = new Router({ history, config });\n\tconst injector = new Injector(router);\n\trouter.on('navstart', () => {\n\t\tinjector.emit({ type: 'invalidate' });\n\t});\n\tregistry.defineInjector(key, injector);\n\treturn router;\n}\n"]}