import { HistoryBase } from './HistoryBase';
import { History, HistoryOptions } from './interfaces';
/**
 * Options for creating StateHistory instances.
 */
export interface StateHistoryOptions extends HistoryOptions {
    /**
     * A base pathname. The current value, as well as the emitted change value, will be relative to this base (though
     * starting with a slash). If not set the DOM window's location's path will be used in its entirety. If the
     * location's path is not a suffix of the base, the value will be a single slash instead.
     *
     * Must not contain fragment identifiers or search components.
     */
    base?: string;
    /**
     * A DOM window object. StateHistory uses the `history` and `location` properties and
     * listens to `popstate` events. The current value is initialized to the current path.
     */
    window: Window;
}
/**
 * A browser-based history manager that uses the history object to store the current value.
 *
 * This manager ensures the current value always starts with a slash.
 */
export declare class StateHistory extends HistoryBase implements History {
    private _base;
    private _current;
    private _browserHistory;
    readonly current: string;
    prefix(path: string): string;
    set(path: string): void;
    replace(path: string): void;
    constructor({base, window}?: StateHistoryOptions);
}
export default StateHistory;
