{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { Evented } from '@dojo/core/Evented';\nimport { EventedOptions, EventedListenerOrArray, EventedListenersMap } from '@dojo/interfaces/bases';\nimport { EventTargettedObject, Handle } from '@dojo/interfaces/core';\n\nexport { BrowserHistory } from './_alias-ambient-history';\n\n/**\n * Event object that is emitted for the 'change' event.\n */\nexport interface HistoryChangeEvent extends EventTargettedObject<History> {\n\t/**\n\t * The new (current) value of the history. This is a path string.\n\t */\n\tvalue: string;\n}\n\nexport interface History extends Evented {\n\t/**\n\t * Get the current value. This is a path string.\n\t *\n\t * Implementations may ensure that the value always starts with a slash.\n\t */\n\treadonly current: string;\n\n\t/**\n\t * Prefixes the value in order to create a path that can be used with a browser.\n\t */\n\tprefix(path: string): string;\n\n\t/**\n\t * Set the current value. If used with a browser implementation causes a new history entry\n\t * to be added. Fires the 'change' event.\n\t */\n\tset(path: string): void;\n\n\t/**\n\t * Replace the current value. If used with a browser implementation causes the current\n\t * history entry to be replaced. Fires the 'change' event.\n\t */\n\treplace(path: string): void;\n\n\t/**\n\t * Function that will normalize the path for the history manager\n\t */\n\tnormalizePath(path: string): string;\n\n\t/**\n\t * Event emitted when the current value is changed, after the browser's history has\n\t * been updated.\n\t */\n\ton(type: 'change', listener: EventedListenerOrArray<History, HistoryChangeEvent>): Handle;\n\ton<T>(type: string, listener: EventedListenerOrArray<T, EventTargettedObject<T>>): Handle;\n\ton<T>(listeners: EventedListenersMap<T>): Handle;\n}\n\nexport interface HistoryOptions extends EventedOptions {}\n"]}