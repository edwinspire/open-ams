import { DNode, HNode, VirtualDomProperties, WidgetProperties, WNode } from '@dojo/widget-core/interfaces';
import { CustomDiff } from './compare';
export declare function assignChildProperties(target: WNode | HNode, index: number | string, properties: WidgetProperties | VirtualDomProperties): WNode | HNode;
export declare function assignChildPropertiesByKey(target: WNode | HNode, key: string | object, properties: WidgetProperties | VirtualDomProperties): WNode | HNode;
export declare function assignProperties(target: HNode, properties: VirtualDomProperties): HNode;
export declare function assignProperties(target: WNode, properties: WidgetProperties): WNode;
export declare function assignProperties(target: WNode | HNode, properties: WidgetProperties | VirtualDomProperties): WNode | HNode;
/**
 * Creates a function which, when placed in an expected render, will call the `callback`.  If the `callback` returns `true`, the value
 * of the property is considered equal, otherwise it is considered not equal and the expected render will fail.
 * @param callback A function that is invoked when comparing the property value
 */
export declare function compareProperty<T>(callback: (value: T, name: string, parent: WidgetProperties | VirtualDomProperties) => boolean): CustomDiff<T>;
/**
 * Finds the child of the target that has the provided key, and replaces it with the provided node.
 *
 * *NOTE:* The replacement modifies the passed `target` and does not return a new instance of the `DNode`.
 * @param target The DNode to replace a child element on
 * @param key The key of the node to replace
 * @param replacement The DNode that replaces the found node
 * @returns {WNode | HNode}
 */
export declare function replaceChildByKey(target: WNode | HNode, key: string | object, replacement: DNode): WNode | HNode;
/**
 * Replace a child of DNode.
 *
 * *NOTE:* The replacement modifies the passed `target` and does not return a new instance of the `DNode`.
 * @param target The DNode to replace a child element on
 * @param index A number of the index of a child, or a string with comma separated indexes that would navigate
 * @param replacement The DNode to be replaced
 */
export declare function replaceChild(target: WNode | HNode, index: number | string, replacement: DNode): WNode | HNode;
/**
 * Find a virtual DOM node (`WNode` or `HNode`) based on it having a matching `key` property.
 *
 * The function returns `undefined` if no node was found, otherwise it returns the node.  *NOTE* it will return the first node
 * matching the supplied `key`, but will `console.warn` if more than one node was found.
 */
export declare function findKey(target: WNode | HNode, key: string | object): WNode | HNode | undefined;
/**
 * Return a `DNode` that is identified by supplied index
 * @param target The target `WNode` or `HNode` to resolve the index for
 * @param index A number or a string indicating the child index
 */
export declare function findIndex(target: WNode | HNode, index: number | string): DNode | undefined;
export declare function replaceChildProperties(target: WNode | HNode, index: number | string, properties: WidgetProperties | VirtualDomProperties): WNode | HNode;
export declare function replaceChildPropertiesByKey(target: WNode | HNode, key: string | object, properties: WidgetProperties | VirtualDomProperties): WNode | HNode;
export declare function replaceProperties(target: HNode, properties: VirtualDomProperties): HNode;
export declare function replaceProperties(target: WNode, properties: WidgetProperties): WNode;
export declare function replaceProperties(target: WNode | HNode, properties: WidgetProperties | VirtualDomProperties): WNode | HNode;
