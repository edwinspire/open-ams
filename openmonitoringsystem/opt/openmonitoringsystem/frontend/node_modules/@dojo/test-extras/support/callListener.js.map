{"version":3,"file":"callListener.js","sourceRoot":"","sources":["callListener.ts"],"names":[],"mappings":";;;;;;;;;;;IACA,yBAAyC;IAiCzC;;;;;OAKG;IACH,sBAAqC,IAAmB,EAAE,MAAc,EAAE,OAAiC;QAAjC,wBAAA,EAAA,YAAiC;QAClG,IAAA,mBAAI,EAAE,qBAAK,EAAE,iBAAG,EAAE,uBAAM,EAAE,yBAAO,CAAa;QACtD,IAAI,cAAmB,CAAC;QACxB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACZ,cAAc,GAAG,MAAM,CAAC;QACzB,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACd,cAAc,GAAG,WAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QACrC,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC;YACvC,IAAM,OAAO,GAAG,aAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACvC,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,IAAI,IAAI,YAAY,IAAI,OAAO,CAAC,CAAC,CAAC;gBAChF,cAAc,GAAG,OAAO,CAAC;YAC1B,CAAC;QACF,CAAC;QACD,IAAI,CAAC,CAAC;YACL,cAAc,GAAG,IAAI,CAAC;QACvB,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACrB,MAAM,IAAI,SAAS,CAAC,uBAAuB,CAAC,CAAC;QAC9C,CAAC;QACD,IAAM,QAAQ,GAA2C,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAC3F,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACf,MAAM,IAAI,SAAS,CAAC,gCAA6B,MAAM,OAAG,CAAC,CAAC;QAC7D,CAAC;QACD,IAAM,IAAI,GAAG,cAAc,CAAC,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC,IAAI,GAAG,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC;QACjH,QAAQ,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,EAAE,IAAI,CAAC,CAAC;IACvC,CAAC;IA3BD,+BA2BC","sourcesContent":["import { HNode, WNode } from '@dojo/widget-core/interfaces';\nimport { findIndex, findKey } from './d';\n\n/**\n * Options that can be passed to `callListener`\n */\nexport interface CallListenerOptions {\n\t/**\n\t * Arguments to be passed to the listener when called\n\t */\n\targs?: any[];\n\n\t/**\n\t * Target a child of the `node` based on the _index_ which can be either a number, or a string of numbers\n\t * deliminated by a comma.\n\t */\n\tindex?: number | string;\n\n\t/**\n\t * Target the node based on a `key`.\n\t */\n\tkey?: string | object;\n\n\t/**\n\t * Supply your own `target`\n\t */\n\ttarget?: HNode | WNode;\n\n\t/**\n\t * The `thisArg` to call a listener with.  It defaults to `properties.bind` of the target or `undefined`.\n\t */\n\tthisArg?: any;\n}\n\n/**\n * Call a listener on a virtual DOM node or one of its children.\n * @param node The node to resolve the listener and call\n * @param method The listener name in the `node.properties` to call\n * @param options Options that effect how the listener is called\n */\nexport default function callListener(node: HNode | WNode, method: string, options: CallListenerOptions = {}): void {\n\tconst { args, index, key, target, thisArg } = options;\n\tlet resolvedTarget: any;\n\tif (target) {\n\t\tresolvedTarget = target;\n\t}\n\telse if (key) {\n\t\tresolvedTarget = findKey(node, key);\n\t}\n\telse if (typeof index !== 'undefined') {\n\t\tconst byIndex = findIndex(node, index);\n\t\tif (typeof byIndex === 'object' && byIndex !== null && 'properties' in byIndex) {\n\t\t\tresolvedTarget = byIndex;\n\t\t}\n\t}\n\telse {\n\t\tresolvedTarget = node;\n\t}\n\tif (!resolvedTarget) {\n\t\tthrow new TypeError(`Cannot resolve target`);\n\t}\n\tconst listener: ((...args: any[]) => void) | undefined = resolvedTarget.properties[method];\n\tif (!listener) {\n\t\tthrow new TypeError(`Cannot resolve listener: \"${method}\"`);\n\t}\n\tconst bind = resolvedTarget.coreProperties ? resolvedTarget.coreProperties.bind : resolvedTarget.properties.bind;\n\tlistener.apply(thisArg || bind, args);\n}\n"]}