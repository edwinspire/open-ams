/*
 * (The MIT License)
 *
 * Copyright (c) 2013 Jake Luer <jake@qualiancy.com> (http://qualiancy.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /*
     * This module is adapated from [assertion-error](https://github.com/chaijs/assertion-error)
     * from JavaScript to TypeScript
     */
    /**
     * Return a function that will copy properties from
     * one object to another excluding any originally
     * listed. Returned function will create a new `{}`.
     *
     * @param excluds excluded properties
     */
    function exclude() {
        var excludes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            excludes[_i] = arguments[_i];
        }
        function excludeProps(res, obj) {
            Object.keys(obj).forEach(function (key) {
                if (!~excludes.indexOf(key)) {
                    res[key] = obj[key];
                }
            });
        }
        return function extendExclude() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var res = {};
            for (var i = 0; i < args.length; i++) {
                excludeProps(res, args[i]);
            }
            return res;
        };
    }
    ;
    /**
     * ### AssertionError
     *
     * An extension of the JavaScript `Error` constructor for
     * assertion and validation scenarios.
     *
     * @param message (optional)
     * @param _props properties to include (optional)
     * @param ssf start stack function (optional)
     */
    function AssertionError(message, _props, ssf) {
        var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON');
        var props = extend(_props || {});
        // default values
        this.message = message || 'Unspecified AssertionError';
        this.showDiff = false;
        // copy from properties
        for (var key in props) {
            this[key] = props[key];
        }
        // capture stack trace
        if (ssf && Error.captureStackTrace) {
            Error.captureStackTrace(this, ssf);
        }
        else {
            try {
                throw new Error();
            }
            catch (e) {
                this.stack = e.stack;
            }
        }
    }
    /*!
     * Inherit from Error.prototype
     */
    AssertionError.prototype = Object.create(Error.prototype);
    /*!
     * Statically set name
     */
    AssertionError.prototype.name = 'AssertionError';
    /*!
     * Ensure correct constructor
     */
    AssertionError.prototype.constructor = AssertionError;
    /**
     * Allow errors to be converted to JSON for static transfer.
     *
     * @param stack include stack (default: `true`)
     */
    AssertionError.prototype.toJSON = function (stack) {
        var extend = exclude('constructor', 'toJSON', 'stack');
        var props = extend({ name: this.name }, this);
        // include stack if exists and not turned off
        if (false !== stack && this.stack) {
            props.stack = this.stack;
        }
        return props;
    };
    /* tslint:disable:variable-name */
    var AssertionErrorConstructor = AssertionError;
    exports.default = AssertionErrorConstructor;
});
//# sourceMappingURL=AssertionError.js.map