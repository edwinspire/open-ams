(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@dojo/core/has", "@dojo/core/lang"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var has_1 = require("@dojo/core/has");
    var lang_1 = require("@dojo/core/lang");
    has_1.add('customevent-constructor', function () {
        try {
            new window.CustomEvent('foo');
            return true;
        }
        catch (e) {
            return false;
        }
    });
    /**
     * Create and dispatch an event to an element
     * @param type The event type to dispatch
     * @param options A map of options to configure the event
     */
    function sendEvent(target, type, options) {
        function dispatchEvent(target, event) {
            var error;
            function catcher(e) {
                e.preventDefault();
                error = e.error;
                return true;
            }
            window.addEventListener('error', catcher);
            target.dispatchEvent(event);
            window.removeEventListener('error', catcher);
            if (error) {
                throw error;
            }
        }
        var _a = options || {}, _b = _a.eventClass, eventClass = _b === void 0 ? 'CustomEvent' : _b, _c = _a.eventInit, eventInit = _c === void 0 ? {} : _c, _d = _a.selector, selector = _d === void 0 ? '' : _d;
        var dispatchTarget;
        if (selector) {
            var selectorTarget = target.querySelector(selector);
            if (selectorTarget) {
                dispatchTarget = selectorTarget;
            }
            else {
                throw new Error("Cannot resolve to an element with selector \"" + selector + "\"");
            }
        }
        else {
            dispatchTarget = target;
        }
        if (dispatchTarget) {
            var event_1;
            lang_1.assign(eventInit, {
                bubbles: 'bubbles' in eventInit ? eventInit.bubbles : true,
                cancelable: 'cancelable' in eventInit ? eventInit.cancelable : true
            });
            var bubbles = eventInit.bubbles, cancelable = eventInit.cancelable, initProps = tslib_1.__rest(eventInit, ["bubbles", "cancelable"]);
            if (has_1.default('customevent-constructor')) {
                var ctorName = eventClass in window ? eventClass : 'CustomEvent';
                event_1 = new window[ctorName](type, eventInit);
            }
            else {
                /* because the arity varies too greatly to be able to properly call all the event types, we will
                * only support CustomEvent for those platforms that don't support event constructors, which is
                * essentially IE11 */
                event_1 = dispatchTarget.ownerDocument.createEvent('CustomEvent');
                event_1.initCustomEvent(type, bubbles, cancelable, {});
            }
            try {
                lang_1.deepAssign(event_1, initProps);
            }
            catch (e) { }
            dispatchEvent(dispatchTarget, event_1);
        }
    }
    exports.default = sendEvent;
});
//# sourceMappingURL=sendEvent.js.map