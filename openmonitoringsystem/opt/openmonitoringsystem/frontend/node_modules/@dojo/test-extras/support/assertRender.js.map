{"version":3,"file":"assertRender.js","sourceRoot":"","sources":["assertRender.ts"],"names":[],"mappings":"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","sourcesContent":["import { assign } from '@dojo/core/lang';\nimport Set from '@dojo/shim/Set';\nimport { isHNode, isWNode } from '@dojo/widget-core/d';\nimport { DNode, HNode, WNode, SupportedClassName } from '@dojo/widget-core/interfaces';\nimport AssertionError from './AssertionError';\nimport { diff, DiffOptions, getComparableObjects, isCustomDiff } from './compare';\nimport { compareProperty } from './d';\n\nconst RENDER_FAIL_MESSAGE = 'Render unexpected';\n\nexport interface AssertRenderOptions extends DiffOptions {\n\t/**\n\t * A replacement type guard for `isHNode`\n\t */\n\tisHNode?(child: DNode): child is HNode;\n\n\t/**\n\t * A replacement type guard for `isWNode`\n\t */\n\tisWNode?(child: DNode): child is WNode;\n}\n\n/**\n * Return a string that provides diagnostic information when comparing DNodes where one should be an array\n * @param actual The actual DNode\n * @param expected The expected DNode\n */\nfunction getArrayPreamble(actual: DNode | DNode[], expected: DNode | DNode[]): string {\n\treturn Array.isArray(actual) ?\n\t\t`Expected \"${getTypeOf(expected)}\" but got an array` :\n\t\t`Expected an array but got \"${getTypeOf(actual)}\"`;\n}\n\n/**\n * An internal function that returns a string that contains an array of child indexes which related to the message\n * @param childIndex The index of the child to add to the message\n * @param message The message, if any to prepend the child to\n */\nfunction getChildMessage(childIndex: number, message: string = '') {\n\tconst lastIndex = message.lastIndexOf(']');\n\tif (lastIndex === -1) {\n\t\treturn `[${childIndex}] ${message}`;\n\t}\n\telse {\n\t\treturn message.slice(0, lastIndex + 1) + `[${childIndex}]` + message.slice(lastIndex + 1);\n\t}\n}\n\n/**\n * Return a string that provides diagnostic information when two DNodes being compared are mismatched\n * @param actual The actual DNode\n * @param expected The expected DNode\n */\nfunction getMismatchPreamble(actual: DNode, expected: DNode): string {\n\treturn `DNode type mismatch, expected \"${getTypeOf(expected)}\" actual \"${getTypeOf(actual)}\"`;\n}\n\n/**\n * Return a string that represents the type of the value, including null as a seperate type.\n * @param value The value to get the type of\n */\nfunction getTypeOf(value: any) {\n\treturn value === null ? 'null' : typeof value;\n}\n\n/**\n * Internal function that throws an AssertionError\n * @param actual actual value\n * @param expected expected value\n * @param prolog a message that provides the specific assertion issue\n * @param message any message to be part of the error\n */\nfunction throwAssertionError(actual: any, expected: any, prolog: string, message?: string): never {\n\tthrow new AssertionError(`${RENDER_FAIL_MESSAGE}: ${prolog}${message ? `: ${message}` : ''}`, {\n\t\tactual,\n\t\texpected,\n\t\tshowDiff: true\n\t}, assertRender);\n}\n\n/**\n * Options used to configure diff to correctly compare `DNode`s\n */\nconst defaultDiffOptions: DiffOptions = {\n\tallowFunctionValues: true,\n\tignoreProperties: [ 'bind' ]\n};\n\n/**\n * A function that asserts Dojo virtual DOM against expected virtual DOM.  When the actual and\n * expected differ, the function will throw an `AssertionError`.  It is expected to be used\n * in conjunction with `w` and `v` from `@dojo/widget-core/d` and would look something like this:\n *\n * @param actual The actual rendered DNode or DNode Array to be asserted\n * @param expected The expected DNode or DNode Array to be asserted against the actual\n * @param options A set of options that effect the behaviour of `assertRender`\n * @param message Any message to be part of an error thrown if actual and expected do not match\n */\nexport default function assertRender(actual: DNode | DNode[], expected: DNode | DNode[], message?: string): void;\nexport default function assertRender(actual: DNode | DNode[], expected: DNode | DNode[], options: AssertRenderOptions, message?: string): void;\nexport default function assertRender(actual: DNode | DNode[], expected: DNode | DNode[], options?: AssertRenderOptions | string, message?: string): void {\n\tif (typeof options === 'string') {\n\t\tmessage = options;\n\t\toptions = undefined;\n\t}\n\tconst { isHNode: localIsHNode = isHNode, isWNode: localIsWNode = isWNode, ...passedDiffOptions } = (options || {}) as AssertRenderOptions;\n\tconst diffOptions: DiffOptions = assign({}, defaultDiffOptions, passedDiffOptions);\n\n\tfunction assertChildren(actual?: DNode[], expected?: DNode[]) {\n\t\tif (actual && expected) {\n\t\t\tif (actual.length !== expected.length) {\n\t\t\t\tthrowAssertionError(actual, expected, `Children's length mismatch`, message);\n\t\t\t}\n\t\t\tactual.forEach((actualChild, index) => {\n\t\t\t\tassertRender(actualChild, expected[index], (options || {}) as AssertRenderOptions, getChildMessage(index, message));\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tif (actual || expected) {\n\t\t\t\tthrowAssertionError(actual, expected, actual ? 'Unxpected children' : 'Expected children', message);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (Array.isArray(actual) && Array.isArray(expected)) {\n\t\tassertChildren(actual, expected);\n\t}\n\telse if (Array.isArray(actual) || Array.isArray(expected)) {\n\t\tthrowAssertionError(actual, expected, getArrayPreamble(actual, expected), message);\n\t}\n\telse if ((localIsHNode(actual) && localIsHNode(expected)) || (localIsWNode(actual) && localIsWNode(expected))) {\n\t\tif (localIsHNode(actual) && localIsHNode(expected)) {\n\t\t\tif (actual.tag !== expected.tag) {\n\t\t\t\t/* The tags do not match */\n\t\t\t\tthrowAssertionError(actual.tag, expected.tag, `Tags do not match`, message);\n\t\t\t}\n\t\t}\n\t\t/* istanbul ignore else: not being tracked by TypeScript properly */\n\t\telse if (localIsWNode(actual) && localIsWNode(expected)) {\n\t\t\tif (actual.widgetConstructor !== expected.widgetConstructor) {\n\t\t\t\t/* The WNode does not share the same constructor */\n\t\t\t\tthrowAssertionError(actual.widgetConstructor, expected.widgetConstructor, `WNodes do not share constructor`, message);\n\t\t\t}\n\t\t}\n\t\t/* Inject a custom comparator for class names */\n\t\tconst expectedClasses: SupportedClassName | SupportedClassName[] = expected.properties && (expected.properties as any).classes;\n\t\tif (expectedClasses && !isCustomDiff(expectedClasses)) {\n\t\t\t(expected.properties as any).classes = compareProperty((value: SupportedClassName | SupportedClassName[]) => {\n\t\t\t\tconst expectedValue = typeof expectedClasses === 'string' ? [ expectedClasses ] : expectedClasses;\n\t\t\t\tvalue = (typeof value === 'string' ? [ value ] : value) || [];\n\t\t\t\tconst expectedSet = new Set(expectedValue.filter(expectedClass => Boolean(expectedClass)));\n\t\t\t\tconst actualSet = new Set(value.filter(actualClass => Boolean(actualClass)));\n\n\t\t\t\tif (expectedSet.size !== actualSet.size) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tlet allMatch = true;\n\t\t\t\tactualSet.forEach(actualClass => {\n\t\t\t\t\tallMatch = allMatch && expectedSet.has(actualClass);\n\t\t\t\t});\n\t\t\t\treturn allMatch;\n\t\t\t}\n);\n\t\t}\n\t\tconst delta = diff(actual.properties, expected.properties, diffOptions);\n\t\tif (delta.length) {\n\t\t\t/* The properties do not match */\n\t\t\tconst { comparableA, comparableB } = getComparableObjects(actual.properties, expected.properties, diffOptions);\n\t\t\tthrowAssertionError(comparableA, comparableB, `Properties do not match`, message);\n\t\t}\n\t\t/* We need to assert the children match */\n\t\tassertChildren(actual.children, expected.children);\n\t}\n\telse if (typeof actual === 'string' && typeof expected === 'string') {\n\t\t/* Both DNodes are strings */\n\t\tif (actual !== expected) {\n\t\t\t/* The strings do not match */\n\t\t\tthrowAssertionError(actual, expected, `Unexpected string values`, message);\n\t\t}\n\t}\n\telse if (isHNode(actual) && typeof expected === 'string') {\n\t\t// when doing an expected render on already rendered nodes, strings are converted to _shell_ HNodes\n\t\t// so we want to compare to those instead\n\t\tif (actual.text !== expected) {\n\t\t\tthrowAssertionError(actual.text, expected, `Expected text differs from rendered text`, message);\n\t\t}\n\t}\n\telse if (!(actual === null && expected === null)) {\n\t\t/* There is a mismatch between the types of DNodes */\n\t\tthrowAssertionError(actual, expected, getMismatchPreamble(actual, expected), message);\n\t}\n}\n"]}