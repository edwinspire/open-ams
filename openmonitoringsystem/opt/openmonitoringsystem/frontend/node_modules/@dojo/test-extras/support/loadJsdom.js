(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@dojo/shim/global", "@dojo/has/has"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var global_1 = require("@dojo/shim/global");
    var has_1 = require("@dojo/has/has");
    /* Create a basic document */
    var doc;
    if (!('document' in global_1.default)) {
        var jsdom = require('jsdom'); /* Only attempt to load JSDOM to avoid using a loader plugin */
        /* create a virtual console and direct it to the global `console` */
        exports.virtualConsole = new jsdom.VirtualConsole();
        exports.virtualConsole.sendTo(console);
        /* Create a new jsdom instance */
        var dom = new jsdom.JSDOM("\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t<head></head>\n\t\t<body></body>\n\t\t<html>\n\t", {
            virtualConsole: exports.virtualConsole,
            runScripts: 'dangerously'
        });
        /* Assign a global window */
        global_1.default.window = dom.window;
        /* Assign a global document */
        doc = global_1.default.document = global_1.default.window.document;
        /* Assign a global DocParser */
        global_1.default.DOMParser = global_1.default.window.DOMParser;
        /* Needed for Pointer Event Polyfill's incorrect Element detection */
        global_1.default.Element = global_1.default.window.Element;
        /* Patch feature detection of CSS Animations */
        Object.defineProperty(window.CSSStyleDeclaration.prototype, 'transition', Object.getOwnPropertyDescriptor(window.CSSStyleDeclaration.prototype, 'webkitTransition'));
        /* Polyfill requestAnimationFrame - this can never be called an *actual* polyfill */
        global_1.default.requestAnimationFrame = function (cb) {
            setImmediate(cb);
            // return something at least!
            return true;
        };
        global_1.default.cancelAnimationFrame = function () { };
        has_1.add('jsdom', true);
    }
    else {
        doc = document;
        /* istanbul ignore else */
        if (!has_1.exists('jsdom')) {
            has_1.add('jsdom', false);
        }
    }
    exports.default = doc;
});
//# sourceMappingURL=loadJsdom.js.map