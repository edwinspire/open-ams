{"version":3,"file":"d.js","sourceRoot":"","sources":["d.ts"],"names":[],"mappings":"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","sourcesContent":["import { assign } from '@dojo/core/lang';\nimport { DNode, HNode, VirtualDomProperties, WidgetProperties, WNode } from '@dojo/widget-core/interfaces';\nimport { isHNode, isWNode } from '@dojo/widget-core/d';\nimport AssertionError from './AssertionError';\nimport { CustomDiff } from './compare';\n\ntype FoundNodeInfo<T extends DNode = DNode> = { found?: T, parent?: WNode | HNode | undefined, index?: number };\n\nfunction  assignChildPropertiesByKeyOrIndex(\n\ttarget: WNode | HNode,\n\tkeyOrIndex: string | number | object,\n\tproperties: WidgetProperties | VirtualDomProperties,\n\tbyKey?: boolean\n) {\n\tconst { found: node } = findByKeyOrIndex(target, keyOrIndex, byKey);\n\n\tif (!node || !(isWNode(node) || isHNode(node))) {\n\t\tconst keyOrIndexString = typeof keyOrIndex === 'object' ? JSON.stringify(keyOrIndex) : keyOrIndex;\n\t\tthrow new TypeError(`${(byKey || typeof keyOrIndex === 'object') ? 'Key' : 'Index'} of \"${keyOrIndexString}\" is not resolving to a valid target`);\n\t}\n\tassignProperties(node, properties);\n\treturn target;\n}\n\nexport function assignChildProperties(target: WNode | HNode, index: number | string, properties: WidgetProperties | VirtualDomProperties): WNode | HNode {\n\treturn assignChildPropertiesByKeyOrIndex(target, index,  properties);\n}\n\nexport function  assignChildPropertiesByKey(target: WNode | HNode,  key: string | object, properties: WidgetProperties | VirtualDomProperties): WNode | HNode {\n\treturn assignChildPropertiesByKeyOrIndex(target, key, properties, true);\n}\n\nexport function assignProperties(target: HNode, properties: VirtualDomProperties): HNode;\nexport function assignProperties(target: WNode, properties: WidgetProperties): WNode;\nexport function assignProperties(target: WNode | HNode, properties: WidgetProperties | VirtualDomProperties): WNode | HNode;\nexport function assignProperties(target: WNode | HNode, properties: WidgetProperties | VirtualDomProperties): WNode | HNode {\n\tassign(target.properties, properties);\n\treturn target;\n}\n\n/**\n * Creates a function which, when placed in an expected render, will call the `callback`.  If the `callback` returns `true`, the value\n * of the property is considered equal, otherwise it is considered not equal and the expected render will fail.\n * @param callback A function that is invoked when comparing the property value\n */\nexport function compareProperty<T>(callback: (value: T, name: string, parent: WidgetProperties | VirtualDomProperties) => boolean): CustomDiff<T> {\n\tfunction differ(value: T, name: string, parent: WidgetProperties | VirtualDomProperties) {\n\t\tif (!callback(value, name, parent)) {\n\t\t\tthrow new AssertionError(`The value of property \"${name}\" is unexpected.`, {}, differ);\n\t\t}\n\t}\n\treturn new CustomDiff(differ);\n}\n\nfunction replaceChildByKeyOrIndex(\n\ttarget: WNode | HNode,\n\tindexOrKey: number | string | object,\n\treplacement: DNode,\n\tbyKey = false\n): WNode | HNode {\n\tif (!target.children) {\n\t\tthrow new TypeError('Target does not have children.');\n\t}\n\n\tconst { parent, index } = findByKeyOrIndex(target, indexOrKey, byKey);\n\n\tif (!parent || typeof index === 'undefined' || !parent.children) {\n\t\tif (byKey || typeof indexOrKey === 'object') {\n\t\t\tthrow new TypeError(`Key of \"${typeof indexOrKey === 'object' ? JSON.stringify(indexOrKey) : indexOrKey}\" is not resolving to a valid target`);\n\t\t}\n\t\telse {\n\t\t\tthrow new TypeError(`Index of \"${indexOrKey}\" is not resolving to a valid target`);\n\t\t}\n\t}\n\telse {\n\t\tparent.children[index] = replacement;\n\t}\n\n\treturn target;\n}\n\n/**\n * Finds the child of the target that has the provided key, and replaces it with the provided node.\n *\n * *NOTE:* The replacement modifies the passed `target` and does not return a new instance of the `DNode`.\n * @param target The DNode to replace a child element on\n * @param key The key of the node to replace\n * @param replacement The DNode that replaces the found node\n * @returns {WNode | HNode}\n */\nexport function replaceChildByKey(target: WNode | HNode, key: string | object, replacement: DNode): WNode | HNode {\n\treturn replaceChildByKeyOrIndex(target, key, replacement, true);\n}\n\n/**\n * Replace a child of DNode.\n *\n * *NOTE:* The replacement modifies the passed `target` and does not return a new instance of the `DNode`.\n * @param target The DNode to replace a child element on\n * @param index A number of the index of a child, or a string with comma separated indexes that would navigate\n * @param replacement The DNode to be replaced\n */\nexport function replaceChild(target: WNode | HNode, index: number | string, replacement: DNode): WNode | HNode {\n\treturn replaceChildByKeyOrIndex(target, index, replacement);\n}\n\nfunction isNode(value: any): value is WNode | HNode {\n\treturn value && typeof value === 'object' && value !== null;\n}\n\nfunction findByKeyOrIndex(target: WNode | HNode, keyOrIndex: string | number | object, byKey = false) {\n\tif (byKey || typeof keyOrIndex === 'object') {\n\t\treturn findByKey(target,  keyOrIndex);\n\t}\n\telse {\n\t\treturn findByIndex(target, keyOrIndex);\n\t}\n}\n\nfunction findByKey(\n\ttarget: WNode | HNode,\n\tkey: string | object | number,\n\tparent?: WNode | HNode,\n\tindex?: number\n): FoundNodeInfo<WNode | HNode> {\n\tif (target.properties.key === key) {\n\t\treturn { parent, found: target, index };\n\t}\n\tif (!target.children) {\n\t\treturn {};\n\t}\n\tlet nodeInfo: FoundNodeInfo<WNode | HNode> | undefined;\n\ttarget.children\n\t\t.forEach((child, index) => {\n\t\t\tif (isNode(child)) {\n\t\t\t\tif (nodeInfo && nodeInfo.found) {\n\t\t\t\t\tif (findByKey(child, key, target, index).found) {\n\t\t\t\t\t\tconsole.warn(`Duplicate key of \"${typeof key === 'object' ? JSON.stringify(key) : key }\" found.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnodeInfo = findByKey(child, key, target, index);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\treturn nodeInfo || {};\n}\n\nfunction  findByIndex(\n\ttarget: WNode | HNode,\n\tindex: number | string\n): FoundNodeInfo {\n\tif (typeof index === 'number') {\n\t\treturn target.children  ? { parent: target, found: target.children[index], index } : {};\n\t}\n\tconst indexes = index.split(',').map(Number);\n\tconst lastIndex = indexes.pop()!;\n\tconst resolvedTarget = indexes.reduce((target: any, idx) => {\n\t\tif (!(isWNode(target) || isHNode(target)) || !target.children) {\n\t\t\treturn target;\n\t\t}\n\t\treturn target.children[idx];\n\t}, target);\n\tif (!(isWNode(resolvedTarget) || isHNode(resolvedTarget)) || !resolvedTarget.children) {\n\t\treturn {};\n\t}\n\treturn { parent: resolvedTarget, found: resolvedTarget.children[lastIndex], index: lastIndex };\n}\n\n/**\n * Find a virtual DOM node (`WNode` or `HNode`) based on it having a matching `key` property.\n *\n * The function returns `undefined` if no node was found, otherwise it returns the node.  *NOTE* it will return the first node\n * matching the supplied `key`, but will `console.warn` if more than one node was found.\n */\nexport function findKey(target: WNode | HNode, key: string | object): WNode | HNode | undefined {\n\tconst { found } = findByKey(target, key);\n\treturn found;\n}\n\n/**\n * Return a `DNode` that is identified by supplied index\n * @param target The target `WNode` or `HNode` to resolve the index for\n * @param index A number or a string indicating the child index\n */\nexport function findIndex(target: WNode | HNode, index: number | string): DNode | undefined {\n\tconst { found } = findByIndex(target, index);\n\treturn found;\n}\n\nfunction replaceChildPropertiesByKeyOrIndex(\n\ttarget: WNode | HNode,\n\tindexOrKey: number | string | object,\n\tproperties: WidgetProperties | VirtualDomProperties,\n\tbyKey = false\n): WNode | HNode {\n\tconst { found } = findByKeyOrIndex(target, indexOrKey, byKey);\n\n\tif (!found || !(isWNode(found) || isHNode(found))) {\n\t\tif (byKey || typeof indexOrKey === 'object') {\n\t\t\tthrow new TypeError(`Key of \"${typeof indexOrKey === 'object' ? JSON.stringify(indexOrKey) : indexOrKey}\" is not resolving to a valid target`);\n\t\t}\n\t\telse {\n\t\t\tthrow new TypeError(`Index of \"${indexOrKey}\" is not resolving to a valid target`);\n\t\t}\n\t}\n\n\treplaceProperties(found,  properties);\n\treturn target;\n}\n\nexport function replaceChildProperties(target: WNode | HNode, index: number | string, properties: WidgetProperties | VirtualDomProperties): WNode | HNode {\n\treturn replaceChildPropertiesByKeyOrIndex(target, index, properties);\n}\n\nexport function  replaceChildPropertiesByKey(target: WNode | HNode, key: string | object, properties: WidgetProperties | VirtualDomProperties): WNode | HNode {\n\treturn replaceChildPropertiesByKeyOrIndex(target, key,  properties, true);\n}\n\nexport function replaceProperties(target: HNode, properties: VirtualDomProperties): HNode;\nexport function replaceProperties(target: WNode, properties: WidgetProperties): WNode;\nexport function replaceProperties(target: WNode | HNode, properties: WidgetProperties | VirtualDomProperties): WNode | HNode;\nexport function replaceProperties(target: WNode | HNode, properties: WidgetProperties | VirtualDomProperties): WNode | HNode {\n\ttarget.properties = properties;\n\treturn target;\n}\n"]}