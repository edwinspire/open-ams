(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./d"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d_1 = require("./d");
    /**
     * Call a listener on a virtual DOM node or one of its children.
     * @param node The node to resolve the listener and call
     * @param method The listener name in the `node.properties` to call
     * @param options Options that effect how the listener is called
     */
    function callListener(node, method, options) {
        if (options === void 0) { options = {}; }
        var args = options.args, index = options.index, key = options.key, target = options.target, thisArg = options.thisArg;
        var resolvedTarget;
        if (target) {
            resolvedTarget = target;
        }
        else if (key) {
            resolvedTarget = d_1.findKey(node, key);
        }
        else if (typeof index !== 'undefined') {
            var byIndex = d_1.findIndex(node, index);
            if (typeof byIndex === 'object' && byIndex !== null && 'properties' in byIndex) {
                resolvedTarget = byIndex;
            }
        }
        else {
            resolvedTarget = node;
        }
        if (!resolvedTarget) {
            throw new TypeError("Cannot resolve target");
        }
        var listener = resolvedTarget.properties[method];
        if (!listener) {
            throw new TypeError("Cannot resolve listener: \"" + method + "\"");
        }
        var bind = resolvedTarget.coreProperties ? resolvedTarget.coreProperties.bind : resolvedTarget.properties.bind;
        listener.apply(thisArg || bind, args);
    }
    exports.default = callListener;
});
//# sourceMappingURL=callListener.js.map