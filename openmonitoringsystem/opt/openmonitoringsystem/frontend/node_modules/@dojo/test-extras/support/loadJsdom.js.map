{"version":3,"file":"loadJsdom.js","sourceRoot":"","sources":["loadJsdom.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,4CAAuC;IACvC,qCAAsD;IAkBtD,6BAA6B;IAC7B,IAAI,GAAa,CAAC;IAElB,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,gBAAM,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,+DAA+D;QAE/F,oEAAoE;QACpE,sBAAc,GAAG,IAAI,KAAK,CAAC,cAAc,EAAoB,CAAC;QAC9D,sBAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAE/B,iCAAiC;QACjC,IAAM,GAAG,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,yFAM3B,EAAE;YACF,cAAc,wBAAA;YACd,UAAU,EAAE,aAAa;SACzB,CAAC,CAAC;QAEH,4BAA4B;QAC5B,gBAAM,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;QAE3B,8BAA8B;QAC9B,GAAG,GAAG,gBAAM,CAAC,QAAQ,GAAG,gBAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;QAE/C,+BAA+B;QAC/B,gBAAM,CAAC,SAAS,GAAG,gBAAM,CAAC,MAAM,CAAC,SAAS,CAAC;QAE3C,qEAAqE;QACrE,gBAAM,CAAC,OAAO,GAAG,gBAAM,CAAC,MAAM,CAAC,OAAO,CAAC;QAEvC,+CAA+C;QAC/C,MAAM,CAAC,cAAc,CACpB,MAAM,CAAC,mBAAmB,CAAC,SAAS,EACpC,YAAY,EACZ,MAAM,CAAC,wBAAwB,CAAQ,MAAO,CAAC,mBAAmB,CAAC,SAAS,EAAE,kBAAkB,CAAC,CACjG,CAAC;QAEF,oFAAoF;QACpF,gBAAM,CAAC,qBAAqB,GAAG,UAAC,EAA0B;YACzD,YAAY,CAAC,EAAE,CAAC,CAAC;YACjB,6BAA6B;YAC7B,MAAM,CAAC,IAAI,CAAC;QACb,CAAC,CAAC;QAEF,gBAAM,CAAC,oBAAoB,GAAG,cAAO,CAAC,CAAC;QAEvC,SAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACvB,CAAC;IACD,IAAI,CAAC,CAAC;QACL,GAAG,GAAG,QAAQ,CAAC;QACf,0BAA0B;QAC1B,EAAE,CAAC,CAAC,CAAC,YAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACtB,SAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACxB,CAAC;IACF,CAAC;IAED,kBAAe,GAAG,CAAC","sourcesContent":["import global from '@dojo/shim/global';\nimport { add as hasAdd, exists } from '@dojo/has/has';\nimport { VirtualConsole } from 'jsdom';\n\n/* In order to have the tests work under Node.js, we need to load JSDom and polyfill\n * requestAnimationFrame */\n\ndeclare global {\n\tinterface Window {\n\t\tCustomEvent: typeof CustomEvent;\n\t\tCSSStyleDeclaration: typeof CSSStyleDeclaration;\n\t}\n}\n\n/**\n * If `jsdom` loads, this is a reference to the virtual console for the global `window` and `document`\n */\nexport let virtualConsole: VirtualConsole | undefined;\n\n/* Create a basic document */\nlet doc: Document;\n\nif (!('document' in global)) {\n\tconst jsdom = require('jsdom'); /* Only attempt to load JSDOM to avoid using a loader plugin */\n\n\t/* create a virtual console and direct it to the global `console` */\n\tvirtualConsole = new jsdom.VirtualConsole() as VirtualConsole;\n\tvirtualConsole.sendTo(console);\n\n\t/* Create a new jsdom instance */\n\tconst dom = new jsdom.JSDOM(`\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t<head></head>\n\t\t<body></body>\n\t\t<html>\n\t`, {\n\t\tvirtualConsole,\n\t\trunScripts: 'dangerously'\n\t});\n\n\t/* Assign a global window */\n\tglobal.window = dom.window;\n\n\t/* Assign a global document */\n\tdoc = global.document = global.window.document;\n\n\t/* Assign a global DocParser */\n\tglobal.DOMParser = global.window.DOMParser;\n\n\t/* Needed for Pointer Event Polyfill's incorrect Element detection */\n\tglobal.Element = global.window.Element;\n\n\t/* Patch feature detection of CSS Animations */\n\tObject.defineProperty(\n\t\twindow.CSSStyleDeclaration.prototype,\n\t\t'transition',\n\t\tObject.getOwnPropertyDescriptor((<any> window).CSSStyleDeclaration.prototype, 'webkitTransition')\n\t);\n\n\t/* Polyfill requestAnimationFrame - this can never be called an *actual* polyfill */\n\tglobal.requestAnimationFrame = (cb: (...args: any[]) => {}) => {\n\t\tsetImmediate(cb);\n\t\t// return something at least!\n\t\treturn true;\n\t};\n\n\tglobal.cancelAnimationFrame = () => {};\n\n\thasAdd('jsdom', true);\n}\nelse {\n\tdoc = document;\n\t/* istanbul ignore else */\n\tif (!exists('jsdom')) {\n\t\thasAdd('jsdom', false);\n\t}\n}\n\nexport default doc;\n"]}