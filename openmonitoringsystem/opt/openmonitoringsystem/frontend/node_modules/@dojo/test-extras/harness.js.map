{"version":3,"file":"harness.js","sourceRoot":"","sources":["harness.ts"],"names":[],"mappings":"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","sourcesContent":["import 'pepjs';\n\nimport Evented from '@dojo/core/Evented';\nimport { createHandle } from '@dojo/core/lang';\nimport { Handle } from '@dojo/interfaces/core';\nimport { assign } from '@dojo/shim/object';\nimport WeakMap from '@dojo/shim/WeakMap';\nimport {\n\tConstructor,\n\tDNode,\n\tHNode,\n\tWidgetMetaBase,\n\tWidgetMetaConstructor,\n\tWidgetProperties,\n\tWNode\n} from '@dojo/widget-core/interfaces';\nimport { decorate, isHNode, isWNode, v, w } from '@dojo/widget-core/d';\nimport WidgetBase from '@dojo/widget-core/WidgetBase';\nimport { afterRender } from '@dojo/widget-core/decorators/afterRender';\nimport { ProjectorMixin } from '@dojo/widget-core/mixins/Projector';\nimport assertRender from './support/assertRender';\nimport callListener, { CallListenerOptions } from './support/callListener';\nimport sendEvent, { SendEventOptions } from './support/sendEvent';\n\n/* tslint:disable:variable-name */\n\nconst ROOT_CUSTOM_ELEMENT_NAME = 'test--harness';\nconst WIDGET_STUB_CUSTOM_ELEMENT = 'test--widget-stub';\nconst WIDGET_STUB_NAME_PROPERTY = 'data--widget-name';\n\nlet harnessId = 0;\n\n/**\n * An internal function which finds a DNode base on a `key`\n * @param target the root DNode to search\n * @param key the key to match\n */\nfunction findDNodeByKey(target: DNode, key: string | object): HNode | WNode | undefined {\n\tif (target && typeof target === 'object') {\n\t\tif (target && typeof target === 'object' && target.properties && target.properties.key === key) {\n\t\t\treturn target;\n\t\t}\n\t\tlet found: HNode | WNode | undefined;\n\t\tif (target.children) {\n\t\t\ttarget.children\n\t\t\t\t.forEach((child) => {\n\t\t\t\t\tif (found) {\n\t\t\t\t\t\tif (findDNodeByKey(child, key)) {\n\t\t\t\t\t\t\tconsole.warn(`Duplicate key of \"${key}\" found.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tfound = findDNodeByKey(child, key);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t\treturn found;\n\t}\n}\n\n/**\n * Decorate a `DNode` where any `WNode`s are replaced with stubbed widgets\n * @param target The `DNode` to decorate with stubbed widgets\n */\nfunction stubRender(target: DNode): DNode {\n\tdecorate(\n\t\ttarget,\n\t\t(dNode: WNode) => {\n\t\t\tconst { widgetConstructor, properties } = dNode;\n\t\t\tdNode.widgetConstructor = StubWidget;\n\t\t\t(properties as StubWidgetProperties)._stubTag = WIDGET_STUB_CUSTOM_ELEMENT;\n\t\t\t(properties as StubWidgetProperties)._widgetName = typeof widgetConstructor === 'string'\n\t\t\t\t? widgetConstructor\n\t\t\t\t: (widgetConstructor as any).name || '<Anonymous>';\n\t\t},\n\t\t(dNode) => isWNode(dNode)\n\t);\n\treturn target;\n}\n\ninterface StubWidgetProperties extends WidgetProperties {\n\t_stubTag: string;\n\t_widgetName: string;\n}\n\nclass StubWidget extends WidgetBase<StubWidgetProperties> {\n\trender(): DNode {\n\t\tconst { _stubTag: tag, _widgetName: widgetName } = this.properties;\n\t\treturn v(tag, { [WIDGET_STUB_NAME_PROPERTY]: widgetName }, this.children);\n\t}\n}\n\ninterface SpyWidgetMixin {\n\tmeta<T extends WidgetMetaBase>(provider: WidgetMetaConstructor<T>): T;\n\tspyRender(result: DNode): DNode;\n}\n\ninterface SpyTarget {\n\tactualRender(actual: DNode): void;\n\tdecorateMeta<T extends WidgetMetaBase>(provider: T): T;\n}\n\n/**\n * A mixin that adds a spy to a widget\n * @param base The base class to add the render spy to\n * @param target An object with a property named `lastRender` which will be set to the result of the `render()` method\n */\nfunction SpyWidgetMixin<T extends Constructor<WidgetBase<WidgetProperties>>>(base: T, target: SpyTarget): T & Constructor<SpyWidgetMixin> {\n\n\tclass SpyRender extends base {\n\t\t@afterRender()\n\t\tspyRender(result: DNode): DNode {\n\t\t\ttarget.actualRender(result);\n\t\t\treturn stubRender(result);\n\t\t}\n\n\t\tmeta<U extends WidgetMetaBase>(provider: WidgetMetaConstructor<U>): U {\n\t\t\treturn target.decorateMeta(super.meta(provider));\n\t\t}\n\t}\n\n\treturn SpyRender;\n}\n\ninterface MetaData {\n\thandle: Handle;\n\tmocks: Partial<WidgetMetaBase>;\n}\n\n/**\n * A private class that is used to actually render the widget and keep track of the last render by\n * the harnessed widget.\n */\nclass WidgetHarness<W extends WidgetBase> extends WidgetBase {\n\tprivate _id = ROOT_CUSTOM_ELEMENT_NAME + '-' + (++harnessId);\n\tprivate _metaData: WeakMap<Constructor<WidgetMetaBase>, MetaData>;\n\tprivate _widgetConstructor: Constructor<W>;\n\n\t/**\n\t * A string that will be added to the AssertionError that is thrown if actual render does not match\n\t * expected render\n\t */\n\tpublic assertionMessage: string | undefined;\n\n\tpublic didRender = false;\n\n\t/**\n\t * What `DNode` that is expected on the next render\n\t */\n\tpublic expectedRender: DNode | DNode[] | undefined;\n\n\t/**\n\t * A reference to the previous render\n\t */\n\tpublic lastRender: DNode | undefined;\n\tpublic renderCount = 0;\n\n\tconstructor(widgetConstructor: Constructor<W>, metaData: WeakMap<Constructor<WidgetMetaBase>, MetaData>) {\n\t\tsuper();\n\t\tthis._widgetConstructor = SpyWidgetMixin(widgetConstructor, this);\n\t\tthis._metaData = metaData;\n\t}\n\n\t/**\n\t * Called by a harnessed widget's render spy, allowing potential assertion of the render\n\t * @param actual The render, just after `afterRender`\n\t */\n\tpublic actualRender(actual: DNode) {\n\t\tthis.lastRender = actual;\n\t\tthis.didRender = true;\n\t\tthis.renderCount++;\n\t\tconst { assertionMessage: message, expectedRender: expected } = this;\n\t\tif (expected) {\n\t\t\tthis.expectedRender = undefined;\n\t\t\tthis.assertionMessage = undefined;\n\t\t\tassertRender(actual, expected, message);\n\t\t}\n\t}\n\n\t/**\n\t * _Mixin_ the methods that are provided as part of the mock.\n\t * @param provider The instance of the meta provider associated with the harnessed widget\n\t */\n\tpublic decorateMeta<T extends WidgetMetaBase>(provider: T): T {\n\t\tconst data = this._metaData.get(provider.constructor as WidgetMetaConstructor<T>);\n\t\treturn data ? assign(provider, data.mocks) : provider;\n\t}\n\n\tpublic invalidate(): void {\n\t\tsuper.invalidate();\n\t}\n\n\t/**\n\t * Wrap the widget in a custom element\n\t */\n\tpublic render(): DNode {\n\t\tconst { _id: id, _widgetConstructor, children, properties } = this;\n\t\treturn v(\n\t\t\t\tROOT_CUSTOM_ELEMENT_NAME,\n\t\t\t\t{ id },\n\t\t\t\t[ w(_widgetConstructor, properties, children) ]\n\t\t\t);\n\t}\n}\n\nexport interface HarnessSendEventOptions<I extends EventInit> extends SendEventOptions<I> {\n\t/**\n\t * Find the target node by `key`\n\t */\n\tkey?: any;\n\n\t/**\n\t * Provide an alternative target instead of the root DOM node\n\t */\n\ttarget?: Element;\n}\n\n/**\n * Provides a run time context for methods of a meta mock.\n */\nexport type MetaMockContext<T extends WidgetMetaBase = WidgetMetaBase> = T & {\n\t/**\n\t * Retrieve a reference to a node that is rendered in the DOM based on its key\n\t */\n\tgetNode(key: string | number): HTMLElement | undefined;\n\n\t/**\n\t * Invalidate the widget.\n\t */\n\tinvalidate(): void;\n};\n\ntype ProjectorWidgetHarness<W extends WidgetBase<WidgetProperties>> = ProjectorMixin<W['properties']> & WidgetHarness<W>;\n\nconst ProjectorWidgetHarness = ProjectorMixin(WidgetHarness);\n\n/**\n * Harness a widget constructor, providing an API to interact with the widget for testing purposes.\n */\nexport class Harness<W extends WidgetBase<WidgetProperties>> extends Evented {\n\tprivate _children: W['children'] | undefined;\n\tprivate _metaMap = new WeakMap<Constructor<WidgetMetaBase>, MetaData>();\n\tprivate _projectorHandle: Handle | undefined;\n\tprivate _properties: W['properties'] | undefined;\n\tprivate _root: HTMLElement | undefined;\n\tprivate _scheduleRender: () => void;\n\tprivate _widgetHarness: ProjectorWidgetHarness<W>;\n\n\tprivate _invalidate() {\n\t\tif (this._properties) {\n\t\t\tthis._widgetHarness.setProperties(this._properties as any);\n\t\t\tthis._properties = undefined;\n\t\t}\n\t\tif (this._children) {\n\t\t\tthis._widgetHarness.setChildren(this._children);\n\t\t\tthis._children = undefined;\n\t\t}\n\t\tif (!this._projectorHandle) {\n\t\t\tthis._widgetHarness.async = false;\n\t\t\tthis._projectorHandle = this._widgetHarness.append(this._root);\n\t\t}\n\t\tthis._scheduleRender();\n\t}\n\n\tconstructor(widgetConstructor: Constructor<W>, root?: HTMLElement) {\n\t\tsuper({});\n\n\t\tconst widgetHarness = this._widgetHarness = new ProjectorWidgetHarness(widgetConstructor, this._metaMap);\n\t\t// we want to control when the render gets scheduled, so we will hijack the projects one\n\t\tthis._scheduleRender = widgetHarness.scheduleRender.bind(widgetHarness);\n\t\twidgetHarness.scheduleRender = () => {};\n\t\tthis.own(widgetHarness);\n\t\tthis._root = root;\n\t}\n\n\t/**\n\t * Provides a reference to a function that can be used when creating an expected render value\n\t */\n\tpublic listener = () => true;\n\n\t/**\n\t * Call a listener on a target node of the virtual DOM.\n\t * @param method The method to call on the target node\n\t * @param options A map of options that effect the behavior of `callListener`\n\t */\n\tpublic callListener(method: string, options?: CallListenerOptions): void {\n\t\tconst render = this.getRender();\n\t\tif (typeof render !== 'object' || render === null) {\n\t\t\tthrow new TypeError('Widget is not rendering an HNode or WNode');\n\t\t}\n\t\tcallListener(render, method, options);\n\t}\n\n\t/**\n\t * Assert an expected virtual DOM (`DNode`) against what is actually being rendered.  Will throw if the expected does\n\t * not match the actual.\n\t * @param expected The expected render (`DNode`)\n\t * @param message Any message to be part of an error that gets thrown if the actual and expected do not match\n\t */\n\tpublic expectRender(expected: DNode | DNode[], message?: string): this {\n\t\tthis._widgetHarness.expectedRender = expected;\n\t\tthis._widgetHarness.assertionMessage = message;\n\t\tthis._widgetHarness.didRender = false;\n\t\tthis._invalidate();\n\t\tif (!this._widgetHarness.didRender) {\n\t\t\tthrow new Error('An expected render did not occur.');\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the root element of the harnessed widget.  This will refresh the render.\n\t */\n\tpublic getDom(): HTMLElement {\n\t\tif (!this._projectorHandle) {\n\t\t\tthis._invalidate();\n\t\t}\n\t\tif (!(this._widgetHarness.lastRender) || !(this._widgetHarness.lastRender as any).domNode) {\n\t\t\tthrow new Error('No root node has been rendered');\n\t\t}\n\t\treturn (this._widgetHarness.lastRender as any).domNode as HTMLElement;\n\t}\n\n\t/**\n\t * Provide a mock for a meta provider that will be used instead of source provider\n\t * @param provider The meta provider to mock\n\t * @param mocks A set of methods/properties to mock on the provider\n\t */\n\tpublic mockMeta<T extends WidgetMetaBase>(provider: Constructor<T>, mocks: Partial<T>): Handle {\n\t\tconst { _metaMap } = this;\n\t\tif (!_metaMap.has(provider)) {\n\t\t\t_metaMap.set(provider, {\n\t\t\t\thandle: createHandle(() => {\n\t\t\t\t\t_metaMap.delete(provider);\n\t\t\t\t}),\n\t\t\t\t// TODO: no need to coerce in 2.5.2\n\t\t\t\tmocks: mocks as any\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\t// TODO: no need to coerce in 2.5.2\n\t\t\t_metaMap.get(provider)!.mocks = mocks as any;\n\t\t}\n\t\treturn _metaMap.get(provider)!.handle;\n\t}\n\n\t/**\n\t * Refresh the render and return the last render's root `DNode`.\n\t */\n\tpublic getRender(): DNode {\n\t\tthis._invalidate();\n\t\treturn this._widgetHarness.lastRender;\n\t}\n\n\t/**\n\t * Dispatch an event to the root DOM element of the rendered harnessed widget.  You can use the options to change the\n\t * event class, provide additional event properties, or select a different `target`.\n\t *\n\t * By default, the event class is `CustomEvent` and `bubbles` and `cancelable` are both `true` on events dispatched by\n\t * the harness.\n\t * @param type The type of event (e.g. `click` or `mousedown`)\n\t * @param options Options which can modify the event sent, like using a different EventClass or selecting a different\n\t *                        node to target, or provide the event initialisation properties\n\t */\n\tpublic sendEvent<I extends EventInit>(type: string, options: HarnessSendEventOptions<I> = {}): this {\n\t\tlet { target = this.getDom(), key, ...sendOptions } = options;\n\t\tif (key) {\n\t\t\tconst dnode = findDNodeByKey(this._widgetHarness.lastRender, key);\n\t\t\tif (isHNode(dnode)) {\n\t\t\t\ttarget = (dnode as any).domNode as Element;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error(`Could not find key of \"${key}\" to sendEvent`);\n\t\t\t}\n\t\t}\n\t\tsendEvent(target, type, sendOptions);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the children that will be used when rendering the harnessed widget\n\t * @param children The children to be set on the harnessed widget\n\t */\n\tpublic setChildren(children: W['children']): this {\n\t\tthis._children = children;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the properties that will be passed to the harnessed widget on the next render\n\t * @param properties The properties to set\n\t */\n\tpublic setProperties(properties: W['properties']): this {\n\t\tthis._properties = properties;\n\t\treturn this;\n\t}\n}\n\n/**\n * Harness a widget class for testing purposes, returning an API to interact with the harness widget class.\n * @param widgetConstructor The constructor function/class of widget that should be harnessed.\n * @param root The root where the harness should append itself to the DOM.  Defaults to `document.body`\n */\nexport default function harness<W extends WidgetBase<WidgetProperties>>(widgetConstructor: Constructor<W>, root?: HTMLElement): Harness<W> {\n\treturn new Harness(widgetConstructor, root);\n}\n"]}