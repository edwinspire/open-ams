{"version":3,"file":"javaCheck.js","sourceRoot":"","sources":["javaCheck.ts"],"names":[],"mappings":";;AAAQ,IAAA,oCAAI,CAA8B;AAG1C,SAAS,cAAc,CAAC,IAAc;IAC7B,IAAA,cAAG,EAAE,4BAAU,EAAE,oBAAM,CAAU;IACzC,OAAO,GAAG,IAAI,UAAU,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,MAAM,KAAK,OAAO,CAAC,CAAC;AACpE,CAAC;AAED,SAAS,qBAAqB,CAAC,GAAW;IACzC,OAAO,GAAG,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;AACjG,CAAC;AAED,mBAAwB,IAAc;IACrC,OAAO,IAAI,OAAO,CAAU,UAAC,OAAO;QACnC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YAC1B,OAAO,CAAC,IAAI,CAAC,CAAC;SACd;aAAM;YACN,IAAI,CAAC,eAAe,EAAE,UAAC,GAAU,EAAE,MAAc,EAAE,MAAc;gBAChE,IAAI,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,qBAAqB,CAAC,MAAM,CAAC,CAAC,EAAE;oBAC7E,OAAO,CAAC,IAAI,CAAC,CAAC;iBACd;qBAAM;oBACN,qFAAqF;oBACrF,2EAA2E;oBAC3E,IAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;oBACvF,IAAI,QAAQ,EAAE;wBACb,IAAI,CAAC,OAAI,QAAQ,yBAAqB,EAAE,UAAC,GAAU,EAAE,MAAc,EAAE,MAAc;4BAClF,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBACnF,CAAC,CAAC,CAAC;qBACH;yBAAM;wBACN,OAAO,CAAC,KAAK,CAAC,CAAC;qBACf;iBACD;YACF,CAAC,CAAC,CAAC;SACH;IACF,CAAC,CAAC,CAAC;AACJ,CAAC;AAvBD,4BAuBC","sourcesContent":["const { exec } = require('child_process');\nimport { TestArgs } from './main';\n\nfunction requiresTunnel(args: TestArgs) {\n\tconst { all, functional, config } = args;\n\treturn all || functional || (config != null && config !== 'local');\n}\n\nfunction containsVersionString(str: string): boolean {\n\treturn str != null && (str.indexOf('java version') >= 0 || str.indexOf('openjdk version') >= 0);\n}\n\nexport default function(args: TestArgs) {\n\treturn new Promise<boolean>((resolve) => {\n\t\tif (!requiresTunnel(args)) {\n\t\t\tresolve(true);\n\t\t} else {\n\t\t\texec('java -version', (err: Error, stdout: string, stderr: string) => {\n\t\t\t\tif (!err && (containsVersionString(stderr) || containsVersionString(stdout))) {\n\t\t\t\t\tresolve(true);\n\t\t\t\t} else {\n\t\t\t\t\t// Dereference the environment variables here so the exec script does not have to use\n\t\t\t\t\t// an operating system specific way to dereference an environment variable.\n\t\t\t\t\tconst javaHome = process.env.JAVA_HOME || process.env.JDK_HOME || process.env.JRE_HOME;\n\t\t\t\t\tif (javaHome) {\n\t\t\t\t\t\texec(`\"${javaHome}/bin/java\" -version`, (err: Error, stdout: string, stderr: string) => {\n\t\t\t\t\t\t\tresolve(!err && (containsVersionString(stderr) || containsVersionString(stdout)));\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n"]}