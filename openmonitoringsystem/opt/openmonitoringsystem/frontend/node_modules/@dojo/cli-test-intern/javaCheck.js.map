{"version":3,"file":"javaCheck.js","sourceRoot":"","sources":["javaCheck.ts"],"names":[],"mappings":";;AAAA,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAG1C,wBAAwB,IAAc;IACrC,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;IACzC,MAAM,CAAC,GAAG,IAAI,UAAU,IAAI,CAAC,MAAM,IAAI,IAAI,IAAI,MAAM,KAAK,OAAO,CAAC,CAAC;AACpE,CAAC;AAED,+BAA+B,GAAW;IACzC,MAAM,CAAC,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACxD,CAAC;AAED,mBAAwB,IAAc;IACrC,MAAM,CAAC,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,EAAE;QACvC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC3B,OAAO,CAAC,IAAI,CAAC,CAAC;QACf,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,CAAC,eAAe,EAAE,CAAC,GAAU,EAAE,MAAc,EAAE,MAAc,EAAE,EAAE;gBACpE,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9E,OAAO,CAAC,IAAI,CAAC,CAAC;gBACf,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACP,qFAAqF;oBACrF,2EAA2E;oBAC3E,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;oBACvF,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACd,IAAI,CAAC,IAAI,QAAQ,qBAAqB,EAAE,CAAC,GAAU,EAAE,MAAc,EAAE,MAAc,EAAE,EAAE;4BACtF,OAAO,CAAC,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBACnF,CAAC,CAAC,CAAC;oBACJ,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACP,OAAO,CAAC,KAAK,CAAC,CAAC;oBAChB,CAAC;gBACF,CAAC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;IACF,CAAC,CAAC,CAAC;AACJ,CAAC;AAvBD,4BAuBC","sourcesContent":["const { exec } = require('child_process');\nimport { TestArgs } from './main';\n\nfunction requiresTunnel(args: TestArgs) {\n\tconst { all, functional, config } = args;\n\treturn all || functional || (config != null && config !== 'local');\n}\n\nfunction containsVersionString(str: string): boolean {\n\treturn str != null && str.indexOf('java version') >= 0;\n}\n\nexport default function(args: TestArgs) {\n\treturn new Promise<boolean>((resolve) => {\n\t\tif (!requiresTunnel(args)) {\n\t\t\tresolve(true);\n\t\t} else {\n\t\t\texec('java -version', (err: Error, stdout: string, stderr: string) => {\n\t\t\t\tif (!err && (containsVersionString(stderr) || containsVersionString(stdout))) {\n\t\t\t\t\tresolve(true);\n\t\t\t\t} else {\n\t\t\t\t\t// Dereference the environment variables here so the exec script does not have to use\n\t\t\t\t\t// an operating system specific way to dereference an environment variable.\n\t\t\t\t\tconst javaHome = process.env.JAVA_HOME || process.env.JDK_HOME || process.env.JRE_HOME;\n\t\t\t\t\tif (javaHome) {\n\t\t\t\t\t\texec(`\"${javaHome}/bin/java\" -version`, (err: Error, stdout: string, stderr: string) => {\n\t\t\t\t\t\t\tresolve(!err && (containsVersionString(stderr) || containsVersionString(stdout)));\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n"]}