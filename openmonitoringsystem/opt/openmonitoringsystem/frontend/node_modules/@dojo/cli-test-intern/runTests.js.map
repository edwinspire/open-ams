{"version":3,"file":"runTests.js","sourceRoot":"","sources":["runTests.ts"],"names":[],"mappings":"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","sourcesContent":["import { blue, green, red, underline } from 'chalk';\nimport * as path from 'path';\nimport dirname, { projectName } from './dirname';\n\nconst cs: any = require('cross-spawn');\nconst pkgDir: any = require('pkg-dir');\nconst packagePath = pkgDir.sync(dirname);\n\nlet logger = console.log;\n\nexport interface TestOptions {\n\tnodeUnit?: boolean;\n\tremoteUnit?: boolean;\n\tremoteFunctional?: boolean;\n\tchildConfig?: string;\n\tinternConfig?: string;\n\treporters?: string;\n\tuserName?: string;\n\tsecret?: string;\n\ttestingKey?: string;\n\tverbose?: boolean;\n\tcoverage?: boolean;\n\tfilter?: string;\n}\n\nexport function parseArguments(testArgs: TestOptions) {\n\tconst {\n\t\tnodeUnit,\n\t\tremoteUnit,\n\t\tremoteFunctional,\n\t\tchildConfig,\n\t\tinternConfig,\n\t\treporters,\n\t\tsecret,\n\t\ttestingKey,\n\t\tuserName,\n\t\tfilter\n\t} = testArgs;\n\n\tconst configArg = childConfig ? `@${childConfig}` : '';\n\tconst args = [\n\t\tinternConfig\n\t\t\t? `config=${path.relative(process.cwd(), internConfig)}`\n\t\t\t: `config=${path.relative(process.cwd(), path.join(packagePath, 'intern', 'intern.json' + configArg))}`\n\t];\n\n\targs.push(`basePath=${process.cwd()}`);\n\n\t// by default, in the intern config, all tests are run. we need to\n\t// disable tests that we dont want to run\n\tif (!remoteUnit && !nodeUnit) {\n\t\targs.push('suites=');\n\t}\n\n\tif (!remoteUnit && !remoteFunctional) {\n\t\targs.push('environments=');\n\t}\n\telse if (!remoteFunctional) {\n\t\targs.push('functionalSuites=');\n\t}\n\n\tif (filter) {\n\t\targs.push('grep=' + filter);\n\t}\n\n\targs.push(...(reporters ? reporters.split(',').map((reporter) => `reporters=${reporter}`) : []));\n\n\tif (userName && testingKey) {\n\t\targs.push(`tunnelOptions={ \"username\": \"${userName}\", \"accessKey\": \"${testingKey}\" }`);\n\t}\n\n\tconst capabilitiesBase = `capabilities={ \"name\": \"${projectName()}\", \"project\": \"${projectName()}\"`;\n\tif (childConfig === 'browserstack') {\n\t\targs.push(capabilitiesBase + ', \"fixSessionCapabilities\": \"false\", \"browserstack.debug\": \"false\" }');\n\t}\n\telse if (childConfig === 'saucelabs') {\n\t\targs.push(capabilitiesBase + ', \"fixSessionCapabilities\": \"false\" }');\n\t}\n\telse {\n\t\targs.push(capabilitiesBase + ' }');\n\t}\n\n\treturn [ ...args ];\n}\n\nexport function setLogger(value: (message: any, ...optionalParams: any[]) => void) {\n\tlogger = value;\n}\n\nexport default async function (testArgs: TestOptions) {\n\tconst testRunPromise = new Promise((resolve, reject) => {\n\n\t\tfunction succeed() {\n\t\t\tlogger('\\n  ' + green('testing') + ' completed successfully');\n\t\t\tresolve();\n\t\t}\n\n\t\tfunction fail(err: string) {\n\t\t\tlogger('\\n  ' + red('testing') + ' failed');\n\t\t\treject({\n\t\t\t\tmessage: err,\n\t\t\t\texitCode: 1\n\t\t\t});\n\t\t}\n\n\t\tlogger('\\n' + underline(`testing \"${projectName()}\"...`) + `\\n`);\n\n\t\tif (testArgs.verbose) {\n\t\t\tlogger(`${blue.bold('  Parsed arguments for intern:')}`);\n\t\t\tlogger('    ' + blue(String(parseArguments(testArgs).join('\\n    '))));\n\t\t}\n\n\t\tcs.spawn(path.resolve('node_modules/.bin/intern'), parseArguments(testArgs), { stdio: 'inherit' })\n\t\t\t.on('close', (exitCode: number) => {\n\t\t\t\tif (exitCode) {\n\t\t\t\t\tfail('Tests did not complete successfully');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsucceed();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on('error', (err: Error) => {\n\t\t\t\tfail(err.message);\n\t\t\t});\n\t});\n\n\treturn testRunPromise;\n}\n"]}