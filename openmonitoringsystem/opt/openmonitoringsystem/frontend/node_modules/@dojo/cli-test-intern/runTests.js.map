{"version":3,"file":"runTests.js","sourceRoot":"","sources":["runTests.ts"],"names":[],"mappings":"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","sourcesContent":["import { blue, green, red, underline } from 'chalk';\nimport * as path from 'path';\nimport dirname, { projectName } from './dirname';\n\nconst cs: any = require('cross-spawn');\nconst pkgDir: any = require('pkg-dir');\nconst packagePath = pkgDir.sync(dirname);\n\nlet logger = console.log;\n\nexport interface TestOptions {\n\tnodeUnit?: boolean;\n\tremoteUnit?: boolean;\n\tremoteFunctional?: boolean;\n\tchildConfig?: string;\n\tinternConfig?: string;\n\treporters?: string;\n\tuserName?: string;\n\tsecret?: string;\n\ttestingKey?: string;\n\tverbose?: boolean;\n\tfilter?: string;\n}\n\nexport function parseArguments(testArgs: TestOptions) {\n\tconst {\n\t\tnodeUnit,\n\t\tremoteUnit,\n\t\tremoteFunctional,\n\t\tchildConfig,\n\t\tinternConfig,\n\t\treporters,\n\t\ttestingKey,\n\t\tuserName,\n\t\tfilter\n\t} = testArgs;\n\n\tconst configArg = childConfig ? `@${childConfig}` : '';\n\tconst configPath = path.relative(process.cwd(), path.join(packagePath, 'intern', internConfig + configArg));\n\tconst args = [`config=${configPath}`];\n\n\t// by default, in the intern config, all tests are run. we need to\n\t// disable tests that we dont want to run\n\tif (!remoteUnit && !nodeUnit) {\n\t\targs.push('suites=');\n\t}\n\n\tif (!remoteUnit && !remoteFunctional) {\n\t\targs.push('environments=');\n\t} else if (!remoteFunctional) {\n\t\targs.push('functionalSuites=');\n\t}\n\n\tif (filter) {\n\t\targs.push('grep=' + filter);\n\t}\n\n\targs.push(...(reporters ? reporters.split(',').map((reporter) => `reporters=${reporter}`) : []));\n\n\tif (userName && testingKey) {\n\t\targs.push(`tunnelOptions={ \"username\": \"${userName}\", \"accessKey\": \"${testingKey}\" }`);\n\t}\n\n\tconst capabilitiesBase = `capabilities={ \"name\": \"${projectName()}\", \"project\": \"${projectName()}\"`;\n\tif (childConfig === 'browserstack') {\n\t\targs.push(capabilitiesBase + ', \"fixSessionCapabilities\": \"false\", \"browserstack.debug\": \"false\" }');\n\t} else if (childConfig === 'saucelabs') {\n\t\targs.push(capabilitiesBase + ', \"fixSessionCapabilities\": \"false\" }');\n\t} else {\n\t\targs.push(capabilitiesBase + ' }');\n\t}\n\n\treturn [...args];\n}\n\nexport function setLogger(value: (message: any, ...optionalParams: any[]) => void) {\n\tlogger = value;\n}\n\nexport default async function(testArgs: TestOptions) {\n\tconst testRunPromise = new Promise((resolve, reject) => {\n\t\tconst internPath = path.resolve('node_modules/.bin/intern');\n\t\tconst internArgs = parseArguments(testArgs);\n\n\t\tfunction succeed() {\n\t\t\tlogger('\\n  ' + green('testing') + ' completed successfully');\n\t\t\tresolve();\n\t\t}\n\n\t\tfunction fail(err: string) {\n\t\t\tlogger('\\n  ' + red('testing') + ' failed');\n\t\t\treject({\n\t\t\t\tmessage: err,\n\t\t\t\texitCode: 1\n\t\t\t});\n\t\t}\n\n\t\tlogger('\\n' + underline(`testing \"${projectName()}\"...`) + `\\n`);\n\n\t\tif (testArgs.verbose) {\n\t\t\tlogger(`${blue.bold('  Intern config:')}`);\n\t\t\tlogger('    ' + blue(String(cs.sync(internPath, ['showConfig', ...internArgs]).stdout)));\n\t\t\tlogger(`${blue.bold('  Parsed arguments for intern:')}`);\n\t\t\tlogger('    ' + blue(String(internArgs.join('\\n    '))));\n\t\t}\n\n\t\tcs\n\t\t\t.spawn(internPath, internArgs, { stdio: 'inherit' })\n\t\t\t.on('close', (exitCode: number) => {\n\t\t\t\tif (exitCode) {\n\t\t\t\t\tfail('Tests did not complete successfully');\n\t\t\t\t} else {\n\t\t\t\t\tsucceed();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on('error', (err: Error) => {\n\t\t\t\tfail(err.message);\n\t\t\t});\n\t});\n\n\treturn testRunPromise;\n}\n"]}