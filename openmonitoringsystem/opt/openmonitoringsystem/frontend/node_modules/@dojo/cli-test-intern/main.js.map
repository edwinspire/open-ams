{"version":3,"file":"main.js","sourceRoot":"","sources":["main.ts"],"names":[],"mappings":"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","sourcesContent":["import { Command, Helper, OptionsHelper } from '@dojo/cli/interfaces';\nimport chalk from 'chalk';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport runTests, { TestOptions } from './runTests';\nimport javaCheck from './javaCheck';\n\nconst pkgDir = require('pkg-dir');\n\nexport interface TestArgs {\n\tall: boolean;\n\tbrowser: boolean;\n\tlegacy: boolean;\n\tconfig?: string;\n\tfunctional: boolean;\n\texternals?: {\n\t\toutputPath?: string;\n\t\tdependencies?: Array<\n\t\t\t| string\n\t\t\t| {\n\t\t\t\t\ttype?: string;\n\t\t\t\t\tfrom: string;\n\t\t\t\t\tto?: string;\n\t\t\t\t\tname?: string;\n\t\t\t\t\tinject?: boolean | string | string[];\n\t\t\t  }\n\t\t>;\n\t};\n\treporters?: string;\n\ttestingKey?: string;\n\tsecret?: string;\n\tuserName?: string;\n\tunit: boolean;\n\tverbose: boolean;\n\tinternConfig: string;\n\tnode: boolean;\n\tfilter: string;\n}\n\nfunction buildNpmDependencies(): any {\n\ttry {\n\t\tconst packagePath = pkgDir.sync(__dirname);\n\t\tconst packageJsonFilePath = path.join(packagePath, 'package.json');\n\t\tconst packageJson = <any>require(packageJsonFilePath);\n\n\t\treturn packageJson.dependencies;\n\t} catch (e) {\n\t\tthrow new Error('Failed reading dependencies from package.json - ' + e.message);\n\t}\n}\n\n/**\n * Compiled unit tests should exist when testing against a built application\n */\nexport function assertCompiledTests(args: TestArgs) {\n\tconst projectRoot = pkgDir.sync(process.cwd());\n\tconst unitsPath = path.join(projectRoot, 'output', 'test', 'unit', 'all.js');\n\tconst funcationalsPath = path.join(projectRoot, 'output', 'test', 'functional', 'all.js');\n\tconst hasUnits = args.unit || args.all ? fs.existsSync(unitsPath) : true;\n\tconst hasFunctionals = args.functional || args.all ? fs.existsSync(funcationalsPath) : true;\n\n\tif (!hasUnits || !hasFunctionals) {\n\t\tthrow new Error(\n\t\t\t`Could not find tests${\n\t\t\t\targs.verbose ? ` in ${path.join(projectRoot, 'output', 'test')}.\\nH` : ', h'\n\t\t\t}ave you built the tests using dojo build?\\n\\nFor @dojo/cli-build-app run: dojo build app --mode unit or dojo build app --mode functional`\n\t\t);\n\t}\n}\n\nfunction transformTestArgs(args: TestArgs): TestOptions {\n\tlet nodeUnit = true;\n\tlet remoteUnit = false;\n\tlet remoteFunctional = false;\n\n\tconst internConfig = args.legacy ? 'legacy.json' : 'intern.json';\n\n\tif (args.config) {\n\t\tassertCompiledTests(args);\n\t}\n\n\tif (args.all) {\n\t\tnodeUnit = remoteUnit = remoteFunctional = true;\n\t}\n\n\tif (args.unit) {\n\t\tremoteUnit = true;\n\t}\n\n\tif (args.functional) {\n\t\tnodeUnit = remoteUnit = false;\n\t\tremoteFunctional = true;\n\t}\n\n\treturn {\n\t\tinternConfig,\n\t\tchildConfig: args.config,\n\t\treporters: args.reporters,\n\t\tuserName: args.userName,\n\t\tsecret: args.secret,\n\t\ttestingKey: args.testingKey,\n\t\tverbose: args.verbose,\n\t\tfilter: args.filter,\n\t\texternals: args.externals,\n\t\tnodeUnit,\n\t\tremoteUnit,\n\t\tremoteFunctional\n\t};\n}\n\nfunction printBrowserLink(options: TestOptions) {\n\tconst browserArgs = [];\n\n\tif (options.filter) {\n\t\tbrowserArgs.push('grep=' + encodeURIComponent(options.filter));\n\t}\n\n\tconsole.log(\n\t\t'\\n If the project directory is hosted on a local server, unit tests can also be run in browser by navigating to ' +\n\t\t\tchalk.underline(\n\t\t\t\t`http://localhost/node_modules/intern/?config=node_modules/@dojo/cli-test-intern/intern/${\n\t\t\t\t\toptions.internConfig\n\t\t\t\t}${options.childConfig ? `@${options.childConfig}` : ''}${\n\t\t\t\t\tbrowserArgs.length ? `&${browserArgs.join('&')}` : ''\n\t\t\t\t}`\n\t\t\t)\n\t);\n}\n\nfunction printGoodbye(options: TestOptions) {\n\tif (options.childConfig) {\n\t\tprintBrowserLink(options);\n\t} else {\n\t\tprintLocalTest();\n\t}\n}\n\nfunction printLocalTest() {\n\tconsole.log(\n\t\t'\\n These tests were run using Dojo JIT compilation. The test suite may also be run against the built application with ' +\n\t\t\tchalk.underline('dojo test -c local')\n\t);\n}\n\nconst command: Command<TestArgs> = {\n\tdescription: 'run unit and/or functional tests for your application',\n\tregister(options: OptionsHelper) {\n\t\toptions('a', {\n\t\t\talias: 'all',\n\t\t\tdescribe:\n\t\t\t\t'Runs unit tests and functional tests. Unit tests are run via node and the local tunnel. Functional tests are run via the local tunnel',\n\t\t\tdefault: false\n\t\t});\n\n\t\toptions('c', {\n\t\t\talias: 'config',\n\t\t\tdescribe: `Specifies what configuration to test with: 'local'(default), 'headless', 'browserstack', 'testingbot', or 'saucelabs'.`,\n\t\t\ttype: 'string'\n\t\t});\n\n\t\toptions('f', {\n\t\t\talias: 'functional',\n\t\t\tdescribe: 'Runs only functional tests. Tests are run via the local tunnel',\n\t\t\tdefault: false\n\t\t});\n\n\t\toptions('k', {\n\t\t\talias: 'testingKey',\n\t\t\tdescribe: 'API key for testingbot or accesskey for saucelabs or browserstack',\n\t\t\ttype: 'string'\n\t\t});\n\n\t\toptions('usr', {\n\t\t\talias: 'userName',\n\t\t\tdescribe: 'User name for testing platform',\n\t\t\ttype: 'string'\n\t\t});\n\n\t\toptions('r', {\n\t\t\talias: 'reporters',\n\t\t\tdescribe:\n\t\t\t\t'Comma seperated list of reporters [default: \"lcov,htmlcoverage,runner\"] [ choices: \"benchmark\", \"cobertura\", \"htmlcoverage\", \"jsoncoverage\", \"junit\", \"lcov\", \"pretty\", \"runner\", \"simple\", \"teamcity\"]',\n\t\t\ttype: 'string'\n\t\t});\n\n\t\toptions('s', {\n\t\t\talias: 'secret',\n\t\t\tdescribe: 'API secret for testingbot',\n\t\t\ttype: 'string'\n\t\t});\n\n\t\toptions('u', {\n\t\t\talias: 'unit',\n\t\t\tdescribe: 'Runs unit tests via node and the local tunnel',\n\t\t\tdefault: false\n\t\t});\n\n\t\toptions('v', {\n\t\t\talias: 'verbose',\n\t\t\tdescribe: 'Produce diagnostic messages to the console.',\n\t\t\tdefault: false\n\t\t});\n\n\t\toptions('n', {\n\t\t\talias: 'node',\n\t\t\tdescribe: 'Run unit tests via node',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true\n\t\t});\n\n\t\toptions('l', {\n\t\t\talias: 'legacy',\n\t\t\tdescribe: 'Include IE11 when running functional tests',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false\n\t\t});\n\n\t\toptions('filter', {\n\t\t\tdescribe: 'Run only tests whose IDs match a regular expression',\n\t\t\ttype: 'string'\n\t\t});\n\t},\n\trun(helper: Helper, args: TestArgs) {\n\t\tfunction unhandledRejection(reason: any) {\n\t\t\tconsole.log('Unhandled Promise Rejection: ');\n\t\t\tconsole.log(reason);\n\t\t}\n\n\t\tprocess.on('unhandledRejection', unhandledRejection);\n\n\t\treturn javaCheck(args).then((javaCheckPassed) => {\n\t\t\tif (javaCheckPassed) {\n\t\t\t\tconst testOptions = transformTestArgs(args);\n\t\t\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t\t\trunTests(testOptions)\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tprocess.removeListener('unhandledRejection', unhandledRejection);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\tprintGoodbye(testOptions);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t(err) => {\n\t\t\t\t\t\t\t\tprintGoodbye(testOptions);\n\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then(resolve, reject);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\tError(\n\t\t\t\t\t\tchalk.underline('Error! Java VM could not be found.') +\n\t\t\t\t\t\t\t'\\nA Java VM needs to be installed and available from the command line to allow the ' +\n\t\t\t\t\t\t\tchalk.underline('dojo test') +\n\t\t\t\t\t\t\t' command to run tests in a browser locally or remotely.'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t},\n\teject() {\n\t\treturn {\n\t\t\tnpm: {\n\t\t\t\tdevDependencies: {\n\t\t\t\t\t...buildNpmDependencies()\n\t\t\t\t}\n\t\t\t},\n\t\t\tcopy: {\n\t\t\t\tpath: path.join(__dirname, 'intern'),\n\t\t\t\tfiles: ['intern.json', 'legacy.json']\n\t\t\t}\n\t\t};\n\t}\n};\nexport default command;\n"]}