{"version":3,"file":"main.js","sourceRoot":"","sources":["main.ts"],"names":[],"mappings":"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","sourcesContent":["import { Command, Helper, OptionsHelper } from '@dojo/cli/interfaces';\nimport { underline } from 'chalk';\nimport * as path from 'path';\nimport * as fs from 'fs';\nimport runTests, { TestOptions } from './runTests';\nimport javaCheck from './javaCheck';\n\nconst pkgDir = require('pkg-dir');\n\nexport interface TestArgs {\n\tall: boolean;\n\tbrowser: boolean;\n\tconfig?: string;\n\tfunctional: boolean;\n\treporters?: string;\n\ttestingKey?: string;\n\tsecret?: string;\n\tuserName?: string;\n\tunit: boolean;\n\tverbose: boolean;\n\tinternConfig: string;\n\tnode: boolean;\n\tfilter: string;\n}\n\nfunction buildNpmDependencies(): any {\n\ttry {\n\t\tconst packagePath = pkgDir.sync(__dirname);\n\t\tconst packageJsonFilePath = path.join(packagePath, 'package.json');\n\t\tconst packageJson = <any>require(packageJsonFilePath);\n\n\t\treturn packageJson.dependencies;\n\t} catch (e) {\n\t\tthrow new Error('Failed reading dependencies from package.json - ' + e.message);\n\t}\n}\n\n/**\n * Compiled unit tests should exist when testing against a built application\n */\nexport function assertCompiledUnitTests(verbose: boolean) {\n\tconst projectRoot = pkgDir.sync(process.cwd());\n\tconst unitsPath = path.join(projectRoot, 'output', 'test', 'unit.js');\n\tconst hasUnits = fs.existsSync(unitsPath);\n\n\tif (!hasUnits) {\n\t\tthrow new Error(\n\t\t\t`Could not find tests${\n\t\t\t\tverbose ? ` in ${unitsPath}.\\nH` : ', h'\n\t\t\t}ave you built the tests using dojo build?\\n\\nFor @dojo/cli-build-app run: dojo build app --mode test`\n\t\t);\n\t}\n}\n\nfunction transformTestArgs(args: TestArgs): TestOptions {\n\tlet nodeUnit = true;\n\tlet remoteUnit = false;\n\tlet remoteFunctional = false;\n\n\tconst internConfig = 'intern.json';\n\n\tif (args.config) {\n\t\tassertCompiledUnitTests(args.verbose);\n\t}\n\n\tif (args.all) {\n\t\tnodeUnit = remoteUnit = remoteFunctional = true;\n\t}\n\n\tif (args.unit) {\n\t\tremoteUnit = true;\n\t}\n\n\tif (args.functional) {\n\t\tnodeUnit = remoteUnit = false;\n\t\tremoteFunctional = true;\n\t}\n\n\treturn {\n\t\tinternConfig,\n\t\tchildConfig: args.config,\n\t\treporters: args.reporters,\n\t\tuserName: args.userName,\n\t\tsecret: args.secret,\n\t\ttestingKey: args.testingKey,\n\t\tverbose: args.verbose,\n\t\tfilter: args.filter,\n\t\tnodeUnit,\n\t\tremoteUnit,\n\t\tremoteFunctional\n\t};\n}\n\nfunction printBrowserLink(options: TestOptions) {\n\tconst browserArgs = [];\n\n\tif (options.filter) {\n\t\tbrowserArgs.push('grep=' + encodeURIComponent(options.filter));\n\t}\n\n\tconsole.log(\n\t\t'\\n If the project directory is hosted on a local server, unit tests can also be run in browser by navigating to ' +\n\t\t\tunderline(\n\t\t\t\t`http://localhost/node_modules/intern/?config=node_modules/@dojo/cli-test-intern/intern/intern.json${\n\t\t\t\t\toptions.childConfig ? `@${options.childConfig}` : ''\n\t\t\t\t}${browserArgs.length ? `&${browserArgs.join('&')}` : ''}`\n\t\t\t)\n\t);\n}\n\nfunction printGoodbye(options: TestOptions) {\n\tif (options.childConfig) {\n\t\tprintBrowserLink(options);\n\t} else {\n\t\tprintLocalTest();\n\t}\n}\n\nfunction printLocalTest() {\n\tconsole.log(\n\t\t'\\n These tests were run using Dojo JIT compilation. The test suite may also be run against the built application with ' +\n\t\t\tunderline('dojo test -c local')\n\t);\n}\n\nconst command: Command<TestArgs> = {\n\tdescription: 'run unit and/or functional tests for your application',\n\tregister(options: OptionsHelper) {\n\t\toptions('a', {\n\t\t\talias: 'all',\n\t\t\tdescribe:\n\t\t\t\t'Runs unit tests and functional tests. Unit tests are run via node and the local tunnel. Functional tests are run via the local tunnel',\n\t\t\tdefault: false\n\t\t});\n\n\t\toptions('c', {\n\t\t\talias: 'config',\n\t\t\tdescribe: `Specifies what configuration to test with: 'local'(default), 'browserstack', 'testingbot', or 'saucelabs'.`,\n\t\t\ttype: 'string'\n\t\t});\n\n\t\toptions('f', {\n\t\t\talias: 'functional',\n\t\t\tdescribe: 'Runs only functional tests. Tests are run via the local tunnel',\n\t\t\tdefault: false\n\t\t});\n\n\t\toptions('k', {\n\t\t\talias: 'testingKey',\n\t\t\tdescribe: 'API key for testingbot or accesskey for saucelabs or browserstack',\n\t\t\ttype: 'string'\n\t\t});\n\n\t\toptions('usr', {\n\t\t\talias: 'userName',\n\t\t\tdescribe: 'User name for testing platform',\n\t\t\ttype: 'string'\n\t\t});\n\n\t\toptions('r', {\n\t\t\talias: 'reporters',\n\t\t\tdescribe: 'Comma separated list of reporters to use, defaults to Console',\n\t\t\ttype: 'string'\n\t\t});\n\n\t\toptions('s', {\n\t\t\talias: 'secret',\n\t\t\tdescribe: 'API secret for testingbot',\n\t\t\ttype: 'string'\n\t\t});\n\n\t\toptions('u', {\n\t\t\talias: 'unit',\n\t\t\tdescribe: 'Runs unit tests via node and the local tunnel',\n\t\t\tdefault: false\n\t\t});\n\n\t\toptions('v', {\n\t\t\talias: 'verbose',\n\t\t\tdescribe: 'Produce diagnostic messages to the console.',\n\t\t\tdefault: false\n\t\t});\n\n\t\toptions('n', {\n\t\t\talias: 'node',\n\t\t\tdescribe: 'Run unit tests via node',\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true\n\t\t});\n\n\t\toptions('filter', {\n\t\t\tdescribe: 'Run only tests whose IDs match a regular expression',\n\t\t\ttype: 'string'\n\t\t});\n\t},\n\trun(helper: Helper, args: TestArgs) {\n\t\tfunction unhandledRejection(reason: any) {\n\t\t\tconsole.log('Unhandled Promise Rejection: ');\n\t\t\tconsole.log(reason);\n\t\t}\n\n\t\tprocess.on('unhandledRejection', unhandledRejection);\n\n\t\treturn javaCheck(args).then((javaCheckPassed) => {\n\t\t\tif (javaCheckPassed) {\n\t\t\t\tconst testOptions = transformTestArgs(args);\n\t\t\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t\t\trunTests(testOptions)\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tprocess.removeListener('unhandledRejection', unhandledRejection);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(\n\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\tprintGoodbye(testOptions);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t(err) => {\n\t\t\t\t\t\t\t\tprintGoodbye(testOptions);\n\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then(resolve, reject);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn Promise.reject(\n\t\t\t\t\tError(\n\t\t\t\t\t\tunderline('Error! Java VM could not be found.') +\n\t\t\t\t\t\t\t'\\nA Java VM needs to be installed and available from the command line to allow the ' +\n\t\t\t\t\t\t\tunderline('dojo test') +\n\t\t\t\t\t\t\t' command to run tests in a browser locally or remotely.'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t},\n\teject() {\n\t\treturn {\n\t\t\tnpm: {\n\t\t\t\tdevDependencies: {\n\t\t\t\t\t...buildNpmDependencies()\n\t\t\t\t}\n\t\t\t},\n\t\t\tcopy: {\n\t\t\t\tpath: __dirname + '/intern',\n\t\t\t\tfiles: ['./intern.json', './intern-next.json']\n\t\t\t}\n\t\t};\n\t}\n};\nexport default command;\n"]}