{"version":3,"file":"loader.js","sourceRoot":"","sources":["loader.ts"],"names":[],"mappings":"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","sourcesContent":["import { statSync, readFileSync, existsSync } from 'fs';\nimport { dirname } from 'path';\nimport { createSourceFile, forEachChild, Node, ScriptTarget, SyntaxKind } from 'typescript';\nimport * as webpack from 'webpack';\nconst DtsCreator = require('typed-css-modules');\nconst { getOptions } = require('loader-utils');\nconst instances = require('ts-loader/dist/instances');\n\ntype DtsResult = {\n\twriteFile(): Promise<void>;\n\tformatted: string;\n};\n\ntype DtsCreatorInstance = {\n\tcreate(filePath: string, initialContents: boolean, clearCache: boolean): Promise<DtsResult>;\n};\n\ntype LoaderArgs = {\n\ttype: string;\n\tinstanceName?: string;\n\tsourceFilesPattern?: RegExp | string;\n};\n\nconst creator: DtsCreatorInstance = new DtsCreator();\n\nconst mTimeMap = new Map<string, Date>();\nconst cssMap = new Map<string, string>();\n\nfunction generateDTSFile(filePath: string, sourceFilesRegex: RegExp): Promise<void> {\n\treturn Promise.resolve().then(() => {\n\t\tif (!sourceFilesRegex.test(filePath)) {\n\t\t\treturn;\n\t\t}\n\t\tconst { mtime } = statSync(filePath);\n\t\tconst lastMTime = mTimeMap.get(filePath);\n\n\t\tif (!lastMTime || mtime > lastMTime) {\n\t\t\tconst newCss = existsSync(filePath) ? readFileSync(filePath, 'utf-8') : '';\n\n\t\t\tconst dtsFilePath = `${filePath}.d.ts`;\n\t\t\tconst definition = existsSync(dtsFilePath) ? readFileSync(dtsFilePath, 'utf-8') : '';\n\n\t\t\tconst css = cssMap.get(filePath) || '';\n\t\t\tmTimeMap.set(filePath, mtime);\n\n\t\t\tif (newCss !== css) {\n\t\t\t\treturn creator.create(filePath, false, true).then((content) => {\n\t\t\t\t\tcssMap.set(filePath, newCss);\n\t\t\t\t\tconst newDefinition = content.formatted;\n\t\t\t\t\tif (newDefinition !== definition) {\n\t\t\t\t\t\treturn content.writeFile();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction getCssImport(node: Node, loaderContext: webpack.loader.LoaderContext): Promise<string> | void {\n\tif (node.kind === SyntaxKind.StringLiteral) {\n\t\tconst importPath = node.getText().replace(/\\'|\\\"/g, '');\n\t\tif (/\\.css$/.test(importPath)) {\n\t\t\tconst parentFileName = node.getSourceFile().fileName;\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tloaderContext.resolve(dirname(parentFileName), importPath, (error, path) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t\tif (!path) {\n\t\t\t\t\t\treject(new Error('Unable to resolve path to css file'));\n\t\t\t\t\t}\n\t\t\t\t\tresolve(path);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n}\n\nfunction traverseNode(\n\tnode: Node,\n\tfilePaths: Promise<string>[],\n\tloaderContext: webpack.loader.LoaderContext\n): Promise<string>[] {\n\tswitch (node.kind) {\n\t\tcase SyntaxKind.SourceFile:\n\t\t\tforEachChild(node, (childNode: Node) => {\n\t\t\t\ttraverseNode(childNode, filePaths, loaderContext);\n\t\t\t});\n\t\t\tbreak;\n\t\tcase SyntaxKind.ImportDeclaration:\n\t\t\tforEachChild(node, (childNode: Node) => {\n\t\t\t\tconst path = getCssImport(childNode, loaderContext);\n\t\t\t\tpath && filePaths.push(path);\n\t\t\t});\n\t\t\tbreak;\n\t}\n\treturn filePaths;\n}\n\nexport default function(this: webpack.loader.LoaderContext, content: string, sourceMap?: string) {\n\tconst callback = this.async() as Function;\n\tconst { type = 'ts', instanceName, sourceFilesPattern = /src[\\\\\\/]/ }: LoaderArgs = getOptions(this);\n\tconst sourceFilesRegex =\n\t\ttypeof sourceFilesPattern === 'string' ? new RegExp(sourceFilesPattern) : sourceFilesPattern;\n\n\tPromise.resolve()\n\t\t.then(() => {\n\t\t\tlet generationPromises: Promise<void>[] = [];\n\t\t\tswitch (type) {\n\t\t\t\tcase 'css':\n\t\t\t\t\tgenerationPromises.push(generateDTSFile(this.resourcePath, sourceFilesRegex));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'ts':\n\t\t\t\t\tconst sourceFile = createSourceFile(this.resourcePath, content, ScriptTarget.Latest, true);\n\t\t\t\t\tconst cssFilePathPromises = traverseNode(sourceFile, [], this);\n\n\t\t\t\t\tif (cssFilePathPromises.length) {\n\t\t\t\t\t\tif (instanceName) {\n\t\t\t\t\t\t\tconst instanceWrapper = instances.getTypeScriptInstance({ instance: instanceName });\n\n\t\t\t\t\t\t\tif (instanceWrapper.instance) {\n\t\t\t\t\t\t\t\tinstanceWrapper.instance.files[this.resourcePath] = undefined;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgenerationPromises = cssFilePathPromises.map((cssFilePathPromise) =>\n\t\t\t\t\t\t\tcssFilePathPromise.then((cssFilePath) => generateDTSFile(cssFilePath, sourceFilesRegex))\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn Promise.all(generationPromises);\n\t\t})\n\t\t.then(() => callback(null, content, sourceMap), (error) => callback(error));\n}\n"]}