"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:interface-name */
const lang_1 = require("@dojo/core/lang");
const path_1 = require("path");
const webpack_1 = require("webpack");
const InjectedModuleDependency_1 = require("./dependencies/InjectedModuleDependency");
const basePath = process.cwd();
/**
 * @private
 * Create a regular expression from a string that can match a file path regardless of the path separator.
 *
 * @param path A file path
 *
 * @return A regular expression that matches a file path pattern
 */
function createFilePathRegExp(path) {
    const pattern = path.replace(/(\/|\\)/g, '(\\\\|/)').replace(/\./g, '\\.');
    return new RegExp(pattern);
}
/**
 * A custom Webpack plugin that injects into the specified entry point a module responsible to setting the locale
 * and registering CLDR data.
 */
class I18nPlugin {
    constructor({ cldrPaths, defaultLocale, supportedLocales, target = 'src/main.ts' }) {
        this.cldrPaths = cldrPaths;
        this.defaultLocale = defaultLocale;
        this.supportedLocales = supportedLocales;
        this.target = createFilePathRegExp(target);
    }
    /**
     * Inject a module that sets the locale and CLDR data for the bundled application or custom element.
     *
     * @param compiler The Webpack compiler
     */
    apply(compiler) {
        const { defaultLocale, supportedLocales = [] } = this;
        compiler.apply(new webpack_1.DefinePlugin({
            __defaultLocale__: `'${defaultLocale}'`,
            __supportedLocales__: JSON.stringify(supportedLocales),
            __cldrData__: JSON.stringify(this._loadCldrData())
        }));
        compiler.plugin('compilation', (compilation, params) => {
            compilation.dependencyFactories.set(InjectedModuleDependency_1.default, params.normalModuleFactory);
            compilation.dependencyTemplates.set(InjectedModuleDependency_1.default, new InjectedModuleDependency_1.default.Template());
            compilation.plugin('succeed-module', (module) => {
                if (this.target.test(module.resource)) {
                    const dep = new InjectedModuleDependency_1.default(path_1.join(__dirname, './templates/setLocaleData.js'));
                    module.addDependency(dep);
                }
            });
        });
    }
    /**
     * @private
     * Load CLDR data from the provided mids and merge the data into a single object.
     *
     * @return The CLDR data object
     */
    _loadCldrData() {
        if (!Array.isArray(this.cldrPaths) || !this.cldrPaths.length) {
            return {};
        }
        const { defaultLocale, supportedLocales = [] } = this;
        const locales = [defaultLocale, ...supportedLocales];
        return this.cldrPaths
            .map((url) => {
            if (url.charAt(0) === '.') {
                url = path_1.join(basePath, url);
            }
            return locales.map((locale) => url.replace('{locale}', locale));
        })
            .reduce((left, right) => left.concat(right), [])
            .map((mid) => require(mid))
            .reduce((cldrData, source) => lang_1.deepAssign(cldrData, source), Object.create(null));
    }
}
exports.default = I18nPlugin;
//# sourceMappingURL=I18nPlugin.js.map