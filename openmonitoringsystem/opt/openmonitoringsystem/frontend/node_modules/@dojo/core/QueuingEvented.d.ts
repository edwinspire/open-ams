import Evented, { EventObject } from './Evented';
/**
 * An implementation of the Evented class that queues up events when no listeners are
 * listening. When a listener is subscribed, the queue will be published to the listener.
 * When the queue is full, the oldest events will be discarded to make room for the newest ones.
 *
 * @property maxEvents  The number of events to queue before old events are discarded. If zero (default), an unlimited number of events is queued.
 */
export default class QueuingEvented extends Evented {
    private _queue;
    private _originalOn;
    maxEvents: number;
    constructor();
    emit<E extends EventObject>(event: E): void;
}
