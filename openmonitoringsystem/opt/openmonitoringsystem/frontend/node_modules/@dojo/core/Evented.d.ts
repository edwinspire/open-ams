import { EventedListenerOrArray, EventedListenersMap } from '@dojo/interfaces/bases';
import { EventTargettedObject, EventErrorObject, Handle } from '@dojo/interfaces/core';
import Map from '@dojo/shim/Map';
import { Destroyable } from './Destroyable';
/**
 * The base event object, which provides a `type` property
 */
export interface EventObject {
    /**
     * The type of the event
     */
    readonly type: string | symbol;
}
export interface EventedCallback<E extends EventObject> {
    /**
     * A callback that takes an `event` argument
     *
     * @param event The event object
     */
    (event: E): boolean | void;
}
/**
 * Interface for Evented constructor options
 */
export interface EventedOptions {
    /**
     * Optional listeners to add
     */
    listeners?: EventedListenersMap<any>;
}
export interface BaseEventedEvents {
    /**
     * Regsister a callback for a specific event type
     *
     * @param listeners map of listeners
     */
    (listeners: EventedListenersMap<Evented>): Handle;
    /**
     * @param type the type of the event
     * @param listener the listener to attach
     */
    (type: string | symbol, listener: EventedListenerOrArray<Evented, EventTargettedObject<Evented>>): Handle;
    /**
     * @param type the type for `error`
     * @param listener the listener to attach
     */
    (type: 'error', listener: EventedListenerOrArray<Evented, EventErrorObject<Evented>>): Handle;
}
export interface Evented {
    on: BaseEventedEvents;
}
/**
 * Determines is the event type glob has been matched
 *
 * @returns boolean that indicates if the glob is matched
 */
export declare function isGlobMatch(globString: string | symbol, targetString: string | symbol): boolean;
/**
 * Event Class
 */
export declare class Evented extends Destroyable implements Evented {
    /**
     * map of listeners keyed by event type
     */
    protected listenersMap: Map<string, EventedCallback<EventObject>>;
    /**
     * @constructor
     * @param options The constructor argurments
     */
    constructor(options?: EventedOptions);
    /**
     * Emits the event objet for the specified type
     *
     * @param event the event to emit
     */
    emit<E extends EventObject>(event: E): void;
    /**
     * Catch all handler for various call signatures. The signatures are defined in
     * `BaseEventedEvents`.  You can add your own event type -> handler types by extending
     * `BaseEventedEvents`.  See example for details.
     *
     * @param args
     *
     * @example
     *
     * interface WidgetBaseEvents extends BaseEventedEvents {
     *     (type: 'properties:changed', handler: PropertiesChangedHandler): Handle;
     * }
     * class WidgetBase extends Evented {
     *    on: WidgetBaseEvents;
     * }
     *
     * @return {any}
     */
    on: BaseEventedEvents;
}
export default Evented;
