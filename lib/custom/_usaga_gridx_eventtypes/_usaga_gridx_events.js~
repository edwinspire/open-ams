define(['dojo/_base/declare',
'dijit/_Widget',
'dijit/_Templated',
'dojo/text!_usaga_gridx_events/_usaga_gridx_events.html',
"dojo/request",
"jspire/request/Xml",
"jspire/Gridx",
'dijit/form/CheckBox',
'dojo/data/ItemFileReadStore',
'gridx/Grid',
'gridx/core/model/cache/Async',
'gridx/modules/Focus',
'gridx/modules/VirtualVScroller', 
'gridx/modules/Edit', 
'gridx/modules/CellWidget', 
'gridx/modules/RowHeader', 
'gridx/modules/select/Row', 
'gridx/modules/extendedSelect/Row', 
'gridx/modules/IndirectSelect',
'gridx/modules/pagination/Pagination',
'gridx/modules/pagination/PaginationBar'
],function(declare,_Widget,_Templated,templateString, R, RXml, jsGridx, CBox){

 return declare([ _Widget, _Templated], {
       widgetsInTemplate:true,
       templateString:templateString,
	_idaccount: 0,
	_start: '1999-01-01',
	_end: null,
	_rows: 120,
	_lastid: 0,
	_function: 0,
postCreate: function(){

var t = this;

	if (t.Gridx) {

//Esta fila habilita que aparezca la columna idaccount
	t.columns();
	t.Gridx.pagination.setPageSize(25);
// Captura el evento cuando se hace click en una fila
dojo.connect(t.Gridx, 'onRowClick', function(event){
var d = this.cell(event.rowId, 1, true).data();
//console.log(d);
t.Gridx.store.fetch({query: {unique_id: d}, onItem: function(item){
t.emit('oneventclick', item);
}});
});


}

// Recibe la seÃ±al del servidor indicando que hubo algun cambio y la tabla debe actualizarse
if(typeof(EventSource)!=="undefined")
  {
  var source=new EventSource("events_and_comments_table_changed.usaga");
  source.onmessage=function(event)
    {

if(Number(event.data)>0){
t.load();
}

    };
  }
else
  {
console.log("Sorry, your browser does not support server-sent events...");
  }


},
columns: function(_c){
var cols = [];
cols.push({field:"idevent", name: "id", width: '25px'});
if(_c && _c.dateload){
cols.push({field:"dateload", name: "dateload", width: '50px'});
}
cols.push({field:"datetimeevent", name: "datetimeevent", width: '100px'});
if(_c && _c.idaccount){
cols.push({field:"idaccount", name: "idaccount", width: '50px'});
}
if(_c && _c.partition){
cols.push({field:"partition", name: "partition", width: '40px'});
}
cols.push({field:"enable", name: "enable", width: '40px', editable: true, editor: "dijit.form.CheckBox", editorArgs: jsGridx.EditorArgsToCellBooleanDisabled, alwaysEditing: true});
cols.push({field:"account", name: "account", width: '50px'});
cols.push({field:"name", name: "name", width: '150px'});
cols.push({field:"code", name: "code", width: '25px'});
cols.push({field:"zu", name: "zu", width: '15px'});
cols.push({field:"eventtype", name: "eventtype", width: '80px'});
cols.push({field:"priority", name: "priority", width: '30px'});
cols.push({field:"description", name: "description"});
if(_c && _c.ideventtype){
cols.push({field:"ideventtype", name: "ideventtype", width: '40px'});
}

		this.Gridx.setColumns(cols);
this.Gridx.autoUpdate = true;
this.Gridx.startup();
//console.log('Columnas ok');
},
load: function (){

var t = this;
var end_ = null;
if(t._end){
end = t._end;
}else{
 patt1=/[0-9|-]+/i;
end_ = new Date().toISOString().match(patt1)+' 23:59';
}

   R.get('fun_view_events_xml.usaga', {
            // Parse data from xml
	query: {idaccount: t._idaccount, start: t._start, end: end_, rows: t._rows, function: t._function},
            handleAs: "xml"
        }).then(
                function(response){
var d = new RXml.getFromXhr(response, 'row');
numrows = d.length;

var myData = {identifier: "unique_id", items: []};

var i = 0;
var idx = 0;
while(i<numrows){

idx = d.getNumber(i, "idevent");

myData.items[i] = {
unique_id: idx,
idevent: idx, 
dateload: new Date (d.getString(i, "dateload")).toUTCString(),
datetimeevent: new Date (d.getString(i, "datetimeevent")).toUTCString(),
idaccount: d.getNumber(i, "idaccount"),
partition: d.getNumber(i, "partition"),
enable: d.getBool(i, "enable"),
account: d.getStringFromB64(i, "account"),
name: d.getStringFromB64(i, "name"),
code: d.getStringFromB64(i, "code"),
zu: d.getNumber(i, "zu"),
priority: '<b stype="background: red;">'+d.getNumber(i, "priority")+'</b>',
description: d.getStringFromB64(i, "description"),
ideventtype: d.getNumber(i, "ideventtype"),
eventtype: d.getStringFromB64(i, "eventtype")
};
i++;
}

t._setData(myData);

                },
                function(error){
                    // Display the error returned
console.log(error);
t.emit('notify_message', {message: error}); 
                }
            );

},
_setData: function(data){
var t = this;
var st = t.Gridx.store;
st.clearOnClose = true;
	st.data = data;
	st.close();
		t.Gridx.store = null;
		t.Gridx.setStore(st);
t.Gridx.resize();
},
clear: function(){
this._setData({identifier: "unique_id", items: []});
},
_setIdaccountAttr: function(id){
this._idaccount = id;
},
_getIdaccountAttr: function(){
return t._idaccount;
},
_setStartAttr: function(s){
this._start = s;
},
_getStartAttr: function(){
return t._start;
},
_setEndAttr: function(s){
this._end = s;
},
_getEndAttr: function(){
return t._end;
},
_setRowsAttr: function(r){
this._rows = r;
},
_getRowsAttr: function(){
return t._rows;
},
_setFunctionAttr: function(f){
this._function = f;
},
_getFunctionAttr: function(){
return t._function;
},
resize: function(){
return this.Gridx.resize();
},
parameters: function(_p){
var t = this;
t._idaccount = _p.idaccount;
t._start = _p.startDate;
t._end = _p.endDate;
t._rows = _p.rows;
t.load();
}







   
});
});
